// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="a5a,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.733000,HLS_SYN_LAT=2,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=0,HLS_SYN_FF=96,HLS_SYN_LUT=728,HLS_VERSION=2018_3}" *)

module a5a (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        index,
        output_V_data_0_V_din,
        output_V_data_0_V_full_n,
        output_V_data_0_V_write,
        output_V_data_1_V_din,
        output_V_data_1_V_full_n,
        output_V_data_1_V_write,
        output_V_data_2_V_din,
        output_V_data_2_V_full_n,
        output_V_data_2_V_write,
        output_V_data_3_V_din,
        output_V_data_3_V_full_n,
        output_V_data_3_V_write,
        output_V_data_4_V_din,
        output_V_data_4_V_full_n,
        output_V_data_4_V_write,
        output_V_data_5_V_din,
        output_V_data_5_V_full_n,
        output_V_data_5_V_write,
        output_V_data_6_V_din,
        output_V_data_6_V_full_n,
        output_V_data_6_V_write,
        output_V_data_7_V_din,
        output_V_data_7_V_full_n,
        output_V_data_7_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] index;
output  [7:0] output_V_data_0_V_din;
input   output_V_data_0_V_full_n;
output   output_V_data_0_V_write;
output  [7:0] output_V_data_1_V_din;
input   output_V_data_1_V_full_n;
output   output_V_data_1_V_write;
output  [7:0] output_V_data_2_V_din;
input   output_V_data_2_V_full_n;
output   output_V_data_2_V_write;
output  [7:0] output_V_data_3_V_din;
input   output_V_data_3_V_full_n;
output   output_V_data_3_V_write;
output  [7:0] output_V_data_4_V_din;
input   output_V_data_4_V_full_n;
output   output_V_data_4_V_write;
output  [7:0] output_V_data_5_V_din;
input   output_V_data_5_V_full_n;
output   output_V_data_5_V_write;
output  [7:0] output_V_data_6_V_din;
input   output_V_data_6_V_full_n;
output   output_V_data_6_V_write;
output  [7:0] output_V_data_7_V_din;
input   output_V_data_7_V_full_n;
output   output_V_data_7_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] bram_0_address0;
reg    bram_0_ce0;
wire   [2:0] bram_0_q0;
wire   [2:0] bram_1_address0;
reg    bram_1_ce0;
wire   [3:0] bram_1_q0;
wire   [2:0] bram_2_address0;
reg    bram_2_ce0;
wire   [4:0] bram_2_q0;
wire   [2:0] bram_3_address0;
reg    bram_3_ce0;
wire   [3:0] bram_3_q0;
wire   [2:0] bram_4_address0;
reg    bram_4_ce0;
wire   [5:0] bram_4_q0;
wire   [2:0] bram_5_address0;
reg    bram_5_ce0;
wire   [5:0] bram_5_q0;
wire   [2:0] bram_6_address0;
reg    bram_6_ce0;
wire   [4:0] bram_6_q0;
wire   [2:0] bram_7_address0;
reg    bram_7_ce0;
wire   [3:0] bram_7_q0;
reg    output_V_data_0_V_blk_n;
wire    ap_CS_fsm_state3;
reg    output_V_data_1_V_blk_n;
reg    output_V_data_2_V_blk_n;
reg    output_V_data_3_V_blk_n;
reg    output_V_data_4_V_blk_n;
reg    output_V_data_5_V_blk_n;
reg    output_V_data_6_V_blk_n;
reg    output_V_data_7_V_blk_n;
reg   [28:0] arrayNo_reg_615;
wire   [7:0] tmp_data_0_V_fu_295_p10;
reg   [7:0] tmp_data_0_V_reg_660;
wire    ap_CS_fsm_state2;
wire   [7:0] tmp_data_1_V_fu_336_p10;
reg   [7:0] tmp_data_1_V_reg_665;
wire   [7:0] tmp_data_2_V_fu_377_p10;
reg   [7:0] tmp_data_2_V_reg_670;
wire   [7:0] tmp_data_3_V_fu_418_p10;
reg   [7:0] tmp_data_3_V_reg_675;
wire   [7:0] tmp_data_4_V_fu_459_p10;
reg   [7:0] tmp_data_4_V_reg_680;
wire   [7:0] tmp_data_5_V_fu_500_p10;
reg   [7:0] tmp_data_5_V_reg_685;
wire   [7:0] tmp_data_6_V_fu_541_p10;
reg   [7:0] tmp_data_6_V_reg_690;
wire   [7:0] tmp_data_7_V_fu_582_p10;
reg   [7:0] tmp_data_7_V_reg_695;
wire   [63:0] newIndex1_fu_236_p1;
reg    output_V_data_0_V1_update;
wire    output_V_data_0_V1_status;
wire   [2:0] tmp_14_fu_232_p1;
wire  signed [4:0] p_cast10_fu_263_p1;
wire  signed [5:0] p_cast9_fu_279_p1;
wire  signed [5:0] p_cast8_fu_287_p1;
wire   [7:0] p_cast7_fu_251_p1;
wire   [7:0] p_cast6_fu_255_p1;
wire   [7:0] p_cast5_fu_259_p1;
wire   [7:0] p_cast4_fu_267_p1;
wire   [7:0] p_cast3_fu_271_p1;
wire   [7:0] p_cast2_fu_275_p1;
wire   [7:0] p_cast1_fu_283_p1;
wire   [7:0] p_cast_fu_291_p1;
wire   [31:0] tmp_data_0_V_fu_295_p9;
wire   [31:0] tmp_1_fu_317_p2;
wire   [28:0] arrayNo9_fu_322_p4;
wire   [31:0] tmp_data_1_V_fu_336_p9;
wire   [31:0] tmp_3_fu_358_p2;
wire   [28:0] arrayNo1_fu_363_p4;
wire   [31:0] tmp_data_2_V_fu_377_p9;
wire   [31:0] tmp_5_fu_399_p2;
wire   [28:0] arrayNo2_fu_404_p4;
wire   [31:0] tmp_data_3_V_fu_418_p9;
wire   [31:0] tmp_7_fu_440_p2;
wire   [28:0] arrayNo3_fu_445_p4;
wire   [31:0] tmp_data_4_V_fu_459_p9;
wire   [31:0] tmp_9_fu_481_p2;
wire   [28:0] arrayNo4_fu_486_p4;
wire   [31:0] tmp_data_5_V_fu_500_p9;
wire   [31:0] tmp_s_fu_522_p2;
wire   [28:0] arrayNo5_fu_527_p4;
wire   [31:0] tmp_data_6_V_fu_541_p9;
wire   [31:0] tmp_2_fu_563_p2;
wire   [28:0] arrayNo6_fu_568_p4;
wire   [31:0] tmp_data_7_V_fu_582_p9;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
end

a5a_bram_0 #(
    .DataWidth( 3 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
bram_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bram_0_address0),
    .ce0(bram_0_ce0),
    .q0(bram_0_q0)
);

a5a_bram_1 #(
    .DataWidth( 4 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
bram_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bram_1_address0),
    .ce0(bram_1_ce0),
    .q0(bram_1_q0)
);

a5a_bram_2 #(
    .DataWidth( 5 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
bram_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bram_2_address0),
    .ce0(bram_2_ce0),
    .q0(bram_2_q0)
);

a5a_bram_1 #(
    .DataWidth( 4 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
bram_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bram_3_address0),
    .ce0(bram_3_ce0),
    .q0(bram_3_q0)
);

a5a_bram_4 #(
    .DataWidth( 6 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
bram_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bram_4_address0),
    .ce0(bram_4_ce0),
    .q0(bram_4_q0)
);

a5a_bram_5 #(
    .DataWidth( 6 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
bram_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bram_5_address0),
    .ce0(bram_5_ce0),
    .q0(bram_5_q0)
);

a5a_bram_2 #(
    .DataWidth( 5 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
bram_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bram_6_address0),
    .ce0(bram_6_ce0),
    .q0(bram_6_q0)
);

a5a_bram_1 #(
    .DataWidth( 4 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
bram_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bram_7_address0),
    .ce0(bram_7_ce0),
    .q0(bram_7_q0)
);

a5a_mux_832_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 32 ),
    .dout_WIDTH( 8 ))
a5a_mux_832_8_1_1_U1(
    .din0(p_cast7_fu_251_p1),
    .din1(p_cast6_fu_255_p1),
    .din2(p_cast5_fu_259_p1),
    .din3(p_cast4_fu_267_p1),
    .din4(p_cast3_fu_271_p1),
    .din5(p_cast2_fu_275_p1),
    .din6(p_cast1_fu_283_p1),
    .din7(p_cast_fu_291_p1),
    .din8(tmp_data_0_V_fu_295_p9),
    .dout(tmp_data_0_V_fu_295_p10)
);

a5a_mux_832_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 32 ),
    .dout_WIDTH( 8 ))
a5a_mux_832_8_1_1_U2(
    .din0(p_cast7_fu_251_p1),
    .din1(p_cast6_fu_255_p1),
    .din2(p_cast5_fu_259_p1),
    .din3(p_cast4_fu_267_p1),
    .din4(p_cast3_fu_271_p1),
    .din5(p_cast2_fu_275_p1),
    .din6(p_cast1_fu_283_p1),
    .din7(p_cast_fu_291_p1),
    .din8(tmp_data_1_V_fu_336_p9),
    .dout(tmp_data_1_V_fu_336_p10)
);

a5a_mux_832_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 32 ),
    .dout_WIDTH( 8 ))
a5a_mux_832_8_1_1_U3(
    .din0(p_cast7_fu_251_p1),
    .din1(p_cast6_fu_255_p1),
    .din2(p_cast5_fu_259_p1),
    .din3(p_cast4_fu_267_p1),
    .din4(p_cast3_fu_271_p1),
    .din5(p_cast2_fu_275_p1),
    .din6(p_cast1_fu_283_p1),
    .din7(p_cast_fu_291_p1),
    .din8(tmp_data_2_V_fu_377_p9),
    .dout(tmp_data_2_V_fu_377_p10)
);

a5a_mux_832_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 32 ),
    .dout_WIDTH( 8 ))
a5a_mux_832_8_1_1_U4(
    .din0(p_cast7_fu_251_p1),
    .din1(p_cast6_fu_255_p1),
    .din2(p_cast5_fu_259_p1),
    .din3(p_cast4_fu_267_p1),
    .din4(p_cast3_fu_271_p1),
    .din5(p_cast2_fu_275_p1),
    .din6(p_cast1_fu_283_p1),
    .din7(p_cast_fu_291_p1),
    .din8(tmp_data_3_V_fu_418_p9),
    .dout(tmp_data_3_V_fu_418_p10)
);

a5a_mux_832_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 32 ),
    .dout_WIDTH( 8 ))
a5a_mux_832_8_1_1_U5(
    .din0(p_cast7_fu_251_p1),
    .din1(p_cast6_fu_255_p1),
    .din2(p_cast5_fu_259_p1),
    .din3(p_cast4_fu_267_p1),
    .din4(p_cast3_fu_271_p1),
    .din5(p_cast2_fu_275_p1),
    .din6(p_cast1_fu_283_p1),
    .din7(p_cast_fu_291_p1),
    .din8(tmp_data_4_V_fu_459_p9),
    .dout(tmp_data_4_V_fu_459_p10)
);

a5a_mux_832_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 32 ),
    .dout_WIDTH( 8 ))
a5a_mux_832_8_1_1_U6(
    .din0(p_cast7_fu_251_p1),
    .din1(p_cast6_fu_255_p1),
    .din2(p_cast5_fu_259_p1),
    .din3(p_cast4_fu_267_p1),
    .din4(p_cast3_fu_271_p1),
    .din5(p_cast2_fu_275_p1),
    .din6(p_cast1_fu_283_p1),
    .din7(p_cast_fu_291_p1),
    .din8(tmp_data_5_V_fu_500_p9),
    .dout(tmp_data_5_V_fu_500_p10)
);

a5a_mux_832_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 32 ),
    .dout_WIDTH( 8 ))
a5a_mux_832_8_1_1_U7(
    .din0(p_cast7_fu_251_p1),
    .din1(p_cast6_fu_255_p1),
    .din2(p_cast5_fu_259_p1),
    .din3(p_cast4_fu_267_p1),
    .din4(p_cast3_fu_271_p1),
    .din5(p_cast2_fu_275_p1),
    .din6(p_cast1_fu_283_p1),
    .din7(p_cast_fu_291_p1),
    .din8(tmp_data_6_V_fu_541_p9),
    .dout(tmp_data_6_V_fu_541_p10)
);

a5a_mux_832_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 32 ),
    .dout_WIDTH( 8 ))
a5a_mux_832_8_1_1_U8(
    .din0(p_cast7_fu_251_p1),
    .din1(p_cast6_fu_255_p1),
    .din2(p_cast5_fu_259_p1),
    .din3(p_cast4_fu_267_p1),
    .din4(p_cast3_fu_271_p1),
    .din5(p_cast2_fu_275_p1),
    .din6(p_cast1_fu_283_p1),
    .din7(p_cast_fu_291_p1),
    .din8(tmp_data_7_V_fu_582_p9),
    .dout(tmp_data_7_V_fu_582_p10)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        arrayNo_reg_615 <= {{index[31:3]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_data_0_V_reg_660 <= tmp_data_0_V_fu_295_p10;
        tmp_data_1_V_reg_665 <= tmp_data_1_V_fu_336_p10;
        tmp_data_2_V_reg_670 <= tmp_data_2_V_fu_377_p10;
        tmp_data_3_V_reg_675 <= tmp_data_3_V_fu_418_p10;
        tmp_data_4_V_reg_680 <= tmp_data_4_V_fu_459_p10;
        tmp_data_5_V_reg_685 <= tmp_data_5_V_fu_500_p10;
        tmp_data_6_V_reg_690 <= tmp_data_6_V_fu_541_p10;
        tmp_data_7_V_reg_695 <= tmp_data_7_V_fu_582_p10;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (output_V_data_0_V1_status == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (output_V_data_0_V1_status == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        bram_0_ce0 = 1'b1;
    end else begin
        bram_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        bram_1_ce0 = 1'b1;
    end else begin
        bram_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        bram_2_ce0 = 1'b1;
    end else begin
        bram_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        bram_3_ce0 = 1'b1;
    end else begin
        bram_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        bram_4_ce0 = 1'b1;
    end else begin
        bram_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        bram_5_ce0 = 1'b1;
    end else begin
        bram_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        bram_6_ce0 = 1'b1;
    end else begin
        bram_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        bram_7_ce0 = 1'b1;
    end else begin
        bram_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (output_V_data_0_V1_status == 1'b1))) begin
        output_V_data_0_V1_update = 1'b1;
    end else begin
        output_V_data_0_V1_update = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        output_V_data_0_V_blk_n = output_V_data_0_V_full_n;
    end else begin
        output_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        output_V_data_1_V_blk_n = output_V_data_1_V_full_n;
    end else begin
        output_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        output_V_data_2_V_blk_n = output_V_data_2_V_full_n;
    end else begin
        output_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        output_V_data_3_V_blk_n = output_V_data_3_V_full_n;
    end else begin
        output_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        output_V_data_4_V_blk_n = output_V_data_4_V_full_n;
    end else begin
        output_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        output_V_data_5_V_blk_n = output_V_data_5_V_full_n;
    end else begin
        output_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        output_V_data_6_V_blk_n = output_V_data_6_V_full_n;
    end else begin
        output_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        output_V_data_7_V_blk_n = output_V_data_7_V_full_n;
    end else begin
        output_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (output_V_data_0_V1_status == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign arrayNo1_fu_363_p4 = {{tmp_3_fu_358_p2[31:3]}};

assign arrayNo2_fu_404_p4 = {{tmp_5_fu_399_p2[31:3]}};

assign arrayNo3_fu_445_p4 = {{tmp_7_fu_440_p2[31:3]}};

assign arrayNo4_fu_486_p4 = {{tmp_9_fu_481_p2[31:3]}};

assign arrayNo5_fu_527_p4 = {{tmp_s_fu_522_p2[31:3]}};

assign arrayNo6_fu_568_p4 = {{tmp_2_fu_563_p2[31:3]}};

assign arrayNo9_fu_322_p4 = {{tmp_1_fu_317_p2[31:3]}};

assign bram_0_address0 = newIndex1_fu_236_p1;

assign bram_1_address0 = newIndex1_fu_236_p1;

assign bram_2_address0 = newIndex1_fu_236_p1;

assign bram_3_address0 = newIndex1_fu_236_p1;

assign bram_4_address0 = newIndex1_fu_236_p1;

assign bram_5_address0 = newIndex1_fu_236_p1;

assign bram_6_address0 = newIndex1_fu_236_p1;

assign bram_7_address0 = newIndex1_fu_236_p1;

assign newIndex1_fu_236_p1 = tmp_14_fu_232_p1;

assign output_V_data_0_V1_status = (output_V_data_7_V_full_n & output_V_data_6_V_full_n & output_V_data_5_V_full_n & output_V_data_4_V_full_n & output_V_data_3_V_full_n & output_V_data_2_V_full_n & output_V_data_1_V_full_n & output_V_data_0_V_full_n);

assign output_V_data_0_V_din = tmp_data_0_V_reg_660;

assign output_V_data_0_V_write = output_V_data_0_V1_update;

assign output_V_data_1_V_din = tmp_data_1_V_reg_665;

assign output_V_data_1_V_write = output_V_data_0_V1_update;

assign output_V_data_2_V_din = tmp_data_2_V_reg_670;

assign output_V_data_2_V_write = output_V_data_0_V1_update;

assign output_V_data_3_V_din = tmp_data_3_V_reg_675;

assign output_V_data_3_V_write = output_V_data_0_V1_update;

assign output_V_data_4_V_din = tmp_data_4_V_reg_680;

assign output_V_data_4_V_write = output_V_data_0_V1_update;

assign output_V_data_5_V_din = tmp_data_5_V_reg_685;

assign output_V_data_5_V_write = output_V_data_0_V1_update;

assign output_V_data_6_V_din = tmp_data_6_V_reg_690;

assign output_V_data_6_V_write = output_V_data_0_V1_update;

assign output_V_data_7_V_din = tmp_data_7_V_reg_695;

assign output_V_data_7_V_write = output_V_data_0_V1_update;

assign p_cast10_fu_263_p1 = $signed(bram_3_q0);

assign p_cast1_fu_283_p1 = $unsigned(p_cast9_fu_279_p1);

assign p_cast2_fu_275_p1 = bram_5_q0;

assign p_cast3_fu_271_p1 = bram_4_q0;

assign p_cast4_fu_267_p1 = $unsigned(p_cast10_fu_263_p1);

assign p_cast5_fu_259_p1 = bram_2_q0;

assign p_cast6_fu_255_p1 = bram_1_q0;

assign p_cast7_fu_251_p1 = bram_0_q0;

assign p_cast8_fu_287_p1 = $signed(bram_7_q0);

assign p_cast9_fu_279_p1 = $signed(bram_6_q0);

assign p_cast_fu_291_p1 = $unsigned(p_cast8_fu_287_p1);

assign tmp_14_fu_232_p1 = index[2:0];

assign tmp_1_fu_317_p2 = (32'd8 + index);

assign tmp_2_fu_563_p2 = (32'd56 + index);

assign tmp_3_fu_358_p2 = (32'd16 + index);

assign tmp_5_fu_399_p2 = (32'd24 + index);

assign tmp_7_fu_440_p2 = (32'd32 + index);

assign tmp_9_fu_481_p2 = (32'd40 + index);

assign tmp_data_0_V_fu_295_p9 = arrayNo_reg_615;

assign tmp_data_1_V_fu_336_p9 = arrayNo9_fu_322_p4;

assign tmp_data_2_V_fu_377_p9 = arrayNo1_fu_363_p4;

assign tmp_data_3_V_fu_418_p9 = arrayNo2_fu_404_p4;

assign tmp_data_4_V_fu_459_p9 = arrayNo3_fu_445_p4;

assign tmp_data_5_V_fu_500_p9 = arrayNo4_fu_486_p4;

assign tmp_data_6_V_fu_541_p9 = arrayNo5_fu_527_p4;

assign tmp_data_7_V_fu_582_p9 = arrayNo6_fu_568_p4;

assign tmp_s_fu_522_p2 = (32'd48 + index);

endmodule //a5a
