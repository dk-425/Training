// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module crc24a_crc24a_Pipeline_VITIS_LOOP_16_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        d_bits_V_address0,
        d_bits_V_ce0,
        d_bits_V_q0,
        p_0_0_01181874_out,
        p_0_0_01181874_out_ap_vld,
        p_0_0_01181871_out,
        p_0_0_01181871_out_ap_vld,
        p_0_0_01181868_out,
        p_0_0_01181868_out_ap_vld,
        p_0_0_01181865_out,
        p_0_0_01181865_out_ap_vld,
        p_0_0_01181862_out,
        p_0_0_01181862_out_ap_vld,
        p_0_0_01181859_out,
        p_0_0_01181859_out_ap_vld,
        p_0_0_01181856_out,
        p_0_0_01181856_out_ap_vld,
        p_0_0_01181853_out,
        p_0_0_01181853_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] d_bits_V_address0;
output   d_bits_V_ce0;
input  [0:0] d_bits_V_q0;
output  [0:0] p_0_0_01181874_out;
output   p_0_0_01181874_out_ap_vld;
output  [0:0] p_0_0_01181871_out;
output   p_0_0_01181871_out_ap_vld;
output  [0:0] p_0_0_01181868_out;
output   p_0_0_01181868_out_ap_vld;
output  [0:0] p_0_0_01181865_out;
output   p_0_0_01181865_out_ap_vld;
output  [0:0] p_0_0_01181862_out;
output   p_0_0_01181862_out_ap_vld;
output  [0:0] p_0_0_01181859_out;
output   p_0_0_01181859_out_ap_vld;
output  [0:0] p_0_0_01181856_out;
output   p_0_0_01181856_out_ap_vld;
output  [0:0] p_0_0_01181853_out;
output   p_0_0_01181853_out_ap_vld;

reg ap_idle;
reg d_bits_V_ce0;
reg p_0_0_01181874_out_ap_vld;
reg p_0_0_01181871_out_ap_vld;
reg p_0_0_01181868_out_ap_vld;
reg p_0_0_01181865_out_ap_vld;
reg p_0_0_01181862_out_ap_vld;
reg p_0_0_01181859_out_ap_vld;
reg p_0_0_01181856_out_ap_vld;
reg p_0_0_01181853_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln16_fu_171_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [2:0] trunc_ln19_fu_188_p1;
reg   [2:0] trunc_ln19_reg_332;
wire   [63:0] zext_ln16_fu_183_p1;
wire    ap_block_pp0_stage0;
reg   [3:0] j_fu_58;
wire   [3:0] add_ln16_fu_177_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_j_1;
reg   [0:0] p_0_0_01181853_fu_62;
reg   [0:0] p_0_0_01181856_fu_66;
reg   [0:0] p_0_0_01181859_fu_70;
reg   [0:0] p_0_0_01181862_fu_74;
reg   [0:0] p_0_0_01181865_fu_78;
reg   [0:0] p_0_0_01181868_fu_82;
reg   [0:0] p_0_0_01181871_fu_86;
reg   [0:0] p_0_0_01181874_fu_90;
wire    ap_block_pp0_stage0_01001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

crc24a_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln16_fu_171_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_58 <= add_ln16_fu_177_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_58 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln19_reg_332 == 3'd6) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_01181853_fu_62 <= d_bits_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln19_reg_332 == 3'd5) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_01181856_fu_66 <= d_bits_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln19_reg_332 == 3'd4) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_01181859_fu_70 <= d_bits_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln19_reg_332 == 3'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_01181862_fu_74 <= d_bits_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln19_reg_332 == 3'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_01181865_fu_78 <= d_bits_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln19_reg_332 == 3'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_01181868_fu_82 <= d_bits_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln19_reg_332 == 3'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_01181871_fu_86 <= d_bits_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln19_reg_332 == 3'd7) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_01181874_fu_90 <= d_bits_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_171_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln19_reg_332 <= trunc_ln19_fu_188_p1;
    end
end

always @ (*) begin
    if (((icmp_ln16_fu_171_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_1 = 4'd0;
    end else begin
        ap_sig_allocacmp_j_1 = j_fu_58;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        d_bits_V_ce0 = 1'b1;
    end else begin
        d_bits_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln16_fu_171_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_01181853_out_ap_vld = 1'b1;
    end else begin
        p_0_0_01181853_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln16_fu_171_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_01181856_out_ap_vld = 1'b1;
    end else begin
        p_0_0_01181856_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln16_fu_171_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_01181859_out_ap_vld = 1'b1;
    end else begin
        p_0_0_01181859_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln16_fu_171_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_01181862_out_ap_vld = 1'b1;
    end else begin
        p_0_0_01181862_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln16_fu_171_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_01181865_out_ap_vld = 1'b1;
    end else begin
        p_0_0_01181865_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln16_fu_171_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_01181868_out_ap_vld = 1'b1;
    end else begin
        p_0_0_01181868_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln16_fu_171_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_01181871_out_ap_vld = 1'b1;
    end else begin
        p_0_0_01181871_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln16_fu_171_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_01181874_out_ap_vld = 1'b1;
    end else begin
        p_0_0_01181874_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln16_fu_177_p2 = (ap_sig_allocacmp_j_1 + 4'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign d_bits_V_address0 = zext_ln16_fu_183_p1;

assign icmp_ln16_fu_171_p2 = ((ap_sig_allocacmp_j_1 == 4'd8) ? 1'b1 : 1'b0);

assign p_0_0_01181853_out = p_0_0_01181853_fu_62;

assign p_0_0_01181856_out = p_0_0_01181856_fu_66;

assign p_0_0_01181859_out = p_0_0_01181859_fu_70;

assign p_0_0_01181862_out = p_0_0_01181862_fu_74;

assign p_0_0_01181865_out = p_0_0_01181865_fu_78;

assign p_0_0_01181868_out = p_0_0_01181868_fu_82;

assign p_0_0_01181871_out = p_0_0_01181871_fu_86;

assign p_0_0_01181874_out = p_0_0_01181874_fu_90;

assign trunc_ln19_fu_188_p1 = ap_sig_allocacmp_j_1[2:0];

assign zext_ln16_fu_183_p1 = ap_sig_allocacmp_j_1;

endmodule //crc24a_crc24a_Pipeline_VITIS_LOOP_16_1
