// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
// Version: 2022.2.2
// Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cyclicPrefixRemoval_cyclicPrefixRemoval_Pipeline_VITIS_LOOP_9_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        inpstream_TVALID,
        oupstream_TREADY,
        inpstream_TDATA,
        inpstream_TREADY,
        oupstream_TDATA,
        oupstream_TVALID
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   inpstream_TVALID;
input   oupstream_TREADY;
input  [63:0] inpstream_TDATA;
output   inpstream_TREADY;
output  [63:0] oupstream_TDATA;
output   oupstream_TVALID;

reg ap_idle;
reg inpstream_TREADY;
reg oupstream_TVALID;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire   [0:0] icmp_ln9_fu_67_p2;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] or_ln14_reg_129;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state2_io;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    inpstream_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    oupstream_TDATA_blk_n;
reg   [63:0] invar_reg_124;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] or_ln14_fu_97_p2;
reg   [13:0] i_fu_42;
wire   [13:0] i_3_fu_103_p2;
wire    ap_loop_init;
reg   [13:0] ap_sig_allocacmp_i_2;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln14_fu_73_p2;
wire   [0:0] icmp_ln14_1_fu_79_p2;
wire   [0:0] and_ln14_fu_85_p2;
wire   [0:0] icmp_ln14_2_fu_91_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

cyclicPrefixRemoval_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln9_fu_67_p2 == 1'd0) & (ap_start_int == 1'b1))) begin
            i_fu_42 <= i_3_fu_103_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_42 <= 14'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln9_fu_67_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        invar_reg_124 <= inpstream_TDATA;
        or_ln14_reg_129 <= or_ln14_fu_97_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln9_fu_67_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_2 = 14'd1;
    end else begin
        ap_sig_allocacmp_i_2 = i_fu_42;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln9_fu_67_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inpstream_TDATA_blk_n = inpstream_TVALID;
    end else begin
        inpstream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln9_fu_67_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inpstream_TREADY = 1'b1;
    end else begin
        inpstream_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (or_ln14_reg_129 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        oupstream_TDATA_blk_n = oupstream_TREADY;
    end else begin
        oupstream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_ln14_reg_129 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        oupstream_TVALID = 1'b1;
    end else begin
        oupstream_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln14_fu_85_p2 = (icmp_ln14_fu_73_p2 & icmp_ln14_1_fu_79_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((or_ln14_reg_129 == 1'd1) & (oupstream_TREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((icmp_ln9_fu_67_p2 == 1'd0) & (inpstream_TVALID == 1'b0) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state2_io) | ((or_ln14_reg_129 == 1'd1) & (oupstream_TREADY == 1'b0)))) | ((icmp_ln9_fu_67_p2 == 1'd0) & (inpstream_TVALID == 1'b0) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state2_io) | ((or_ln14_reg_129 == 1'd1) & (oupstream_TREADY == 1'b0)))) | ((icmp_ln9_fu_67_p2 == 1'd0) & (inpstream_TVALID == 1'b0) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((icmp_ln9_fu_67_p2 == 1'd0) & (inpstream_TVALID == 1'b0));
end

always @ (*) begin
    ap_block_state2_io = ((or_ln14_reg_129 == 1'd1) & (oupstream_TREADY == 1'b0));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((or_ln14_reg_129 == 1'd1) & (oupstream_TREADY == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_3_fu_103_p2 = (ap_sig_allocacmp_i_2 + 14'd1);

assign icmp_ln14_1_fu_79_p2 = ((ap_sig_allocacmp_i_2 < 14'd4417) ? 1'b1 : 1'b0);

assign icmp_ln14_2_fu_91_p2 = ((ap_sig_allocacmp_i_2 > 14'd4704) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_73_p2 = ((ap_sig_allocacmp_i_2 > 14'd320) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_67_p2 = ((ap_sig_allocacmp_i_2 == 14'd8801) ? 1'b1 : 1'b0);

assign or_ln14_fu_97_p2 = (icmp_ln14_2_fu_91_p2 | and_ln14_fu_85_p2);

assign oupstream_TDATA = invar_reg_124;

endmodule //cyclicPrefixRemoval_cyclicPrefixRemoval_Pipeline_VITIS_LOOP_9_1
