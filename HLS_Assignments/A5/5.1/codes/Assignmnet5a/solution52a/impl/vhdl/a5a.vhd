-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity a5a is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    index : IN STD_LOGIC_VECTOR (31 downto 0);
    output_V_data_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_V_data_0_V_full_n : IN STD_LOGIC;
    output_V_data_0_V_write : OUT STD_LOGIC;
    output_V_data_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_V_data_1_V_full_n : IN STD_LOGIC;
    output_V_data_1_V_write : OUT STD_LOGIC;
    output_V_data_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_V_data_2_V_full_n : IN STD_LOGIC;
    output_V_data_2_V_write : OUT STD_LOGIC;
    output_V_data_3_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_V_data_3_V_full_n : IN STD_LOGIC;
    output_V_data_3_V_write : OUT STD_LOGIC;
    output_V_data_4_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_V_data_4_V_full_n : IN STD_LOGIC;
    output_V_data_4_V_write : OUT STD_LOGIC;
    output_V_data_5_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_V_data_5_V_full_n : IN STD_LOGIC;
    output_V_data_5_V_write : OUT STD_LOGIC;
    output_V_data_6_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_V_data_6_V_full_n : IN STD_LOGIC;
    output_V_data_6_V_write : OUT STD_LOGIC;
    output_V_data_7_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_V_data_7_V_full_n : IN STD_LOGIC;
    output_V_data_7_V_write : OUT STD_LOGIC );
end;


architecture behav of a5a is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "a5a,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.733000,HLS_SYN_LAT=2,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=0,HLS_SYN_FF=96,HLS_SYN_LUT=728,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal bram_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal bram_0_ce0 : STD_LOGIC;
    signal bram_0_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal bram_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal bram_1_ce0 : STD_LOGIC;
    signal bram_1_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal bram_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal bram_2_ce0 : STD_LOGIC;
    signal bram_2_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal bram_3_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal bram_3_ce0 : STD_LOGIC;
    signal bram_3_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal bram_4_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal bram_4_ce0 : STD_LOGIC;
    signal bram_4_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal bram_5_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal bram_5_ce0 : STD_LOGIC;
    signal bram_5_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal bram_6_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal bram_6_ce0 : STD_LOGIC;
    signal bram_6_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal bram_7_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal bram_7_ce0 : STD_LOGIC;
    signal bram_7_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal output_V_data_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal output_V_data_1_V_blk_n : STD_LOGIC;
    signal output_V_data_2_V_blk_n : STD_LOGIC;
    signal output_V_data_3_V_blk_n : STD_LOGIC;
    signal output_V_data_4_V_blk_n : STD_LOGIC;
    signal output_V_data_5_V_blk_n : STD_LOGIC;
    signal output_V_data_6_V_blk_n : STD_LOGIC;
    signal output_V_data_7_V_blk_n : STD_LOGIC;
    signal arrayNo_reg_615 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_data_0_V_fu_295_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_data_0_V_reg_660 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_data_1_V_fu_336_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_data_1_V_reg_665 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_data_2_V_fu_377_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_data_2_V_reg_670 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_data_3_V_fu_418_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_data_3_V_reg_675 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_data_4_V_fu_459_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_data_4_V_reg_680 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_data_5_V_fu_500_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_data_5_V_reg_685 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_data_6_V_fu_541_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_data_6_V_reg_690 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_data_7_V_fu_582_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_data_7_V_reg_695 : STD_LOGIC_VECTOR (7 downto 0);
    signal newIndex1_fu_236_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal output_V_data_0_V1_update : STD_LOGIC;
    signal output_V_data_0_V1_status : STD_LOGIC;
    signal tmp_14_fu_232_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_cast10_fu_263_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_cast9_fu_279_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_cast8_fu_287_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_cast7_fu_251_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_cast6_fu_255_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_cast5_fu_259_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_cast4_fu_267_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_cast3_fu_271_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_cast2_fu_275_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_cast1_fu_283_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_cast_fu_291_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_data_0_V_fu_295_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_317_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal arrayNo9_fu_322_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_data_1_V_fu_336_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_358_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal arrayNo1_fu_363_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_data_2_V_fu_377_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_399_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal arrayNo2_fu_404_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_data_3_V_fu_418_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_440_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal arrayNo3_fu_445_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_data_4_V_fu_459_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_481_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal arrayNo4_fu_486_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_data_5_V_fu_500_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_522_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal arrayNo5_fu_527_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_data_6_V_fu_541_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_563_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal arrayNo6_fu_568_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_data_7_V_fu_582_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);

    component a5a_mux_832_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        din6 : IN STD_LOGIC_VECTOR (7 downto 0);
        din7 : IN STD_LOGIC_VECTOR (7 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component a5a_bram_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component a5a_bram_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component a5a_bram_2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component a5a_bram_4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component a5a_bram_5 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;



begin
    bram_0_U : component a5a_bram_0
    generic map (
        DataWidth => 3,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bram_0_address0,
        ce0 => bram_0_ce0,
        q0 => bram_0_q0);

    bram_1_U : component a5a_bram_1
    generic map (
        DataWidth => 4,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bram_1_address0,
        ce0 => bram_1_ce0,
        q0 => bram_1_q0);

    bram_2_U : component a5a_bram_2
    generic map (
        DataWidth => 5,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bram_2_address0,
        ce0 => bram_2_ce0,
        q0 => bram_2_q0);

    bram_3_U : component a5a_bram_1
    generic map (
        DataWidth => 4,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bram_3_address0,
        ce0 => bram_3_ce0,
        q0 => bram_3_q0);

    bram_4_U : component a5a_bram_4
    generic map (
        DataWidth => 6,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bram_4_address0,
        ce0 => bram_4_ce0,
        q0 => bram_4_q0);

    bram_5_U : component a5a_bram_5
    generic map (
        DataWidth => 6,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bram_5_address0,
        ce0 => bram_5_ce0,
        q0 => bram_5_q0);

    bram_6_U : component a5a_bram_2
    generic map (
        DataWidth => 5,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bram_6_address0,
        ce0 => bram_6_ce0,
        q0 => bram_6_q0);

    bram_7_U : component a5a_bram_1
    generic map (
        DataWidth => 4,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bram_7_address0,
        ce0 => bram_7_ce0,
        q0 => bram_7_q0);

    a5a_mux_832_8_1_1_U1 : component a5a_mux_832_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 32,
        dout_WIDTH => 8)
    port map (
        din0 => p_cast7_fu_251_p1,
        din1 => p_cast6_fu_255_p1,
        din2 => p_cast5_fu_259_p1,
        din3 => p_cast4_fu_267_p1,
        din4 => p_cast3_fu_271_p1,
        din5 => p_cast2_fu_275_p1,
        din6 => p_cast1_fu_283_p1,
        din7 => p_cast_fu_291_p1,
        din8 => tmp_data_0_V_fu_295_p9,
        dout => tmp_data_0_V_fu_295_p10);

    a5a_mux_832_8_1_1_U2 : component a5a_mux_832_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 32,
        dout_WIDTH => 8)
    port map (
        din0 => p_cast7_fu_251_p1,
        din1 => p_cast6_fu_255_p1,
        din2 => p_cast5_fu_259_p1,
        din3 => p_cast4_fu_267_p1,
        din4 => p_cast3_fu_271_p1,
        din5 => p_cast2_fu_275_p1,
        din6 => p_cast1_fu_283_p1,
        din7 => p_cast_fu_291_p1,
        din8 => tmp_data_1_V_fu_336_p9,
        dout => tmp_data_1_V_fu_336_p10);

    a5a_mux_832_8_1_1_U3 : component a5a_mux_832_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 32,
        dout_WIDTH => 8)
    port map (
        din0 => p_cast7_fu_251_p1,
        din1 => p_cast6_fu_255_p1,
        din2 => p_cast5_fu_259_p1,
        din3 => p_cast4_fu_267_p1,
        din4 => p_cast3_fu_271_p1,
        din5 => p_cast2_fu_275_p1,
        din6 => p_cast1_fu_283_p1,
        din7 => p_cast_fu_291_p1,
        din8 => tmp_data_2_V_fu_377_p9,
        dout => tmp_data_2_V_fu_377_p10);

    a5a_mux_832_8_1_1_U4 : component a5a_mux_832_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 32,
        dout_WIDTH => 8)
    port map (
        din0 => p_cast7_fu_251_p1,
        din1 => p_cast6_fu_255_p1,
        din2 => p_cast5_fu_259_p1,
        din3 => p_cast4_fu_267_p1,
        din4 => p_cast3_fu_271_p1,
        din5 => p_cast2_fu_275_p1,
        din6 => p_cast1_fu_283_p1,
        din7 => p_cast_fu_291_p1,
        din8 => tmp_data_3_V_fu_418_p9,
        dout => tmp_data_3_V_fu_418_p10);

    a5a_mux_832_8_1_1_U5 : component a5a_mux_832_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 32,
        dout_WIDTH => 8)
    port map (
        din0 => p_cast7_fu_251_p1,
        din1 => p_cast6_fu_255_p1,
        din2 => p_cast5_fu_259_p1,
        din3 => p_cast4_fu_267_p1,
        din4 => p_cast3_fu_271_p1,
        din5 => p_cast2_fu_275_p1,
        din6 => p_cast1_fu_283_p1,
        din7 => p_cast_fu_291_p1,
        din8 => tmp_data_4_V_fu_459_p9,
        dout => tmp_data_4_V_fu_459_p10);

    a5a_mux_832_8_1_1_U6 : component a5a_mux_832_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 32,
        dout_WIDTH => 8)
    port map (
        din0 => p_cast7_fu_251_p1,
        din1 => p_cast6_fu_255_p1,
        din2 => p_cast5_fu_259_p1,
        din3 => p_cast4_fu_267_p1,
        din4 => p_cast3_fu_271_p1,
        din5 => p_cast2_fu_275_p1,
        din6 => p_cast1_fu_283_p1,
        din7 => p_cast_fu_291_p1,
        din8 => tmp_data_5_V_fu_500_p9,
        dout => tmp_data_5_V_fu_500_p10);

    a5a_mux_832_8_1_1_U7 : component a5a_mux_832_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 32,
        dout_WIDTH => 8)
    port map (
        din0 => p_cast7_fu_251_p1,
        din1 => p_cast6_fu_255_p1,
        din2 => p_cast5_fu_259_p1,
        din3 => p_cast4_fu_267_p1,
        din4 => p_cast3_fu_271_p1,
        din5 => p_cast2_fu_275_p1,
        din6 => p_cast1_fu_283_p1,
        din7 => p_cast_fu_291_p1,
        din8 => tmp_data_6_V_fu_541_p9,
        dout => tmp_data_6_V_fu_541_p10);

    a5a_mux_832_8_1_1_U8 : component a5a_mux_832_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 32,
        dout_WIDTH => 8)
    port map (
        din0 => p_cast7_fu_251_p1,
        din1 => p_cast6_fu_255_p1,
        din2 => p_cast5_fu_259_p1,
        din3 => p_cast4_fu_267_p1,
        din4 => p_cast3_fu_271_p1,
        din5 => p_cast2_fu_275_p1,
        din6 => p_cast1_fu_283_p1,
        din7 => p_cast_fu_291_p1,
        din8 => tmp_data_7_V_fu_582_p9,
        dout => tmp_data_7_V_fu_582_p10);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                arrayNo_reg_615 <= index(31 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                tmp_data_0_V_reg_660 <= tmp_data_0_V_fu_295_p10;
                tmp_data_1_V_reg_665 <= tmp_data_1_V_fu_336_p10;
                tmp_data_2_V_reg_670 <= tmp_data_2_V_fu_377_p10;
                tmp_data_3_V_reg_675 <= tmp_data_3_V_fu_418_p10;
                tmp_data_4_V_reg_680 <= tmp_data_4_V_fu_459_p10;
                tmp_data_5_V_reg_685 <= tmp_data_5_V_fu_500_p10;
                tmp_data_6_V_reg_690 <= tmp_data_6_V_fu_541_p10;
                tmp_data_7_V_reg_695 <= tmp_data_7_V_fu_582_p10;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, output_V_data_0_V1_status)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (output_V_data_0_V1_status = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_done_assign_proc : process(ap_CS_fsm_state3, output_V_data_0_V1_status)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (output_V_data_0_V1_status = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, output_V_data_0_V1_status)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (output_V_data_0_V1_status = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    arrayNo1_fu_363_p4 <= tmp_3_fu_358_p2(31 downto 3);
    arrayNo2_fu_404_p4 <= tmp_5_fu_399_p2(31 downto 3);
    arrayNo3_fu_445_p4 <= tmp_7_fu_440_p2(31 downto 3);
    arrayNo4_fu_486_p4 <= tmp_9_fu_481_p2(31 downto 3);
    arrayNo5_fu_527_p4 <= tmp_s_fu_522_p2(31 downto 3);
    arrayNo6_fu_568_p4 <= tmp_2_fu_563_p2(31 downto 3);
    arrayNo9_fu_322_p4 <= tmp_1_fu_317_p2(31 downto 3);
    bram_0_address0 <= newIndex1_fu_236_p1(3 - 1 downto 0);

    bram_0_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            bram_0_ce0 <= ap_const_logic_1;
        else 
            bram_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bram_1_address0 <= newIndex1_fu_236_p1(3 - 1 downto 0);

    bram_1_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            bram_1_ce0 <= ap_const_logic_1;
        else 
            bram_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bram_2_address0 <= newIndex1_fu_236_p1(3 - 1 downto 0);

    bram_2_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            bram_2_ce0 <= ap_const_logic_1;
        else 
            bram_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bram_3_address0 <= newIndex1_fu_236_p1(3 - 1 downto 0);

    bram_3_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            bram_3_ce0 <= ap_const_logic_1;
        else 
            bram_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bram_4_address0 <= newIndex1_fu_236_p1(3 - 1 downto 0);

    bram_4_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            bram_4_ce0 <= ap_const_logic_1;
        else 
            bram_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bram_5_address0 <= newIndex1_fu_236_p1(3 - 1 downto 0);

    bram_5_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            bram_5_ce0 <= ap_const_logic_1;
        else 
            bram_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bram_6_address0 <= newIndex1_fu_236_p1(3 - 1 downto 0);

    bram_6_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            bram_6_ce0 <= ap_const_logic_1;
        else 
            bram_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bram_7_address0 <= newIndex1_fu_236_p1(3 - 1 downto 0);

    bram_7_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            bram_7_ce0 <= ap_const_logic_1;
        else 
            bram_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    newIndex1_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_232_p1),64));
    output_V_data_0_V1_status <= (output_V_data_7_V_full_n and output_V_data_6_V_full_n and output_V_data_5_V_full_n and output_V_data_4_V_full_n and output_V_data_3_V_full_n and output_V_data_2_V_full_n and output_V_data_1_V_full_n and output_V_data_0_V_full_n);

    output_V_data_0_V1_update_assign_proc : process(ap_CS_fsm_state3, output_V_data_0_V1_status)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (output_V_data_0_V1_status = ap_const_logic_1))) then 
            output_V_data_0_V1_update <= ap_const_logic_1;
        else 
            output_V_data_0_V1_update <= ap_const_logic_0;
        end if; 
    end process;


    output_V_data_0_V_blk_n_assign_proc : process(output_V_data_0_V_full_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_V_data_0_V_blk_n <= output_V_data_0_V_full_n;
        else 
            output_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_V_data_0_V_din <= tmp_data_0_V_reg_660;
    output_V_data_0_V_write <= output_V_data_0_V1_update;

    output_V_data_1_V_blk_n_assign_proc : process(output_V_data_1_V_full_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_V_data_1_V_blk_n <= output_V_data_1_V_full_n;
        else 
            output_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_V_data_1_V_din <= tmp_data_1_V_reg_665;
    output_V_data_1_V_write <= output_V_data_0_V1_update;

    output_V_data_2_V_blk_n_assign_proc : process(output_V_data_2_V_full_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_V_data_2_V_blk_n <= output_V_data_2_V_full_n;
        else 
            output_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_V_data_2_V_din <= tmp_data_2_V_reg_670;
    output_V_data_2_V_write <= output_V_data_0_V1_update;

    output_V_data_3_V_blk_n_assign_proc : process(output_V_data_3_V_full_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_V_data_3_V_blk_n <= output_V_data_3_V_full_n;
        else 
            output_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_V_data_3_V_din <= tmp_data_3_V_reg_675;
    output_V_data_3_V_write <= output_V_data_0_V1_update;

    output_V_data_4_V_blk_n_assign_proc : process(output_V_data_4_V_full_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_V_data_4_V_blk_n <= output_V_data_4_V_full_n;
        else 
            output_V_data_4_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_V_data_4_V_din <= tmp_data_4_V_reg_680;
    output_V_data_4_V_write <= output_V_data_0_V1_update;

    output_V_data_5_V_blk_n_assign_proc : process(output_V_data_5_V_full_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_V_data_5_V_blk_n <= output_V_data_5_V_full_n;
        else 
            output_V_data_5_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_V_data_5_V_din <= tmp_data_5_V_reg_685;
    output_V_data_5_V_write <= output_V_data_0_V1_update;

    output_V_data_6_V_blk_n_assign_proc : process(output_V_data_6_V_full_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_V_data_6_V_blk_n <= output_V_data_6_V_full_n;
        else 
            output_V_data_6_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_V_data_6_V_din <= tmp_data_6_V_reg_690;
    output_V_data_6_V_write <= output_V_data_0_V1_update;

    output_V_data_7_V_blk_n_assign_proc : process(output_V_data_7_V_full_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_V_data_7_V_blk_n <= output_V_data_7_V_full_n;
        else 
            output_V_data_7_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_V_data_7_V_din <= tmp_data_7_V_reg_695;
    output_V_data_7_V_write <= output_V_data_0_V1_update;
        p_cast10_fu_263_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(bram_3_q0),5));

    p_cast1_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_cast9_fu_279_p1),8));
    p_cast2_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bram_5_q0),8));
    p_cast3_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bram_4_q0),8));
    p_cast4_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_cast10_fu_263_p1),8));
    p_cast5_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bram_2_q0),8));
    p_cast6_fu_255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bram_1_q0),8));
    p_cast7_fu_251_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bram_0_q0),8));
        p_cast8_fu_287_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(bram_7_q0),6));

        p_cast9_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(bram_6_q0),6));

    p_cast_fu_291_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_cast8_fu_287_p1),8));
    tmp_14_fu_232_p1 <= index(3 - 1 downto 0);
    tmp_1_fu_317_p2 <= std_logic_vector(unsigned(ap_const_lv32_8) + unsigned(index));
    tmp_2_fu_563_p2 <= std_logic_vector(unsigned(ap_const_lv32_38) + unsigned(index));
    tmp_3_fu_358_p2 <= std_logic_vector(unsigned(ap_const_lv32_10) + unsigned(index));
    tmp_5_fu_399_p2 <= std_logic_vector(unsigned(ap_const_lv32_18) + unsigned(index));
    tmp_7_fu_440_p2 <= std_logic_vector(unsigned(ap_const_lv32_20) + unsigned(index));
    tmp_9_fu_481_p2 <= std_logic_vector(unsigned(ap_const_lv32_28) + unsigned(index));
    tmp_data_0_V_fu_295_p9 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(arrayNo_reg_615),32));
    tmp_data_1_V_fu_336_p9 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(arrayNo9_fu_322_p4),32));
    tmp_data_2_V_fu_377_p9 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(arrayNo1_fu_363_p4),32));
    tmp_data_3_V_fu_418_p9 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(arrayNo2_fu_404_p4),32));
    tmp_data_4_V_fu_459_p9 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(arrayNo3_fu_445_p4),32));
    tmp_data_5_V_fu_500_p9 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(arrayNo4_fu_486_p4),32));
    tmp_data_6_V_fu_541_p9 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(arrayNo5_fu_527_p4),32));
    tmp_data_7_V_fu_582_p9 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(arrayNo6_fu_568_p4),32));
    tmp_s_fu_522_p2 <= std_logic_vector(unsigned(ap_const_lv32_30) + unsigned(index));
end behav;
