// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
// Version: 2022.2.2
// Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="cyclicPrefixRemoval_cyclicPrefixRemoval,hls_ip_2022_2_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.797500,HLS_SYN_LAT=8805,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=87,HLS_SYN_LUT=180,HLS_VERSION=2022_2_2}" *)

module cyclicPrefixRemoval (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        inpstream_TDATA,
        inpstream_TVALID,
        inpstream_TREADY,
        oupstream_TDATA,
        oupstream_TVALID,
        oupstream_TREADY,
        z_din,
        z_full_n,
        z_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] inpstream_TDATA;
input   inpstream_TVALID;
output   inpstream_TREADY;
output  [63:0] oupstream_TDATA;
output   oupstream_TVALID;
input   oupstream_TREADY;
output  [0:0] z_din;
input   z_full_n;
output   z_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg z_write;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    z_blk_n;
wire    ap_CS_fsm_state4;
wire    grp_cyclicPrefixRemoval_Pipeline_VITIS_LOOP_9_1_fu_44_ap_start;
wire    grp_cyclicPrefixRemoval_Pipeline_VITIS_LOOP_9_1_fu_44_ap_done;
wire    grp_cyclicPrefixRemoval_Pipeline_VITIS_LOOP_9_1_fu_44_ap_idle;
wire    grp_cyclicPrefixRemoval_Pipeline_VITIS_LOOP_9_1_fu_44_ap_ready;
wire    grp_cyclicPrefixRemoval_Pipeline_VITIS_LOOP_9_1_fu_44_oupstream_TREADY;
wire    grp_cyclicPrefixRemoval_Pipeline_VITIS_LOOP_9_1_fu_44_inpstream_TREADY;
wire   [63:0] grp_cyclicPrefixRemoval_Pipeline_VITIS_LOOP_9_1_fu_44_oupstream_TDATA;
wire    grp_cyclicPrefixRemoval_Pipeline_VITIS_LOOP_9_1_fu_44_oupstream_TVALID;
reg    grp_cyclicPrefixRemoval_Pipeline_VITIS_LOOP_9_1_fu_44_ap_start_reg;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    regslice_both_oupstream_U_apdone_blk;
reg    ap_block_state4;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    regslice_both_inpstream_U_apdone_blk;
wire   [63:0] inpstream_TDATA_int_regslice;
wire    inpstream_TVALID_int_regslice;
reg    inpstream_TREADY_int_regslice;
wire    regslice_both_inpstream_U_ack_in;
wire    oupstream_TREADY_int_regslice;
wire    regslice_both_oupstream_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 grp_cyclicPrefixRemoval_Pipeline_VITIS_LOOP_9_1_fu_44_ap_start_reg = 1'b0;
end

cyclicPrefixRemoval_cyclicPrefixRemoval_Pipeline_VITIS_LOOP_9_1 grp_cyclicPrefixRemoval_Pipeline_VITIS_LOOP_9_1_fu_44(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_cyclicPrefixRemoval_Pipeline_VITIS_LOOP_9_1_fu_44_ap_start),
    .ap_done(grp_cyclicPrefixRemoval_Pipeline_VITIS_LOOP_9_1_fu_44_ap_done),
    .ap_idle(grp_cyclicPrefixRemoval_Pipeline_VITIS_LOOP_9_1_fu_44_ap_idle),
    .ap_ready(grp_cyclicPrefixRemoval_Pipeline_VITIS_LOOP_9_1_fu_44_ap_ready),
    .inpstream_TVALID(inpstream_TVALID_int_regslice),
    .oupstream_TREADY(grp_cyclicPrefixRemoval_Pipeline_VITIS_LOOP_9_1_fu_44_oupstream_TREADY),
    .inpstream_TDATA(inpstream_TDATA_int_regslice),
    .inpstream_TREADY(grp_cyclicPrefixRemoval_Pipeline_VITIS_LOOP_9_1_fu_44_inpstream_TREADY),
    .oupstream_TDATA(grp_cyclicPrefixRemoval_Pipeline_VITIS_LOOP_9_1_fu_44_oupstream_TDATA),
    .oupstream_TVALID(grp_cyclicPrefixRemoval_Pipeline_VITIS_LOOP_9_1_fu_44_oupstream_TVALID)
);

cyclicPrefixRemoval_regslice_both #(
    .DataWidth( 64 ))
regslice_both_inpstream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(inpstream_TDATA),
    .vld_in(inpstream_TVALID),
    .ack_in(regslice_both_inpstream_U_ack_in),
    .data_out(inpstream_TDATA_int_regslice),
    .vld_out(inpstream_TVALID_int_regslice),
    .ack_out(inpstream_TREADY_int_regslice),
    .apdone_blk(regslice_both_inpstream_U_apdone_blk)
);

cyclicPrefixRemoval_regslice_both #(
    .DataWidth( 64 ))
regslice_both_oupstream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_cyclicPrefixRemoval_Pipeline_VITIS_LOOP_9_1_fu_44_oupstream_TDATA),
    .vld_in(grp_cyclicPrefixRemoval_Pipeline_VITIS_LOOP_9_1_fu_44_oupstream_TVALID),
    .ack_in(oupstream_TREADY_int_regslice),
    .data_out(oupstream_TDATA),
    .vld_out(regslice_both_oupstream_U_vld_out),
    .ack_out(oupstream_TREADY),
    .apdone_blk(regslice_both_oupstream_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_cyclicPrefixRemoval_Pipeline_VITIS_LOOP_9_1_fu_44_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_cyclicPrefixRemoval_Pipeline_VITIS_LOOP_9_1_fu_44_ap_start_reg <= 1'b1;
        end else if ((grp_cyclicPrefixRemoval_Pipeline_VITIS_LOOP_9_1_fu_44_ap_ready == 1'b1)) begin
            grp_cyclicPrefixRemoval_Pipeline_VITIS_LOOP_9_1_fu_44_ap_start_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_cyclicPrefixRemoval_Pipeline_VITIS_LOOP_9_1_fu_44_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_oupstream_U_apdone_blk == 1'b1) | (z_full_n == 1'b0))) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((regslice_both_oupstream_U_apdone_blk == 1'b1) | (z_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((regslice_both_oupstream_U_apdone_blk == 1'b1) | (z_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        inpstream_TREADY_int_regslice = grp_cyclicPrefixRemoval_Pipeline_VITIS_LOOP_9_1_fu_44_inpstream_TREADY;
    end else begin
        inpstream_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        z_blk_n = z_full_n;
    end else begin
        z_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((regslice_both_oupstream_U_apdone_blk == 1'b1) | (z_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        z_write = 1'b1;
    end else begin
        z_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((grp_cyclicPrefixRemoval_Pipeline_VITIS_LOOP_9_1_fu_44_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((regslice_both_oupstream_U_apdone_blk == 1'b1) | (z_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state4 = ((regslice_both_oupstream_U_apdone_blk == 1'b1) | (z_full_n == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_cyclicPrefixRemoval_Pipeline_VITIS_LOOP_9_1_fu_44_ap_start = grp_cyclicPrefixRemoval_Pipeline_VITIS_LOOP_9_1_fu_44_ap_start_reg;

assign grp_cyclicPrefixRemoval_Pipeline_VITIS_LOOP_9_1_fu_44_oupstream_TREADY = (oupstream_TREADY_int_regslice & ap_CS_fsm_state3);

assign inpstream_TREADY = regslice_both_inpstream_U_ack_in;

assign oupstream_TVALID = regslice_both_oupstream_U_vld_out;

assign z_din = 1'd1;


reg find_kernel_block = 0;
// synthesis translate_off
`include "cyclicPrefixRemoval_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //cyclicPrefixRemoval

