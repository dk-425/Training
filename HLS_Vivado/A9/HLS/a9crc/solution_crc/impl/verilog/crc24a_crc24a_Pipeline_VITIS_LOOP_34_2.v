// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
// Version: 2022.2.2
// Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module crc24a_crc24a_Pipeline_VITIS_LOOP_34_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_out,
        p_out_ap_vld,
        p_out1,
        p_out1_ap_vld,
        p_out2,
        p_out2_ap_vld,
        p_out3,
        p_out3_ap_vld,
        p_out4,
        p_out4_ap_vld,
        p_out5,
        p_out5_ap_vld,
        p_out6,
        p_out6_ap_vld,
        p_out7,
        p_out7_ap_vld,
        p_out8,
        p_out8_ap_vld,
        p_out9,
        p_out9_ap_vld,
        p_out10,
        p_out10_ap_vld,
        p_out11,
        p_out11_ap_vld,
        p_out12,
        p_out12_ap_vld,
        p_out13,
        p_out13_ap_vld,
        p_out14,
        p_out14_ap_vld,
        p_out15,
        p_out15_ap_vld,
        p_out16,
        p_out16_ap_vld,
        p_out17,
        p_out17_ap_vld,
        p_out18,
        p_out18_ap_vld,
        p_out19,
        p_out19_ap_vld,
        p_out20,
        p_out20_ap_vld,
        p_out21,
        p_out21_ap_vld,
        p_out22,
        p_out22_ap_vld,
        p_out23,
        p_out23_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [0:0] p_out;
output   p_out_ap_vld;
output  [0:0] p_out1;
output   p_out1_ap_vld;
output  [0:0] p_out2;
output   p_out2_ap_vld;
output  [0:0] p_out3;
output   p_out3_ap_vld;
output  [0:0] p_out4;
output   p_out4_ap_vld;
output  [0:0] p_out5;
output   p_out5_ap_vld;
output  [0:0] p_out6;
output   p_out6_ap_vld;
output  [0:0] p_out7;
output   p_out7_ap_vld;
output  [0:0] p_out8;
output   p_out8_ap_vld;
output  [0:0] p_out9;
output   p_out9_ap_vld;
output  [0:0] p_out10;
output   p_out10_ap_vld;
output  [0:0] p_out11;
output   p_out11_ap_vld;
output  [0:0] p_out12;
output   p_out12_ap_vld;
output  [0:0] p_out13;
output   p_out13_ap_vld;
output  [0:0] p_out14;
output   p_out14_ap_vld;
output  [0:0] p_out15;
output   p_out15_ap_vld;
output  [0:0] p_out16;
output   p_out16_ap_vld;
output  [0:0] p_out17;
output   p_out17_ap_vld;
output  [0:0] p_out18;
output   p_out18_ap_vld;
output  [0:0] p_out19;
output   p_out19_ap_vld;
output  [0:0] p_out20;
output   p_out20_ap_vld;
output  [0:0] p_out21;
output   p_out21_ap_vld;
output  [0:0] p_out22;
output   p_out22_ap_vld;
output  [0:0] p_out23;
output   p_out23_ap_vld;

reg ap_idle;
reg p_out_ap_vld;
reg p_out1_ap_vld;
reg p_out2_ap_vld;
reg p_out3_ap_vld;
reg p_out4_ap_vld;
reg p_out5_ap_vld;
reg p_out6_ap_vld;
reg p_out7_ap_vld;
reg p_out8_ap_vld;
reg p_out9_ap_vld;
reg p_out10_ap_vld;
reg p_out11_ap_vld;
reg p_out12_ap_vld;
reg p_out13_ap_vld;
reg p_out14_ap_vld;
reg p_out15_ap_vld;
reg p_out16_ap_vld;
reg p_out17_ap_vld;
reg p_out18_ap_vld;
reg p_out19_ap_vld;
reg p_out20_ap_vld;
reg p_out21_ap_vld;
reg p_out22_ap_vld;
reg p_out23_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln34_fu_396_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [5:0] i_fu_120;
wire   [5:0] add_ln34_fu_526_p2;
wire    ap_loop_init;
reg   [5:0] ap_sig_allocacmp_i_3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

crc24a_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_start_int == 1'b1) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln34_fu_396_p2 == 1'd0)) begin
            i_fu_120 <= add_ln34_fu_526_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_120 <= 6'd8;
        end
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln34_fu_396_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i_3 = 6'd8;
    end else begin
        ap_sig_allocacmp_i_3 = i_fu_120;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln34_fu_396_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out10_ap_vld = 1'b1;
    end else begin
        p_out10_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln34_fu_396_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out11_ap_vld = 1'b1;
    end else begin
        p_out11_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln34_fu_396_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out12_ap_vld = 1'b1;
    end else begin
        p_out12_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln34_fu_396_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out13_ap_vld = 1'b1;
    end else begin
        p_out13_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln34_fu_396_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out14_ap_vld = 1'b1;
    end else begin
        p_out14_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln34_fu_396_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out15_ap_vld = 1'b1;
    end else begin
        p_out15_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln34_fu_396_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out16_ap_vld = 1'b1;
    end else begin
        p_out16_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln34_fu_396_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out17_ap_vld = 1'b1;
    end else begin
        p_out17_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln34_fu_396_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out18_ap_vld = 1'b1;
    end else begin
        p_out18_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln34_fu_396_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out19_ap_vld = 1'b1;
    end else begin
        p_out19_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln34_fu_396_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out1_ap_vld = 1'b1;
    end else begin
        p_out1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln34_fu_396_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out20_ap_vld = 1'b1;
    end else begin
        p_out20_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln34_fu_396_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out21_ap_vld = 1'b1;
    end else begin
        p_out21_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln34_fu_396_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out22_ap_vld = 1'b1;
    end else begin
        p_out22_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln34_fu_396_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out23_ap_vld = 1'b1;
    end else begin
        p_out23_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln34_fu_396_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out2_ap_vld = 1'b1;
    end else begin
        p_out2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln34_fu_396_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out3_ap_vld = 1'b1;
    end else begin
        p_out3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln34_fu_396_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out4_ap_vld = 1'b1;
    end else begin
        p_out4_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln34_fu_396_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out5_ap_vld = 1'b1;
    end else begin
        p_out5_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln34_fu_396_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out6_ap_vld = 1'b1;
    end else begin
        p_out6_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln34_fu_396_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out7_ap_vld = 1'b1;
    end else begin
        p_out7_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln34_fu_396_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out8_ap_vld = 1'b1;
    end else begin
        p_out8_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln34_fu_396_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out9_ap_vld = 1'b1;
    end else begin
        p_out9_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln34_fu_396_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out_ap_vld = 1'b1;
    end else begin
        p_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln34_fu_526_p2 = (ap_sig_allocacmp_i_3 + 6'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln34_fu_396_p2 = ((ap_sig_allocacmp_i_3 == 6'd32) ? 1'b1 : 1'b0);

assign p_out = 1'd0;

assign p_out1 = 1'd0;

assign p_out10 = 1'd0;

assign p_out11 = 1'd0;

assign p_out12 = 1'd0;

assign p_out13 = 1'd0;

assign p_out14 = 1'd0;

assign p_out15 = 1'd0;

assign p_out16 = 1'd0;

assign p_out17 = 1'd0;

assign p_out18 = 1'd0;

assign p_out19 = 1'd0;

assign p_out2 = 1'd0;

assign p_out20 = 1'd0;

assign p_out21 = 1'd0;

assign p_out22 = 1'd0;

assign p_out23 = 1'd0;

assign p_out3 = 1'd0;

assign p_out4 = 1'd0;

assign p_out5 = 1'd0;

assign p_out6 = 1'd0;

assign p_out7 = 1'd0;

assign p_out8 = 1'd0;

assign p_out9 = 1'd0;

endmodule //crc24a_crc24a_Pipeline_VITIS_LOOP_34_2
