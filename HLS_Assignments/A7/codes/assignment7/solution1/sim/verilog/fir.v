// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.540000,HLS_SYN_LAT=8,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=2,HLS_SYN_FF=318,HLS_SYN_LUT=291,HLS_VERSION=2018_3}" *)

module fir (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        y_V,
        c_V_address0,
        c_V_ce0,
        c_V_q0,
        x_V
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state6 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [47:0] y_V;
output  [1:0] c_V_address0;
output   c_V_ce0;
input  [23:0] c_V_q0;
input  [23:0] x_V;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg c_V_ce0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [23:0] shift_reg_V_0;
reg   [23:0] shift_reg_V_2;
reg   [23:0] shift_reg_V_1;
reg   [47:0] p_Val2_s_reg_90;
reg   [2:0] i_reg_103;
wire   [0:0] tmp_1_fu_123_p3;
reg   [0:0] tmp_1_reg_231;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] tmp_1_reg_231_pp0_iter1_reg;
reg   [0:0] tmp_1_reg_231_pp0_iter2_reg;
wire   [0:0] tmp_2_fu_131_p2;
reg   [0:0] tmp_2_reg_235;
wire   [1:0] tmp_3_fu_137_p1;
reg   [1:0] tmp_3_reg_239;
wire   [2:0] i_1_fu_151_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [23:0] current_data_V_fu_187_p3;
reg   [23:0] c_V_load_reg_260;
wire   [47:0] r_V_2_fu_214_p2;
reg   [47:0] r_V_2_reg_265;
wire   [47:0] acc_V_fu_220_p2;
reg    ap_enable_reg_pp0_iter3;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
wire   [23:0] ap_phi_reg_pp0_iter0_p_s_reg_114;
reg   [23:0] ap_phi_reg_pp0_iter1_p_s_reg_114;
reg   [23:0] ap_phi_reg_pp0_iter2_p_s_reg_114;
wire   [63:0] tmp_6_fu_146_p1;
wire    ap_block_pp0_stage0;
wire    ap_CS_fsm_state6;
wire   [0:0] sel_tmp_fu_169_p2;
wire   [0:0] sel_tmp2_fu_182_p2;
wire   [23:0] sel_tmp1_fu_174_p3;
wire  signed [23:0] r_V_2_fu_214_p0;
wire  signed [23:0] r_V_2_fu_214_p1;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_131;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 shift_reg_V_0 = 24'd0;
#0 shift_reg_V_2 = 24'd0;
#0 shift_reg_V_1 = 24'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_131)) begin
        if (((tmp_2_reg_235 == 1'd0) & (tmp_1_reg_231 == 1'd0))) begin
            ap_phi_reg_pp0_iter2_p_s_reg_114 <= current_data_V_fu_187_p3;
        end else if (((tmp_2_reg_235 == 1'd1) & (tmp_1_reg_231 == 1'd0))) begin
            ap_phi_reg_pp0_iter2_p_s_reg_114 <= x_V;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter2_p_s_reg_114 <= ap_phi_reg_pp0_iter1_p_s_reg_114;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_1_fu_123_p3 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_103 <= i_1_fu_151_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_103 <= 3'd3;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_reg_231_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        p_Val2_s_reg_90 <= acc_V_fu_220_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_Val2_s_reg_90 <= 48'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_s_reg_114 <= ap_phi_reg_pp0_iter0_p_s_reg_114;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_1_reg_231 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_V_load_reg_260 <= c_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_reg_231_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        r_V_2_reg_265 <= r_V_2_fu_214_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_fu_131_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_1_fu_123_p3 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        shift_reg_V_0 <= x_V;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_3_reg_239 == 2'd1) & (tmp_2_reg_235 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        shift_reg_V_1 <= current_data_V_fu_187_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_3_reg_239 == 2'd2) & (tmp_2_reg_235 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        shift_reg_V_2 <= current_data_V_fu_187_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_1_reg_231 <= i_reg_103[32'd2];
        tmp_1_reg_231_pp0_iter1_reg <= tmp_1_reg_231;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        tmp_1_reg_231_pp0_iter2_reg <= tmp_1_reg_231_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_1_fu_123_p3 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_2_reg_235 <= tmp_2_fu_131_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_fu_131_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_1_fu_123_p3 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_3_reg_239 <= tmp_3_fu_137_p1;
    end
end

always @ (*) begin
    if ((tmp_1_fu_123_p3 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_V_ce0 = 1'b1;
    end else begin
        c_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((tmp_1_fu_123_p3 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((tmp_1_fu_123_p3 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_V_fu_220_p2 = (p_Val2_s_reg_90 + r_V_2_reg_265);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_131 = ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_p_s_reg_114 = 'bx;

assign c_V_address0 = tmp_6_fu_146_p1;

assign current_data_V_fu_187_p3 = ((sel_tmp2_fu_182_p2[0:0] === 1'b1) ? shift_reg_V_1 : sel_tmp1_fu_174_p3);

assign i_1_fu_151_p2 = ($signed(i_reg_103) + $signed(3'd7));

assign r_V_2_fu_214_p0 = c_V_load_reg_260;

assign r_V_2_fu_214_p1 = ap_phi_reg_pp0_iter2_p_s_reg_114;

assign r_V_2_fu_214_p2 = ($signed(r_V_2_fu_214_p0) * $signed(r_V_2_fu_214_p1));

assign sel_tmp1_fu_174_p3 = ((sel_tmp_fu_169_p2[0:0] === 1'b1) ? shift_reg_V_0 : shift_reg_V_2);

assign sel_tmp2_fu_182_p2 = ((tmp_3_reg_239 == 2'd2) ? 1'b1 : 1'b0);

assign sel_tmp_fu_169_p2 = ((tmp_3_reg_239 == 2'd1) ? 1'b1 : 1'b0);

assign tmp_1_fu_123_p3 = i_reg_103[32'd2];

assign tmp_2_fu_131_p2 = ((i_reg_103 == 3'd0) ? 1'b1 : 1'b0);

assign tmp_3_fu_137_p1 = i_reg_103[1:0];

assign tmp_6_fu_146_p1 = i_reg_103;

assign y_V = p_Val2_s_reg_90;

endmodule //fir
