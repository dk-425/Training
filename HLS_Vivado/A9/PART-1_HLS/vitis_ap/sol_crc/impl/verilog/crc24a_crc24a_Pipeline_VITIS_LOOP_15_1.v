// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
// Version: 2022.2.2
// Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module crc24a_crc24a_Pipeline_VITIS_LOOP_15_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        d_V,
        crc_V_7_out,
        crc_V_7_out_ap_vld,
        crc_V_6_out,
        crc_V_6_out_ap_vld,
        crc_V_5_out,
        crc_V_5_out_ap_vld,
        crc_V_4_out,
        crc_V_4_out_ap_vld,
        crc_V_3_out,
        crc_V_3_out_ap_vld,
        crc_V_2_out,
        crc_V_2_out_ap_vld,
        crc_V_1_out,
        crc_V_1_out_ap_vld,
        crc_V_out,
        crc_V_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] d_V;
output  [0:0] crc_V_7_out;
output   crc_V_7_out_ap_vld;
output  [0:0] crc_V_6_out;
output   crc_V_6_out_ap_vld;
output  [0:0] crc_V_5_out;
output   crc_V_5_out_ap_vld;
output  [0:0] crc_V_4_out;
output   crc_V_4_out_ap_vld;
output  [0:0] crc_V_3_out;
output   crc_V_3_out_ap_vld;
output  [0:0] crc_V_2_out;
output   crc_V_2_out_ap_vld;
output  [0:0] crc_V_1_out;
output   crc_V_1_out_ap_vld;
output  [0:0] crc_V_out;
output   crc_V_out_ap_vld;

reg ap_idle;
reg crc_V_7_out_ap_vld;
reg crc_V_6_out_ap_vld;
reg crc_V_5_out_ap_vld;
reg crc_V_4_out_ap_vld;
reg crc_V_3_out_ap_vld;
reg crc_V_2_out_ap_vld;
reg crc_V_1_out_ap_vld;
reg crc_V_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln15_fu_166_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [3:0] j_fu_60;
wire   [3:0] j_2_fu_172_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_j_1;
reg   [0:0] crc_V_fu_64;
wire   [0:0] crc_V_84_fu_186_p3;
wire   [2:0] trunc_ln779_fu_178_p1;
reg   [0:0] crc_V_1_fu_68;
reg   [0:0] crc_V_2_fu_72;
reg   [0:0] crc_V_3_fu_76;
reg   [0:0] crc_V_4_fu_80;
reg   [0:0] crc_V_5_fu_84;
reg   [0:0] crc_V_6_fu_88;
reg   [0:0] crc_V_7_fu_92;
wire   [7:0] zext_ln779_fu_182_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

crc24a_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        if ((icmp_ln15_fu_166_p2 == 1'd0)) begin
            j_fu_60 <= j_2_fu_172_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_60 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln779_fu_178_p1 == 3'd1) & (icmp_ln15_fu_166_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        crc_V_1_fu_68 <= crc_V_84_fu_186_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln779_fu_178_p1 == 3'd2) & (icmp_ln15_fu_166_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        crc_V_2_fu_72 <= crc_V_84_fu_186_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln779_fu_178_p1 == 3'd3) & (icmp_ln15_fu_166_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        crc_V_3_fu_76 <= crc_V_84_fu_186_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln779_fu_178_p1 == 3'd4) & (icmp_ln15_fu_166_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        crc_V_4_fu_80 <= crc_V_84_fu_186_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln779_fu_178_p1 == 3'd5) & (icmp_ln15_fu_166_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        crc_V_5_fu_84 <= crc_V_84_fu_186_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln779_fu_178_p1 == 3'd6) & (icmp_ln15_fu_166_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        crc_V_6_fu_88 <= crc_V_84_fu_186_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln779_fu_178_p1 == 3'd7) & (icmp_ln15_fu_166_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        crc_V_7_fu_92 <= crc_V_84_fu_186_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln779_fu_178_p1 == 3'd0) & (icmp_ln15_fu_166_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        crc_V_fu_64 <= crc_V_84_fu_186_p3;
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln15_fu_166_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_j_1 = 4'd0;
    end else begin
        ap_sig_allocacmp_j_1 = j_fu_60;
    end
end

always @ (*) begin
    if (((icmp_ln15_fu_166_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        crc_V_1_out_ap_vld = 1'b1;
    end else begin
        crc_V_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln15_fu_166_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        crc_V_2_out_ap_vld = 1'b1;
    end else begin
        crc_V_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln15_fu_166_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        crc_V_3_out_ap_vld = 1'b1;
    end else begin
        crc_V_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln15_fu_166_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        crc_V_4_out_ap_vld = 1'b1;
    end else begin
        crc_V_4_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln15_fu_166_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        crc_V_5_out_ap_vld = 1'b1;
    end else begin
        crc_V_5_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln15_fu_166_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        crc_V_6_out_ap_vld = 1'b1;
    end else begin
        crc_V_6_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln15_fu_166_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        crc_V_7_out_ap_vld = 1'b1;
    end else begin
        crc_V_7_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln15_fu_166_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        crc_V_out_ap_vld = 1'b1;
    end else begin
        crc_V_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign crc_V_1_out = crc_V_1_fu_68;

assign crc_V_2_out = crc_V_2_fu_72;

assign crc_V_3_out = crc_V_3_fu_76;

assign crc_V_4_out = crc_V_4_fu_80;

assign crc_V_5_out = crc_V_5_fu_84;

assign crc_V_6_out = crc_V_6_fu_88;

assign crc_V_7_out = crc_V_7_fu_92;

assign crc_V_84_fu_186_p3 = d_V[zext_ln779_fu_182_p1];

assign crc_V_out = crc_V_fu_64;

assign icmp_ln15_fu_166_p2 = ((ap_sig_allocacmp_j_1 == 4'd8) ? 1'b1 : 1'b0);

assign j_2_fu_172_p2 = (ap_sig_allocacmp_j_1 + 4'd1);

assign trunc_ln779_fu_178_p1 = ap_sig_allocacmp_j_1[2:0];

assign zext_ln779_fu_182_p1 = trunc_ln779_fu_178_p1;

endmodule //crc24a_crc24a_Pipeline_VITIS_LOOP_15_1
