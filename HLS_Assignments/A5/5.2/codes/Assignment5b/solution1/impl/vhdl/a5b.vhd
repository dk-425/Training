-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity a5b is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_V_data_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    in_V_data_0_V_empty_n : IN STD_LOGIC;
    in_V_data_0_V_read : OUT STD_LOGIC;
    in_V_data_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    in_V_data_1_V_empty_n : IN STD_LOGIC;
    in_V_data_1_V_read : OUT STD_LOGIC;
    in_V_data_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    in_V_data_2_V_empty_n : IN STD_LOGIC;
    in_V_data_2_V_read : OUT STD_LOGIC;
    in_V_data_3_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    in_V_data_3_V_empty_n : IN STD_LOGIC;
    in_V_data_3_V_read : OUT STD_LOGIC;
    out_V_data_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_V_data_0_V_full_n : IN STD_LOGIC;
    out_V_data_0_V_write : OUT STD_LOGIC;
    out_V_data_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_V_data_1_V_full_n : IN STD_LOGIC;
    out_V_data_1_V_write : OUT STD_LOGIC;
    out_V_data_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_V_data_2_V_full_n : IN STD_LOGIC;
    out_V_data_2_V_write : OUT STD_LOGIC;
    out_V_data_3_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_V_data_3_V_full_n : IN STD_LOGIC;
    out_V_data_3_V_write : OUT STD_LOGIC );
end;


architecture behav of a5b is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "a5b,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.396600,HLS_SYN_LAT=9,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=0,HLS_SYN_FF=89,HLS_SYN_LUT=1249,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv6_1F : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal in_V_data_0_V_blk_n : STD_LOGIC;
    signal in_V_data_1_V_blk_n : STD_LOGIC;
    signal in_V_data_2_V_blk_n : STD_LOGIC;
    signal in_V_data_3_V_blk_n : STD_LOGIC;
    signal out_V_data_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond_fu_216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_V_data_1_V_blk_n : STD_LOGIC;
    signal out_V_data_2_V_blk_n : STD_LOGIC;
    signal out_V_data_3_V_blk_n : STD_LOGIC;
    signal tmp_data_0_V_reg_561 : STD_LOGIC_VECTOR (7 downto 0);
    signal in_V_data_0_V0_status : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal tmp_data_1_V_reg_566 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_data_2_V_reg_571 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_data_3_V_reg_576 : STD_LOGIC_VECTOR (7 downto 0);
    signal c_V_fu_222_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_V_reg_589 : STD_LOGIC_VECTOR (2 downto 0);
    signal out_V_data_0_V1_status : STD_LOGIC;
    signal ap_block_state2 : BOOLEAN;
    signal tmp_1_fu_228_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_reg_594 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_232_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_reg_599 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_242_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_7_reg_605 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_fu_251_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_reg_612 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_reg_619 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_627 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_data_3_V_2_be_fu_533_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_data_2_V_2_be_fu_540_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_data_1_V_2_be_fu_547_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_data_0_V_2_be_fu_554_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal bram_V_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal bram_V_ce0 : STD_LOGIC;
    signal bram_V_we0 : STD_LOGIC_VECTOR (3 downto 0);
    signal bram_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bram_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_3_V_1_reg_133 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_data_2_V_1_reg_146 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_data_1_V_1_reg_159 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_data_0_V_1_reg_172 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_s_reg_185 : STD_LOGIC_VECTOR (2 downto 0);
    signal in_V_data_0_V0_update : STD_LOGIC;
    signal out_V_data_0_V1_update : STD_LOGIC;
    signal mask_fu_492_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_196_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_196_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_6_fu_264_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_fu_267_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_11_fu_273_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_12_fu_279_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_14_fu_295_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_13_fu_287_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_15_fu_303_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_10_fu_270_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_309_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_321_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_327_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_313_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_317_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_fu_345_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_fu_351_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_demorgan_fu_357_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_fu_363_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_337_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_fu_369_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_fu_375_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_fu_387_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_30_fu_390_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_32_fu_396_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_33_fu_402_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_35_fu_416_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_34_fu_409_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_36_fu_423_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_31_fu_393_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_37_fu_429_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_40_fu_441_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_41_fu_447_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_fu_433_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_39_fu_437_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_43_fu_464_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_44_fu_470_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_42_fu_457_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_demorgan1_fu_476_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_46_fu_489_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_27_fu_381_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_523_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_513_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_503_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_47_fu_499_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);

    component a5b_mux_42_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component a5b_bram_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (0 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC_VECTOR (3 downto 0);
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    bram_V_U : component a5b_bram_V
    generic map (
        DataWidth => 32,
        AddressRange => 2,
        AddressWidth => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bram_V_address0,
        ce0 => bram_V_ce0,
        we0 => bram_V_we0,
        d0 => bram_V_d0,
        q0 => bram_V_q0);

    a5b_mux_42_8_1_1_U1 : component a5b_mux_42_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => tmp_data_0_V_reg_561,
        din1 => tmp_data_1_V_reg_566,
        din2 => tmp_data_2_V_reg_571,
        din3 => tmp_data_3_V_reg_576,
        din4 => tmp_1_fu_228_p1,
        dout => tmp_fu_232_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    p_s_reg_185_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                p_s_reg_185 <= c_V_reg_589;
            elsif ((not(((ap_start = ap_const_logic_0) or (in_V_data_0_V0_status = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_s_reg_185 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    tmp_data_0_V_1_reg_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                tmp_data_0_V_1_reg_172 <= tmp_data_0_V_2_be_fu_554_p3;
            elsif ((not(((ap_start = ap_const_logic_0) or (in_V_data_0_V0_status = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                tmp_data_0_V_1_reg_172 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    tmp_data_1_V_1_reg_159_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                tmp_data_1_V_1_reg_159 <= tmp_data_1_V_2_be_fu_547_p3;
            elsif ((not(((ap_start = ap_const_logic_0) or (in_V_data_0_V0_status = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                tmp_data_1_V_1_reg_159 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    tmp_data_2_V_1_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                tmp_data_2_V_1_reg_146 <= tmp_data_2_V_2_be_fu_540_p3;
            elsif ((not(((ap_start = ap_const_logic_0) or (in_V_data_0_V0_status = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                tmp_data_2_V_1_reg_146 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    tmp_data_3_V_1_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                tmp_data_3_V_1_reg_133 <= tmp_data_3_V_2_be_fu_533_p3;
            elsif ((not(((ap_start = ap_const_logic_0) or (in_V_data_0_V0_status = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                tmp_data_3_V_1_reg_133 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((exitcond_fu_216_p2 = ap_const_lv1_1) and (out_V_data_0_V1_status = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                c_V_reg_589 <= c_V_fu_222_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((exitcond_fu_216_p2 = ap_const_lv1_1) and (out_V_data_0_V1_status = ap_const_logic_0))) and (exitcond_fu_216_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_1_reg_594 <= tmp_1_fu_228_p1;
                tmp_28_reg_619 <= grp_fu_196_p2;
                    tmp_7_reg_605(4 downto 3) <= tmp_7_fu_242_p3(4 downto 3);
                    tmp_8_reg_612(4 downto 3) <= tmp_8_fu_251_p2(4 downto 3);
                tmp_reg_599 <= tmp_fu_232_p6;
                tmp_s_reg_627 <= tmp_s_fu_258_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (in_V_data_0_V0_status = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                tmp_data_0_V_reg_561 <= in_V_data_0_V_dout;
                tmp_data_1_V_reg_566 <= in_V_data_1_V_dout;
                tmp_data_2_V_reg_571 <= in_V_data_2_V_dout;
                tmp_data_3_V_reg_576 <= in_V_data_3_V_dout;
            end if;
        end if;
    end process;
    tmp_7_reg_605(2 downto 0) <= "000";
    tmp_8_reg_612(2 downto 0) <= "111";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond_fu_216_p2, in_V_data_0_V0_status, out_V_data_0_V1_status)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (in_V_data_0_V0_status = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((exitcond_fu_216_p2 = ap_const_lv1_1) and (out_V_data_0_V1_status = ap_const_logic_0))) and (exitcond_fu_216_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((exitcond_fu_216_p2 = ap_const_lv1_1) and (out_V_data_0_V1_status = ap_const_logic_0))) and (exitcond_fu_216_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_block_state1_assign_proc : process(ap_start, in_V_data_0_V0_status)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (in_V_data_0_V0_status = ap_const_logic_0));
    end process;


    ap_block_state2_assign_proc : process(exitcond_fu_216_p2, out_V_data_0_V1_status)
    begin
                ap_block_state2 <= ((exitcond_fu_216_p2 = ap_const_lv1_1) and (out_V_data_0_V1_status = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2, exitcond_fu_216_p2, out_V_data_0_V1_status)
    begin
        if ((not(((exitcond_fu_216_p2 = ap_const_lv1_1) and (out_V_data_0_V1_status = ap_const_logic_0))) and (exitcond_fu_216_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond_fu_216_p2, out_V_data_0_V1_status)
    begin
        if ((not(((exitcond_fu_216_p2 = ap_const_lv1_1) and (out_V_data_0_V1_status = ap_const_logic_0))) and (exitcond_fu_216_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bram_V_address0 <= ap_const_lv64_0(1 - 1 downto 0);

    bram_V_ce0_assign_proc : process(ap_CS_fsm_state2, exitcond_fu_216_p2, out_V_data_0_V1_status, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (not(((exitcond_fu_216_p2 = ap_const_lv1_1) and (out_V_data_0_V1_status = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            bram_V_ce0 <= ap_const_logic_1;
        else 
            bram_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bram_V_d0 <= (tmp_42_fu_457_p3 and p_demorgan1_fu_476_p2);

    bram_V_we0_assign_proc : process(ap_CS_fsm_state3, mask_fu_492_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            bram_V_we0 <= mask_fu_492_p2;
        else 
            bram_V_we0 <= ap_const_lv4_0;
        end if; 
    end process;

    c_V_fu_222_p2 <= std_logic_vector(unsigned(p_s_reg_185) + unsigned(ap_const_lv3_1));
    exitcond_fu_216_p2 <= "1" when (p_s_reg_185 = ap_const_lv3_4) else "0";

    grp_fu_196_p0_assign_proc : process(ap_CS_fsm_state2, tmp_7_fu_242_p3, tmp_7_reg_605, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_196_p0 <= tmp_7_reg_605;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_196_p0 <= tmp_7_fu_242_p3;
        else 
            grp_fu_196_p0 <= "XXXXX";
        end if; 
    end process;


    grp_fu_196_p1_assign_proc : process(ap_CS_fsm_state2, tmp_8_fu_251_p2, tmp_8_reg_612, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_196_p1 <= tmp_8_reg_612;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_196_p1 <= tmp_8_fu_251_p2;
        else 
            grp_fu_196_p1 <= "XXXXX";
        end if; 
    end process;

    grp_fu_196_p2 <= "1" when (unsigned(grp_fu_196_p0) > unsigned(grp_fu_196_p1)) else "0";
    in_V_data_0_V0_status <= (in_V_data_3_V_empty_n and in_V_data_2_V_empty_n and in_V_data_1_V_empty_n and in_V_data_0_V_empty_n);

    in_V_data_0_V0_update_assign_proc : process(ap_start, ap_CS_fsm_state1, in_V_data_0_V0_status)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (in_V_data_0_V0_status = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            in_V_data_0_V0_update <= ap_const_logic_1;
        else 
            in_V_data_0_V0_update <= ap_const_logic_0;
        end if; 
    end process;


    in_V_data_0_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, in_V_data_0_V_empty_n)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            in_V_data_0_V_blk_n <= in_V_data_0_V_empty_n;
        else 
            in_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_V_data_0_V_read <= in_V_data_0_V0_update;

    in_V_data_1_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, in_V_data_1_V_empty_n)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            in_V_data_1_V_blk_n <= in_V_data_1_V_empty_n;
        else 
            in_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_V_data_1_V_read <= in_V_data_0_V0_update;

    in_V_data_2_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, in_V_data_2_V_empty_n)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            in_V_data_2_V_blk_n <= in_V_data_2_V_empty_n;
        else 
            in_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_V_data_2_V_read <= in_V_data_0_V0_update;

    in_V_data_3_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, in_V_data_3_V_empty_n)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            in_V_data_3_V_blk_n <= in_V_data_3_V_empty_n;
        else 
            in_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_V_data_3_V_read <= in_V_data_0_V0_update;
    mask_fu_492_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv4_1),to_integer(unsigned('0' & tmp_46_fu_489_p1(4-1 downto 0)))));
    out_V_data_0_V1_status <= (out_V_data_3_V_full_n and out_V_data_2_V_full_n and out_V_data_1_V_full_n and out_V_data_0_V_full_n);

    out_V_data_0_V1_update_assign_proc : process(ap_CS_fsm_state2, exitcond_fu_216_p2, out_V_data_0_V1_status)
    begin
        if ((not(((exitcond_fu_216_p2 = ap_const_lv1_1) and (out_V_data_0_V1_status = ap_const_logic_0))) and (exitcond_fu_216_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            out_V_data_0_V1_update <= ap_const_logic_1;
        else 
            out_V_data_0_V1_update <= ap_const_logic_0;
        end if; 
    end process;


    out_V_data_0_V_blk_n_assign_proc : process(out_V_data_0_V_full_n, ap_CS_fsm_state2, exitcond_fu_216_p2)
    begin
        if (((exitcond_fu_216_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            out_V_data_0_V_blk_n <= out_V_data_0_V_full_n;
        else 
            out_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_V_data_0_V_din <= tmp_data_0_V_1_reg_172;
    out_V_data_0_V_write <= out_V_data_0_V1_update;

    out_V_data_1_V_blk_n_assign_proc : process(out_V_data_1_V_full_n, ap_CS_fsm_state2, exitcond_fu_216_p2)
    begin
        if (((exitcond_fu_216_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            out_V_data_1_V_blk_n <= out_V_data_1_V_full_n;
        else 
            out_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_V_data_1_V_din <= tmp_data_1_V_1_reg_159;
    out_V_data_1_V_write <= out_V_data_0_V1_update;

    out_V_data_2_V_blk_n_assign_proc : process(out_V_data_2_V_full_n, ap_CS_fsm_state2, exitcond_fu_216_p2)
    begin
        if (((exitcond_fu_216_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            out_V_data_2_V_blk_n <= out_V_data_2_V_full_n;
        else 
            out_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_V_data_2_V_din <= tmp_data_2_V_1_reg_146;
    out_V_data_2_V_write <= out_V_data_0_V1_update;

    out_V_data_3_V_blk_n_assign_proc : process(out_V_data_3_V_full_n, ap_CS_fsm_state2, exitcond_fu_216_p2)
    begin
        if (((exitcond_fu_216_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            out_V_data_3_V_blk_n <= out_V_data_3_V_full_n;
        else 
            out_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_V_data_3_V_din <= tmp_data_3_V_1_reg_133;
    out_V_data_3_V_write <= out_V_data_0_V1_update;
    p_demorgan1_fu_476_p2 <= (tmp_44_fu_470_p2 and tmp_43_fu_464_p2);
    p_demorgan_fu_357_p2 <= (tmp_23_fu_351_p2 and tmp_22_fu_345_p2);
    tmp_10_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_599),32));
    tmp_11_fu_273_p2 <= (tmp_6_fu_264_p1 xor ap_const_lv6_1F);
    tmp_12_fu_279_p3 <= 
        tmp_6_fu_264_p1 when (grp_fu_196_p2(0) = '1') else 
        tmp_9_fu_267_p1;
    tmp_13_fu_287_p3 <= 
        tmp_9_fu_267_p1 when (grp_fu_196_p2(0) = '1') else 
        tmp_6_fu_264_p1;
    tmp_14_fu_295_p3 <= 
        tmp_11_fu_273_p2 when (grp_fu_196_p2(0) = '1') else 
        tmp_6_fu_264_p1;
    tmp_15_fu_303_p2 <= (tmp_12_fu_279_p3 xor ap_const_lv6_1F);
    tmp_16_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_295_p3),32));
    tmp_17_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_287_p3),32));
    tmp_18_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_303_p2),32));
    tmp_19_fu_321_p2 <= std_logic_vector(shift_left(unsigned(tmp_10_fu_270_p1),to_integer(unsigned('0' & tmp_16_fu_309_p1(31-1 downto 0)))));
    tmp_1_fu_228_p1 <= p_s_reg_185(2 - 1 downto 0);
    
    tmp_20_fu_327_p4_proc : process(tmp_19_fu_321_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_20_fu_327_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := tmp_19_fu_321_p2;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for tmp_20_fu_327_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_20_fu_327_p4_i) := tmp_19_fu_321_p2(32-1-tmp_20_fu_327_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_20_fu_327_p4 <= resvalue(32-1 downto 0);
    end process;

    tmp_21_fu_337_p3 <= 
        tmp_20_fu_327_p4 when (grp_fu_196_p2(0) = '1') else 
        tmp_19_fu_321_p2;
    tmp_22_fu_345_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & tmp_17_fu_313_p1(31-1 downto 0)))));
    tmp_23_fu_351_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & tmp_18_fu_317_p1(31-1 downto 0)))));
    tmp_24_fu_363_p2 <= (p_demorgan_fu_357_p2 xor ap_const_lv32_FFFFFFFF);
    tmp_25_fu_369_p2 <= (tmp_24_fu_363_p2 and bram_V_q0);
    tmp_26_fu_375_p2 <= (tmp_21_fu_337_p3 and p_demorgan_fu_357_p2);
    tmp_27_fu_381_p2 <= (tmp_26_fu_375_p2 or tmp_25_fu_369_p2);
    tmp_29_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_reg_605),6));
    tmp_2_fu_503_p4 <= tmp_27_fu_381_p2(15 downto 8);
    tmp_30_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_reg_612),6));
    tmp_31_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_599),32));
    tmp_32_fu_396_p2 <= (tmp_29_fu_387_p1 xor ap_const_lv6_1F);
    tmp_33_fu_402_p3 <= 
        tmp_29_fu_387_p1 when (tmp_28_reg_619(0) = '1') else 
        tmp_30_fu_390_p1;
    tmp_34_fu_409_p3 <= 
        tmp_30_fu_390_p1 when (tmp_28_reg_619(0) = '1') else 
        tmp_29_fu_387_p1;
    tmp_35_fu_416_p3 <= 
        tmp_32_fu_396_p2 when (tmp_28_reg_619(0) = '1') else 
        tmp_29_fu_387_p1;
    tmp_36_fu_423_p2 <= (tmp_33_fu_402_p3 xor ap_const_lv6_1F);
    tmp_37_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_35_fu_416_p3),32));
    tmp_38_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_34_fu_409_p3),32));
    tmp_39_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_36_fu_423_p2),32));
    tmp_3_fu_513_p4 <= tmp_27_fu_381_p2(23 downto 16);
    tmp_40_fu_441_p2 <= std_logic_vector(shift_left(unsigned(tmp_31_fu_393_p1),to_integer(unsigned('0' & tmp_37_fu_429_p1(31-1 downto 0)))));
    
    tmp_41_fu_447_p4_proc : process(tmp_40_fu_441_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_41_fu_447_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := tmp_40_fu_441_p2;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for tmp_41_fu_447_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_41_fu_447_p4_i) := tmp_40_fu_441_p2(32-1-tmp_41_fu_447_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_41_fu_447_p4 <= resvalue(32-1 downto 0);
    end process;

    tmp_42_fu_457_p3 <= 
        tmp_41_fu_447_p4 when (tmp_28_reg_619(0) = '1') else 
        tmp_40_fu_441_p2;
    tmp_43_fu_464_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & tmp_38_fu_433_p1(31-1 downto 0)))));
    tmp_44_fu_470_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & tmp_39_fu_437_p1(31-1 downto 0)))));
    tmp_46_fu_489_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_reg_594),4));
    tmp_47_fu_499_p1 <= tmp_27_fu_381_p2(8 - 1 downto 0);
    tmp_4_fu_523_p4 <= tmp_27_fu_381_p2(31 downto 24);
    tmp_6_fu_264_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_reg_605),6));
    tmp_7_fu_242_p3 <= (tmp_1_fu_228_p1 & ap_const_lv3_0);
    tmp_8_fu_251_p2 <= (tmp_7_fu_242_p3 or ap_const_lv5_7);
    tmp_9_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_reg_612),6));
    tmp_data_0_V_2_be_fu_554_p3 <= 
        tmp_47_fu_499_p1 when (tmp_s_reg_627(0) = '1') else 
        tmp_data_0_V_1_reg_172;
    tmp_data_1_V_2_be_fu_547_p3 <= 
        tmp_2_fu_503_p4 when (tmp_s_reg_627(0) = '1') else 
        tmp_data_1_V_1_reg_159;
    tmp_data_2_V_2_be_fu_540_p3 <= 
        tmp_3_fu_513_p4 when (tmp_s_reg_627(0) = '1') else 
        tmp_data_2_V_1_reg_146;
    tmp_data_3_V_2_be_fu_533_p3 <= 
        tmp_4_fu_523_p4 when (tmp_s_reg_627(0) = '1') else 
        tmp_data_3_V_1_reg_133;
    tmp_s_fu_258_p2 <= "1" when (c_V_fu_222_p2 = ap_const_lv3_4) else "0";
end behav;
