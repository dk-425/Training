// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "a6.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic a6::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic a6::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> a6::ap_ST_fsm_state1 = "1";
const sc_lv<2> a6::ap_ST_fsm_state2 = "10";
const sc_lv<32> a6::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> a6::ap_const_lv32_1 = "1";
const sc_lv<1> a6::ap_const_lv1_0 = "0";
const sc_lv<17> a6::ap_const_lv17_1 = "1";
const sc_lv<16> a6::ap_const_lv16_1 = "1";
const sc_lv<32> a6::ap_const_lv32_F = "1111";
const sc_lv<1> a6::ap_const_lv1_1 = "1";
const bool a6::ap_const_boolean_1 = true;

a6::a6(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_97_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_97_p2 );

    SC_METHOD(thread_exitcond_fu_97_p2);
    sensitive << ( tmp_1_reg_146 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_op_assign_reg_76 );

    SC_METHOD(thread_i_fu_130_p2);
    sensitive << ( i_op_assign_reg_76 );

    SC_METHOD(thread_out_V);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_97_p2 );
    sensitive << ( storemerge_fu_122_p0 );
    sensitive << ( tmp_5_fu_118_p1 );
    sensitive << ( tmp_fu_102_p2 );

    SC_METHOD(thread_out_V_ap_vld);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_97_p2 );

    SC_METHOD(thread_storemerge_fu_122_p0);
    sensitive << ( s );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_storemerge_fu_122_p3);
    sensitive << ( storemerge_fu_122_p0 );
    sensitive << ( tmp_5_fu_118_p1 );
    sensitive << ( tmp_fu_102_p2 );

    SC_METHOD(thread_tmp_1_fu_91_p2);
    sensitive << ( tmp_cast_fu_87_p1 );

    SC_METHOD(thread_tmp_2_fu_108_p4);
    sensitive << ( a_V_buf_reg_67 );

    SC_METHOD(thread_tmp_5_fu_118_p1);
    sensitive << ( tmp_2_fu_108_p4 );

    SC_METHOD(thread_tmp_cast_fu_87_p1);
    sensitive << ( b_V );

    SC_METHOD(thread_tmp_fu_102_p2);
    sensitive << ( a_V_buf_reg_67 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_97_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "01";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "a6_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, a_V, "(port)a_V");
    sc_trace(mVcdFile, b_V, "(port)b_V");
    sc_trace(mVcdFile, s, "(port)s");
    sc_trace(mVcdFile, out_V, "(port)out_V");
    sc_trace(mVcdFile, out_V_ap_vld, "(port)out_V_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, tmp_1_fu_91_p2, "tmp_1_fu_91_p2");
    sc_trace(mVcdFile, tmp_1_reg_146, "tmp_1_reg_146");
    sc_trace(mVcdFile, storemerge_fu_122_p3, "storemerge_fu_122_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, exitcond_fu_97_p2, "exitcond_fu_97_p2");
    sc_trace(mVcdFile, i_fu_130_p2, "i_fu_130_p2");
    sc_trace(mVcdFile, a_V_buf_reg_67, "a_V_buf_reg_67");
    sc_trace(mVcdFile, i_op_assign_reg_76, "i_op_assign_reg_76");
    sc_trace(mVcdFile, tmp_cast_fu_87_p1, "tmp_cast_fu_87_p1");
    sc_trace(mVcdFile, tmp_2_fu_108_p4, "tmp_2_fu_108_p4");
    sc_trace(mVcdFile, storemerge_fu_122_p0, "storemerge_fu_122_p0");
    sc_trace(mVcdFile, tmp_5_fu_118_p1, "tmp_5_fu_118_p1");
    sc_trace(mVcdFile, tmp_fu_102_p2, "tmp_fu_102_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("a6.hdltvin.dat");
    mHdltvoutHandle.open("a6.hdltvout.dat");
}

a6::~a6() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void a6::thread_ap_clk_no_reset_() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_97_p2.read(), ap_const_lv1_0))) {
        a_V_buf_reg_67 = storemerge_fu_122_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        a_V_buf_reg_67 = a_V.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_97_p2.read(), ap_const_lv1_0))) {
        i_op_assign_reg_76 = i_fu_130_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_op_assign_reg_76 = ap_const_lv17_1;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        tmp_1_reg_146 = tmp_1_fu_91_p2.read();
    }
}

void a6::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void a6::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void a6::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_97_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void a6::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void a6::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_97_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void a6::thread_exitcond_fu_97_p2() {
    exitcond_fu_97_p2 = (!i_op_assign_reg_76.read().is_01() || !tmp_1_reg_146.read().is_01())? sc_lv<1>(): sc_lv<1>(i_op_assign_reg_76.read() == tmp_1_reg_146.read());
}

void a6::thread_i_fu_130_p2() {
    i_fu_130_p2 = (!ap_const_lv17_1.is_01() || !i_op_assign_reg_76.read().is_01())? sc_lv<17>(): (sc_biguint<17>(ap_const_lv17_1) + sc_biguint<17>(i_op_assign_reg_76.read()));
}

void a6::thread_out_V() {
    out_V = (!storemerge_fu_122_p0.read()[0].is_01())? sc_lv<16>(): ((storemerge_fu_122_p0.read()[0].to_bool())? tmp_5_fu_118_p1.read(): tmp_fu_102_p2.read());
}

void a6::thread_out_V_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_97_p2.read(), ap_const_lv1_0))) {
        out_V_ap_vld = ap_const_logic_1;
    } else {
        out_V_ap_vld = ap_const_logic_0;
    }
}

void a6::thread_storemerge_fu_122_p0() {
    storemerge_fu_122_p0 =  (sc_lv<1>) (s.read());
}

void a6::thread_storemerge_fu_122_p3() {
    storemerge_fu_122_p3 = (!storemerge_fu_122_p0.read()[0].is_01())? sc_lv<16>(): ((storemerge_fu_122_p0.read()[0].to_bool())? tmp_5_fu_118_p1.read(): tmp_fu_102_p2.read());
}

void a6::thread_tmp_1_fu_91_p2() {
    tmp_1_fu_91_p2 = (!tmp_cast_fu_87_p1.read().is_01() || !ap_const_lv17_1.is_01())? sc_lv<17>(): (sc_biguint<17>(tmp_cast_fu_87_p1.read()) + sc_biguint<17>(ap_const_lv17_1));
}

void a6::thread_tmp_2_fu_108_p4() {
    tmp_2_fu_108_p4 = a_V_buf_reg_67.read().range(15, 1);
}

void a6::thread_tmp_5_fu_118_p1() {
    tmp_5_fu_118_p1 = esl_zext<16,15>(tmp_2_fu_108_p4.read());
}

void a6::thread_tmp_cast_fu_87_p1() {
    tmp_cast_fu_87_p1 = esl_zext<17,16>(b_V.read());
}

void a6::thread_tmp_fu_102_p2() {
    tmp_fu_102_p2 = (!ap_const_lv16_1.is_01())? sc_lv<16>(): a_V_buf_reg_67.read() << (unsigned short)ap_const_lv16_1.to_uint();
}

void a6::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond_fu_97_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

void a6::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"a_V\" :  \"" << a_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"b_V\" :  \"" << b_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s\" :  \"" << s.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_V\" :  \"" << out_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_V_ap_vld\" :  \"" << out_V_ap_vld.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

