-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity a6 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_V : IN STD_LOGIC_VECTOR (15 downto 0);
    b_V : IN STD_LOGIC_VECTOR (15 downto 0);
    s : IN STD_LOGIC;
    out_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of a6 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "a6,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.431750,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=52,HLS_SYN_LUT=115,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_1_fu_91_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_1_reg_146 : STD_LOGIC_VECTOR (16 downto 0);
    signal storemerge_fu_122_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond_fu_97_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_130_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal a_V_buf_reg_67 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_op_assign_reg_76 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_cast_fu_87_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_2_fu_108_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal storemerge_fu_122_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_118_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_102_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    a_V_buf_reg_67_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_97_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                a_V_buf_reg_67 <= storemerge_fu_122_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                a_V_buf_reg_67 <= a_V;
            end if; 
        end if;
    end process;

    i_op_assign_reg_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_97_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_op_assign_reg_76 <= i_fu_130_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_op_assign_reg_76 <= ap_const_lv17_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                tmp_1_reg_146 <= tmp_1_fu_91_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond_fu_97_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond_fu_97_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_done_assign_proc : process(ap_CS_fsm_state2, exitcond_fu_97_p2)
    begin
        if (((exitcond_fu_97_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond_fu_97_p2)
    begin
        if (((exitcond_fu_97_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_97_p2 <= "1" when (i_op_assign_reg_76 = tmp_1_reg_146) else "0";
    i_fu_130_p2 <= std_logic_vector(unsigned(ap_const_lv17_1) + unsigned(i_op_assign_reg_76));
    out_V <= 
        tmp_5_fu_118_p1 when (storemerge_fu_122_p0(0) = '1') else 
        tmp_fu_102_p2;

    out_V_ap_vld_assign_proc : process(ap_CS_fsm_state2, exitcond_fu_97_p2)
    begin
        if (((exitcond_fu_97_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            out_V_ap_vld <= ap_const_logic_1;
        else 
            out_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    storemerge_fu_122_p0 <= (0=>s, others=>'-');
    storemerge_fu_122_p3 <= 
        tmp_5_fu_118_p1 when (storemerge_fu_122_p0(0) = '1') else 
        tmp_fu_102_p2;
    tmp_1_fu_91_p2 <= std_logic_vector(unsigned(tmp_cast_fu_87_p1) + unsigned(ap_const_lv17_1));
    tmp_2_fu_108_p4 <= a_V_buf_reg_67(15 downto 1);
    tmp_5_fu_118_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_108_p4),16));
    tmp_cast_fu_87_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_V),17));
    tmp_fu_102_p2 <= std_logic_vector(shift_left(unsigned(a_V_buf_reg_67),to_integer(unsigned('0' & ap_const_lv16_1(16-1 downto 0)))));
end behav;
