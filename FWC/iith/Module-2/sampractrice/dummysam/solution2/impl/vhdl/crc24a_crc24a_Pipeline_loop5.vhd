-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
-- Version: 2022.2.2
-- Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity crc24a_crc24a_Pipeline_loop5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_r_TREADY : IN STD_LOGIC;
    p : IN STD_LOGIC_VECTOR (31 downto 0);
    oput_V_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    oput_V_3_ce0 : OUT STD_LOGIC;
    oput_V_3_we0 : OUT STD_LOGIC;
    oput_V_3_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    oput_V_3_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    oput_V_3_ce1 : OUT STD_LOGIC;
    oput_V_3_q1 : IN STD_LOGIC_VECTOR (0 downto 0);
    oput_V_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    oput_V_2_ce0 : OUT STD_LOGIC;
    oput_V_2_we0 : OUT STD_LOGIC;
    oput_V_2_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    oput_V_2_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    oput_V_2_ce1 : OUT STD_LOGIC;
    oput_V_2_q1 : IN STD_LOGIC_VECTOR (0 downto 0);
    oput_V_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    oput_V_1_ce0 : OUT STD_LOGIC;
    oput_V_1_we0 : OUT STD_LOGIC;
    oput_V_1_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    oput_V_1_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    oput_V_1_ce1 : OUT STD_LOGIC;
    oput_V_1_q1 : IN STD_LOGIC_VECTOR (0 downto 0);
    oput_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    oput_V_ce0 : OUT STD_LOGIC;
    oput_V_we0 : OUT STD_LOGIC;
    oput_V_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    oput_V_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    oput_V_ce1 : OUT STD_LOGIC;
    oput_V_q1 : IN STD_LOGIC_VECTOR (0 downto 0);
    temp_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    temp_V_ce0 : OUT STD_LOGIC;
    temp_V_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    temp_V_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    temp_V_1_ce0 : OUT STD_LOGIC;
    temp_V_1_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    temp_V_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    temp_V_2_ce0 : OUT STD_LOGIC;
    temp_V_2_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    temp_V_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    temp_V_3_ce0 : OUT STD_LOGIC;
    temp_V_3_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    temp_V_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    temp_V_4_ce0 : OUT STD_LOGIC;
    temp_V_4_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    temp_V_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    temp_V_5_ce0 : OUT STD_LOGIC;
    temp_V_5_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    temp_V_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    temp_V_6_ce0 : OUT STD_LOGIC;
    temp_V_6_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    temp_V_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    temp_V_7_ce0 : OUT STD_LOGIC;
    temp_V_7_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    temp_V_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    temp_V_8_ce0 : OUT STD_LOGIC;
    temp_V_8_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    temp_V_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    temp_V_9_ce0 : OUT STD_LOGIC;
    temp_V_9_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    temp_V_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    temp_V_10_ce0 : OUT STD_LOGIC;
    temp_V_10_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    temp_V_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    temp_V_11_ce0 : OUT STD_LOGIC;
    temp_V_11_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    temp_V_12_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    temp_V_12_ce0 : OUT STD_LOGIC;
    temp_V_12_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    temp_V_13_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    temp_V_13_ce0 : OUT STD_LOGIC;
    temp_V_13_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    temp_V_14_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    temp_V_14_ce0 : OUT STD_LOGIC;
    temp_V_14_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    temp_V_15_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    temp_V_15_ce0 : OUT STD_LOGIC;
    temp_V_15_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    temp_V_16_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    temp_V_16_ce0 : OUT STD_LOGIC;
    temp_V_16_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    temp_V_17_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    temp_V_17_ce0 : OUT STD_LOGIC;
    temp_V_17_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    temp_V_18_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    temp_V_18_ce0 : OUT STD_LOGIC;
    temp_V_18_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    temp_V_19_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    temp_V_19_ce0 : OUT STD_LOGIC;
    temp_V_19_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    temp_V_20_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    temp_V_20_ce0 : OUT STD_LOGIC;
    temp_V_20_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    temp_V_21_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    temp_V_21_ce0 : OUT STD_LOGIC;
    temp_V_21_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    temp_V_22_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    temp_V_22_ce0 : OUT STD_LOGIC;
    temp_V_22_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    temp_V_23_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    temp_V_23_ce0 : OUT STD_LOGIC;
    temp_V_23_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    temp_V_24_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    temp_V_24_ce0 : OUT STD_LOGIC;
    temp_V_24_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    output_r_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_r_TVALID : OUT STD_LOGIC );
end;


architecture behav of crc24a_crc24a_Pipeline_loop5 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv63_A3D70A3E : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000010100011110101110000101000111110";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv31_19 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000011001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal icmp_ln62_reg_1000 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln56_fu_568_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal output_r_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal index_fu_582_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal index_reg_841 : STD_LOGIC_VECTOR (2 downto 0);
    signal oput_V_addr_reg_971 : STD_LOGIC_VECTOR (7 downto 0);
    signal oput_V_1_addr_reg_977 : STD_LOGIC_VECTOR (7 downto 0);
    signal oput_V_2_addr_reg_983 : STD_LOGIC_VECTOR (7 downto 0);
    signal oput_V_3_addr_reg_989 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1499_1_fu_649_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1499_1_reg_995 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln62_fu_653_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln59_fu_602_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln59_1_fu_641_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal phi_urem177_fu_124 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln12_fu_787_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal phi_mul175_fu_128 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln59_fu_586_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Val2_s_fu_132 : STD_LOGIC_VECTOR (7 downto 0);
    signal o_V_fu_761_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_fu_136 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln56_fu_573_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ret_V_fu_748_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln56_fu_564_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_592_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal lshr_ln2_fu_631_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_fu_679_p26 : STD_LOGIC_VECTOR (4 downto 0);
    signal lhs_V_fu_679_p27 : STD_LOGIC_VECTOR (0 downto 0);
    signal rhs_V_fu_735_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln58_fu_672_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln12_fu_775_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln12_fu_781_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component crc24a_mux_255_1_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        din8 : IN STD_LOGIC_VECTOR (0 downto 0);
        din9 : IN STD_LOGIC_VECTOR (0 downto 0);
        din10 : IN STD_LOGIC_VECTOR (0 downto 0);
        din11 : IN STD_LOGIC_VECTOR (0 downto 0);
        din12 : IN STD_LOGIC_VECTOR (0 downto 0);
        din13 : IN STD_LOGIC_VECTOR (0 downto 0);
        din14 : IN STD_LOGIC_VECTOR (0 downto 0);
        din15 : IN STD_LOGIC_VECTOR (0 downto 0);
        din16 : IN STD_LOGIC_VECTOR (0 downto 0);
        din17 : IN STD_LOGIC_VECTOR (0 downto 0);
        din18 : IN STD_LOGIC_VECTOR (0 downto 0);
        din19 : IN STD_LOGIC_VECTOR (0 downto 0);
        din20 : IN STD_LOGIC_VECTOR (0 downto 0);
        din21 : IN STD_LOGIC_VECTOR (0 downto 0);
        din22 : IN STD_LOGIC_VECTOR (0 downto 0);
        din23 : IN STD_LOGIC_VECTOR (0 downto 0);
        din24 : IN STD_LOGIC_VECTOR (0 downto 0);
        din25 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component crc24a_mux_42_1_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component crc24a_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_255_1_1_1_U179 : component crc24a_mux_255_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 1,
        din10_WIDTH => 1,
        din11_WIDTH => 1,
        din12_WIDTH => 1,
        din13_WIDTH => 1,
        din14_WIDTH => 1,
        din15_WIDTH => 1,
        din16_WIDTH => 1,
        din17_WIDTH => 1,
        din18_WIDTH => 1,
        din19_WIDTH => 1,
        din20_WIDTH => 1,
        din21_WIDTH => 1,
        din22_WIDTH => 1,
        din23_WIDTH => 1,
        din24_WIDTH => 1,
        din25_WIDTH => 5,
        dout_WIDTH => 1)
    port map (
        din0 => temp_V_q0,
        din1 => temp_V_1_q0,
        din2 => temp_V_2_q0,
        din3 => temp_V_3_q0,
        din4 => temp_V_4_q0,
        din5 => temp_V_5_q0,
        din6 => temp_V_6_q0,
        din7 => temp_V_7_q0,
        din8 => temp_V_8_q0,
        din9 => temp_V_9_q0,
        din10 => temp_V_10_q0,
        din11 => temp_V_11_q0,
        din12 => temp_V_12_q0,
        din13 => temp_V_13_q0,
        din14 => temp_V_14_q0,
        din15 => temp_V_15_q0,
        din16 => temp_V_16_q0,
        din17 => temp_V_17_q0,
        din18 => temp_V_18_q0,
        din19 => temp_V_19_q0,
        din20 => temp_V_20_q0,
        din21 => temp_V_21_q0,
        din22 => temp_V_22_q0,
        din23 => temp_V_23_q0,
        din24 => temp_V_24_q0,
        din25 => lhs_V_fu_679_p26,
        dout => lhs_V_fu_679_p27);

    mux_42_1_1_1_U180 : component crc24a_mux_42_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => oput_V_q1,
        din1 => oput_V_1_q1,
        din2 => oput_V_2_q1,
        din3 => oput_V_3_q1,
        din4 => trunc_ln1499_1_reg_995,
        dout => rhs_V_fu_735_p6);

    flow_control_loop_pipe_sequential_init_U : component crc24a_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_136 <= ap_const_lv31_0;
                elsif (((icmp_ln56_fu_568_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_fu_136 <= add_ln56_fu_573_p2;
                end if;
            end if; 
        end if;
    end process;

    phi_mul175_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    phi_mul175_fu_128 <= ap_const_lv63_0;
                elsif (((icmp_ln56_fu_568_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    phi_mul175_fu_128 <= add_ln59_fu_586_p2;
                end if;
            end if; 
        end if;
    end process;

    phi_urem177_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    phi_urem177_fu_124 <= ap_const_lv31_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    phi_urem177_fu_124 <= select_ln12_fu_787_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln56_fu_568_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln62_reg_1000 <= icmp_ln62_fu_653_p2;
                index_reg_841 <= index_fu_582_p1;
                oput_V_1_addr_reg_977 <= zext_ln59_1_fu_641_p1(8 - 1 downto 0);
                oput_V_2_addr_reg_983 <= zext_ln59_1_fu_641_p1(8 - 1 downto 0);
                oput_V_3_addr_reg_989 <= zext_ln59_1_fu_641_p1(8 - 1 downto 0);
                oput_V_addr_reg_971 <= zext_ln59_1_fu_641_p1(8 - 1 downto 0);
                trunc_ln1499_1_reg_995 <= trunc_ln1499_1_fu_649_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                p_Val2_s_fu_132 <= o_V_fu_761_p4;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln12_fu_775_p2 <= std_logic_vector(unsigned(phi_urem177_fu_124) + unsigned(ap_const_lv31_1));
    add_ln56_fu_573_p2 <= std_logic_vector(unsigned(i_fu_136) + unsigned(ap_const_lv31_1));
    add_ln59_fu_586_p2 <= std_logic_vector(unsigned(phi_mul175_fu_128) + unsigned(ap_const_lv63_A3D70A3E));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter2, output_r_TREADY, icmp_ln62_reg_1000)
    begin
                ap_block_pp0_stage0_01001 <= ((icmp_ln62_reg_1000 = ap_const_lv1_1) and (output_r_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, output_r_TREADY, icmp_ln62_reg_1000, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state3_io) or ((icmp_ln62_reg_1000 = ap_const_lv1_1) and (output_r_TREADY = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, output_r_TREADY, icmp_ln62_reg_1000, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state3_io) or ((icmp_ln62_reg_1000 = ap_const_lv1_1) and (output_r_TREADY = ap_const_logic_0))));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_io_assign_proc : process(output_r_TREADY, icmp_ln62_reg_1000)
    begin
                ap_block_state3_io <= ((icmp_ln62_reg_1000 = ap_const_lv1_1) and (output_r_TREADY = ap_const_logic_0));
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(output_r_TREADY, icmp_ln62_reg_1000)
    begin
                ap_block_state3_pp0_stage0_iter2 <= ((icmp_ln62_reg_1000 = ap_const_lv1_1) and (output_r_TREADY = ap_const_logic_0));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln56_fu_568_p2)
    begin
        if (((icmp_ln56_fu_568_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln12_fu_781_p2 <= "1" when (unsigned(add_ln12_fu_775_p2) < unsigned(ap_const_lv31_19)) else "0";
    icmp_ln56_fu_568_p2 <= "1" when (signed(zext_ln56_fu_564_p1) < signed(p)) else "0";
    icmp_ln62_fu_653_p2 <= "1" when (index_fu_582_p1 = ap_const_lv3_7) else "0";
    index_fu_582_p1 <= i_fu_136(3 - 1 downto 0);
    lhs_V_fu_679_p26 <= phi_urem177_fu_124(5 - 1 downto 0);
    lshr_ln2_fu_631_p4 <= i_fu_136(9 downto 2);
    
    o_V_fu_761_p4_proc : process(p_Val2_s_fu_132, zext_ln58_fu_672_p1, ret_V_fu_748_p2)
    begin
        o_V_fu_761_p4 <= p_Val2_s_fu_132;
        if to_integer(unsigned(zext_ln58_fu_672_p1)) >= p_Val2_s_fu_132'low and to_integer(unsigned(zext_ln58_fu_672_p1)) <= p_Val2_s_fu_132'high then
            o_V_fu_761_p4(to_integer(unsigned(zext_ln58_fu_672_p1))) <= ret_V_fu_748_p2(0);
        end if;
    end process;

    oput_V_1_address0 <= oput_V_1_addr_reg_977;
    oput_V_1_address1 <= zext_ln59_1_fu_641_p1(8 - 1 downto 0);

    oput_V_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            oput_V_1_ce0 <= ap_const_logic_1;
        else 
            oput_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    oput_V_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            oput_V_1_ce1 <= ap_const_logic_1;
        else 
            oput_V_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    oput_V_1_d0 <= ret_V_fu_748_p2;

    oput_V_1_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln1499_1_reg_995)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln1499_1_reg_995 = ap_const_lv2_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            oput_V_1_we0 <= ap_const_logic_1;
        else 
            oput_V_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    oput_V_2_address0 <= oput_V_2_addr_reg_983;
    oput_V_2_address1 <= zext_ln59_1_fu_641_p1(8 - 1 downto 0);

    oput_V_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            oput_V_2_ce0 <= ap_const_logic_1;
        else 
            oput_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    oput_V_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            oput_V_2_ce1 <= ap_const_logic_1;
        else 
            oput_V_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    oput_V_2_d0 <= ret_V_fu_748_p2;

    oput_V_2_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln1499_1_reg_995)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln1499_1_reg_995 = ap_const_lv2_2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            oput_V_2_we0 <= ap_const_logic_1;
        else 
            oput_V_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    oput_V_3_address0 <= oput_V_3_addr_reg_989;
    oput_V_3_address1 <= zext_ln59_1_fu_641_p1(8 - 1 downto 0);

    oput_V_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            oput_V_3_ce0 <= ap_const_logic_1;
        else 
            oput_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    oput_V_3_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            oput_V_3_ce1 <= ap_const_logic_1;
        else 
            oput_V_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    oput_V_3_d0 <= ret_V_fu_748_p2;

    oput_V_3_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln1499_1_reg_995)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln1499_1_reg_995 = ap_const_lv2_3) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            oput_V_3_we0 <= ap_const_logic_1;
        else 
            oput_V_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    oput_V_address0 <= oput_V_addr_reg_971;
    oput_V_address1 <= zext_ln59_1_fu_641_p1(8 - 1 downto 0);

    oput_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            oput_V_ce0 <= ap_const_logic_1;
        else 
            oput_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    oput_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            oput_V_ce1 <= ap_const_logic_1;
        else 
            oput_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    oput_V_d0 <= ret_V_fu_748_p2;

    oput_V_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln1499_1_reg_995)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln1499_1_reg_995 = ap_const_lv2_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            oput_V_we0 <= ap_const_logic_1;
        else 
            oput_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    
    output_r_TDATA_proc : process(p_Val2_s_fu_132, zext_ln58_fu_672_p1, ret_V_fu_748_p2)
    begin
        output_r_TDATA <= p_Val2_s_fu_132;
        if to_integer(unsigned(zext_ln58_fu_672_p1)) >= p_Val2_s_fu_132'low and to_integer(unsigned(zext_ln58_fu_672_p1)) <= p_Val2_s_fu_132'high then
            output_r_TDATA(to_integer(unsigned(zext_ln58_fu_672_p1))) <= ret_V_fu_748_p2(0);
        end if;
    end process;


    output_r_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, output_r_TREADY, icmp_ln62_reg_1000, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln62_reg_1000 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_r_TDATA_blk_n <= output_r_TREADY;
        else 
            output_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    output_r_TVALID_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln62_reg_1000, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln62_reg_1000 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_r_TVALID <= ap_const_logic_1;
        else 
            output_r_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_fu_748_p2 <= (rhs_V_fu_735_p6 xor lhs_V_fu_679_p27);
    select_ln12_fu_787_p3 <= 
        add_ln12_fu_775_p2 when (icmp_ln12_fu_781_p2(0) = '1') else 
        ap_const_lv31_0;
    temp_V_10_address0 <= zext_ln59_fu_602_p1(5 - 1 downto 0);

    temp_V_10_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_V_10_ce0 <= ap_const_logic_1;
        else 
            temp_V_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    temp_V_11_address0 <= zext_ln59_fu_602_p1(5 - 1 downto 0);

    temp_V_11_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_V_11_ce0 <= ap_const_logic_1;
        else 
            temp_V_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    temp_V_12_address0 <= zext_ln59_fu_602_p1(5 - 1 downto 0);

    temp_V_12_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_V_12_ce0 <= ap_const_logic_1;
        else 
            temp_V_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    temp_V_13_address0 <= zext_ln59_fu_602_p1(5 - 1 downto 0);

    temp_V_13_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_V_13_ce0 <= ap_const_logic_1;
        else 
            temp_V_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    temp_V_14_address0 <= zext_ln59_fu_602_p1(5 - 1 downto 0);

    temp_V_14_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_V_14_ce0 <= ap_const_logic_1;
        else 
            temp_V_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    temp_V_15_address0 <= zext_ln59_fu_602_p1(5 - 1 downto 0);

    temp_V_15_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_V_15_ce0 <= ap_const_logic_1;
        else 
            temp_V_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    temp_V_16_address0 <= zext_ln59_fu_602_p1(5 - 1 downto 0);

    temp_V_16_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_V_16_ce0 <= ap_const_logic_1;
        else 
            temp_V_16_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    temp_V_17_address0 <= zext_ln59_fu_602_p1(5 - 1 downto 0);

    temp_V_17_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_V_17_ce0 <= ap_const_logic_1;
        else 
            temp_V_17_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    temp_V_18_address0 <= zext_ln59_fu_602_p1(5 - 1 downto 0);

    temp_V_18_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_V_18_ce0 <= ap_const_logic_1;
        else 
            temp_V_18_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    temp_V_19_address0 <= zext_ln59_fu_602_p1(5 - 1 downto 0);

    temp_V_19_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_V_19_ce0 <= ap_const_logic_1;
        else 
            temp_V_19_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    temp_V_1_address0 <= zext_ln59_fu_602_p1(5 - 1 downto 0);

    temp_V_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_V_1_ce0 <= ap_const_logic_1;
        else 
            temp_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    temp_V_20_address0 <= zext_ln59_fu_602_p1(5 - 1 downto 0);

    temp_V_20_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_V_20_ce0 <= ap_const_logic_1;
        else 
            temp_V_20_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    temp_V_21_address0 <= zext_ln59_fu_602_p1(5 - 1 downto 0);

    temp_V_21_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_V_21_ce0 <= ap_const_logic_1;
        else 
            temp_V_21_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    temp_V_22_address0 <= zext_ln59_fu_602_p1(5 - 1 downto 0);

    temp_V_22_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_V_22_ce0 <= ap_const_logic_1;
        else 
            temp_V_22_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    temp_V_23_address0 <= zext_ln59_fu_602_p1(5 - 1 downto 0);

    temp_V_23_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_V_23_ce0 <= ap_const_logic_1;
        else 
            temp_V_23_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    temp_V_24_address0 <= zext_ln59_fu_602_p1(5 - 1 downto 0);

    temp_V_24_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_V_24_ce0 <= ap_const_logic_1;
        else 
            temp_V_24_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    temp_V_2_address0 <= zext_ln59_fu_602_p1(5 - 1 downto 0);

    temp_V_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_V_2_ce0 <= ap_const_logic_1;
        else 
            temp_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    temp_V_3_address0 <= zext_ln59_fu_602_p1(5 - 1 downto 0);

    temp_V_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_V_3_ce0 <= ap_const_logic_1;
        else 
            temp_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    temp_V_4_address0 <= zext_ln59_fu_602_p1(5 - 1 downto 0);

    temp_V_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_V_4_ce0 <= ap_const_logic_1;
        else 
            temp_V_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    temp_V_5_address0 <= zext_ln59_fu_602_p1(5 - 1 downto 0);

    temp_V_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_V_5_ce0 <= ap_const_logic_1;
        else 
            temp_V_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    temp_V_6_address0 <= zext_ln59_fu_602_p1(5 - 1 downto 0);

    temp_V_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_V_6_ce0 <= ap_const_logic_1;
        else 
            temp_V_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    temp_V_7_address0 <= zext_ln59_fu_602_p1(5 - 1 downto 0);

    temp_V_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_V_7_ce0 <= ap_const_logic_1;
        else 
            temp_V_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    temp_V_8_address0 <= zext_ln59_fu_602_p1(5 - 1 downto 0);

    temp_V_8_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_V_8_ce0 <= ap_const_logic_1;
        else 
            temp_V_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    temp_V_9_address0 <= zext_ln59_fu_602_p1(5 - 1 downto 0);

    temp_V_9_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_V_9_ce0 <= ap_const_logic_1;
        else 
            temp_V_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    temp_V_address0 <= zext_ln59_fu_602_p1(5 - 1 downto 0);

    temp_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_V_ce0 <= ap_const_logic_1;
        else 
            temp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_592_p4 <= phi_mul175_fu_128(62 downto 36);
    trunc_ln1499_1_fu_649_p1 <= i_fu_136(2 - 1 downto 0);
    zext_ln56_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_136),32));
    zext_ln58_fu_672_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_reg_841),32));
    zext_ln59_1_fu_641_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln2_fu_631_p4),64));
    zext_ln59_fu_602_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_592_p4),64));
end behav;
