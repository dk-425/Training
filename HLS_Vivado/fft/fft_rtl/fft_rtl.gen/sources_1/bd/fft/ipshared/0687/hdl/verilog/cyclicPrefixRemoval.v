// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
// Version: 2022.2.2
// Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="cyclicPrefixRemoval_cyclicPrefixRemoval,hls_ip_2022_2_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.429000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=40,HLS_SYN_LUT=169,HLS_VERSION=2022_2_2}" *)

module cyclicPrefixRemoval (
        ap_clk,
        ap_rst_n,
        inpstream_TDATA,
        inpstream_TVALID,
        inpstream_TREADY,
        oupstream_TDATA,
        oupstream_TVALID,
        oupstream_TREADY,
        z_TDATA,
        z_TVALID,
        z_TREADY,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [63:0] inpstream_TDATA;
input   inpstream_TVALID;
output   inpstream_TREADY;
output  [63:0] oupstream_TDATA;
output   oupstream_TVALID;
input   oupstream_TREADY;
input  [31:0] z_TDATA;
input   z_TVALID;
output   z_TREADY;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg    inpstream_TDATA_blk_n;
reg    oupstream_TDATA_blk_n;
wire   [0:0] and_ln14_1_fu_94_p2;
wire   [0:0] and_ln14_fu_76_p2;
wire    ap_CS_fsm_state2;
reg   [0:0] and_ln14_1_reg_109;
reg   [0:0] and_ln14_reg_105;
reg    z_TDATA_blk_n;
reg    ap_predicate_op21_write_state1;
reg    ap_block_state1;
reg    ap_block_state1_io;
wire   [0:0] icmp_ln14_fu_64_p2;
wire   [0:0] icmp_ln14_1_fu_70_p2;
wire   [0:0] icmp_ln14_2_fu_82_p2;
wire   [0:0] icmp_ln14_3_fu_88_p2;
reg    ap_predicate_op22_write_state2;
wire    regslice_both_oupstream_U_apdone_blk;
reg    ap_block_state2;
reg    ap_block_state2_io;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    regslice_both_inpstream_U_apdone_blk;
wire   [63:0] inpstream_TDATA_int_regslice;
wire    inpstream_TVALID_int_regslice;
reg    inpstream_TREADY_int_regslice;
wire    regslice_both_inpstream_U_ack_in;
reg    oupstream_TVALID_int_regslice;
wire    oupstream_TREADY_int_regslice;
wire    regslice_both_oupstream_U_vld_out;
wire    regslice_both_z_U_apdone_blk;
wire   [31:0] z_TDATA_int_regslice;
wire    z_TVALID_int_regslice;
reg    z_TREADY_int_regslice;
wire    regslice_both_z_U_ack_in;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

cyclicPrefixRemoval_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

cyclicPrefixRemoval_regslice_both #(
    .DataWidth( 64 ))
regslice_both_inpstream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(inpstream_TDATA),
    .vld_in(inpstream_TVALID),
    .ack_in(regslice_both_inpstream_U_ack_in),
    .data_out(inpstream_TDATA_int_regslice),
    .vld_out(inpstream_TVALID_int_regslice),
    .ack_out(inpstream_TREADY_int_regslice),
    .apdone_blk(regslice_both_inpstream_U_apdone_blk)
);

cyclicPrefixRemoval_regslice_both #(
    .DataWidth( 64 ))
regslice_both_oupstream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(inpstream_TDATA_int_regslice),
    .vld_in(oupstream_TVALID_int_regslice),
    .ack_in(oupstream_TREADY_int_regslice),
    .data_out(oupstream_TDATA),
    .vld_out(regslice_both_oupstream_U_vld_out),
    .ack_out(oupstream_TREADY),
    .apdone_blk(regslice_both_oupstream_U_apdone_blk)
);

cyclicPrefixRemoval_regslice_both #(
    .DataWidth( 32 ))
regslice_both_z_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(z_TDATA),
    .vld_in(z_TVALID),
    .ack_in(regslice_both_z_U_ack_in),
    .data_out(z_TDATA_int_regslice),
    .vld_out(z_TVALID_int_regslice),
    .ack_out(z_TREADY_int_regslice),
    .apdone_blk(regslice_both_z_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln14_fu_76_p2) & (1'b1 == ap_CS_fsm_state1))) begin
        and_ln14_1_reg_109 <= and_ln14_1_fu_94_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        and_ln14_reg_105 <= and_ln14_fu_76_p2;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) | (z_TVALID_int_regslice == 1'b0) | (1'b1 == ap_block_state1_io) | (inpstream_TVALID_int_regslice == 1'b0) | ((oupstream_TREADY_int_regslice == 1'b0) & (ap_predicate_op21_write_state1 == 1'b1)))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_block_state2_io) | (regslice_both_oupstream_U_apdone_blk == 1'b1) | ((oupstream_TREADY_int_regslice == 1'b0) & (ap_predicate_op22_write_state2 == 1'b1)))) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state2_io) | (regslice_both_oupstream_U_apdone_blk == 1'b1) | ((oupstream_TREADY_int_regslice == 1'b0) & (ap_predicate_op22_write_state2 == 1'b1))) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state2_io) | (regslice_both_oupstream_U_apdone_blk == 1'b1) | ((oupstream_TREADY_int_regslice == 1'b0) & (ap_predicate_op22_write_state2 == 1'b1))) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        inpstream_TDATA_blk_n = inpstream_TVALID_int_regslice;
    end else begin
        inpstream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (z_TVALID_int_regslice == 1'b0) | (1'b1 == ap_block_state1_io) | (inpstream_TVALID_int_regslice == 1'b0) | ((oupstream_TREADY_int_regslice == 1'b0) & (ap_predicate_op21_write_state1 == 1'b1))) & (1'b1 == ap_CS_fsm_state1))) begin
        inpstream_TREADY_int_regslice = 1'b1;
    end else begin
        inpstream_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & ((1'd1 == and_ln14_reg_105) | (1'd1 == and_ln14_1_reg_109))) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & ((1'd1 == and_ln14_fu_76_p2) | (1'd1 == and_ln14_1_fu_94_p2))))) begin
        oupstream_TDATA_blk_n = oupstream_TREADY_int_regslice;
    end else begin
        oupstream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (z_TVALID_int_regslice == 1'b0) | (1'b1 == ap_block_state1_io) | (inpstream_TVALID_int_regslice == 1'b0) | ((oupstream_TREADY_int_regslice == 1'b0) & (ap_predicate_op21_write_state1 == 1'b1))) & (1'b1 == ap_CS_fsm_state1) & (ap_predicate_op21_write_state1 == 1'b1))) begin
        oupstream_TVALID_int_regslice = 1'b1;
    end else begin
        oupstream_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        z_TDATA_blk_n = z_TVALID_int_regslice;
    end else begin
        z_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (z_TVALID_int_regslice == 1'b0) | (1'b1 == ap_block_state1_io) | (inpstream_TVALID_int_regslice == 1'b0) | ((oupstream_TREADY_int_regslice == 1'b0) & (ap_predicate_op21_write_state1 == 1'b1))) & (1'b1 == ap_CS_fsm_state1))) begin
        z_TREADY_int_regslice = 1'b1;
    end else begin
        z_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (z_TVALID_int_regslice == 1'b0) | (1'b1 == ap_block_state1_io) | (inpstream_TVALID_int_regslice == 1'b0) | ((oupstream_TREADY_int_regslice == 1'b0) & (ap_predicate_op21_write_state1 == 1'b1))) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((1'b1 == ap_block_state2_io) | (regslice_both_oupstream_U_apdone_blk == 1'b1) | ((oupstream_TREADY_int_regslice == 1'b0) & (ap_predicate_op22_write_state2 == 1'b1))) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln14_1_fu_94_p2 = (icmp_ln14_3_fu_88_p2 & icmp_ln14_2_fu_82_p2);

assign and_ln14_fu_76_p2 = (icmp_ln14_fu_64_p2 & icmp_ln14_1_fu_70_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (z_TVALID_int_regslice == 1'b0) | (inpstream_TVALID_int_regslice == 1'b0) | ((oupstream_TREADY_int_regslice == 1'b0) & (ap_predicate_op21_write_state1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1_io = ((oupstream_TREADY_int_regslice == 1'b0) & (ap_predicate_op21_write_state1 == 1'b1));
end

always @ (*) begin
    ap_block_state2 = ((regslice_both_oupstream_U_apdone_blk == 1'b1) | ((oupstream_TREADY_int_regslice == 1'b0) & (ap_predicate_op22_write_state2 == 1'b1)));
end

always @ (*) begin
    ap_block_state2_io = ((oupstream_TREADY_int_regslice == 1'b0) & (ap_predicate_op22_write_state2 == 1'b1));
end

always @ (*) begin
    ap_predicate_op21_write_state1 = ((1'd1 == and_ln14_fu_76_p2) | (1'd1 == and_ln14_1_fu_94_p2));
end

always @ (*) begin
    ap_predicate_op22_write_state2 = ((1'd1 == and_ln14_reg_105) | (1'd1 == and_ln14_1_reg_109));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign icmp_ln14_1_fu_70_p2 = (($signed(z_TDATA_int_regslice) < $signed(32'd4417)) ? 1'b1 : 1'b0);

assign icmp_ln14_2_fu_82_p2 = (($signed(z_TDATA_int_regslice) > $signed(32'd4704)) ? 1'b1 : 1'b0);

assign icmp_ln14_3_fu_88_p2 = (($signed(z_TDATA_int_regslice) < $signed(32'd8801)) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_64_p2 = (($signed(z_TDATA_int_regslice) > $signed(32'd320)) ? 1'b1 : 1'b0);

assign inpstream_TREADY = regslice_both_inpstream_U_ack_in;

assign oupstream_TVALID = regslice_both_oupstream_U_vld_out;

assign z_TREADY = regslice_both_z_U_ack_in;


reg find_kernel_block = 0;
// synthesis translate_off
`include "cyclicPrefixRemoval_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //cyclicPrefixRemoval

