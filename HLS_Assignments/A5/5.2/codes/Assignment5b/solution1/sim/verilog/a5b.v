// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="a5b,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.396600,HLS_SYN_LAT=9,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=0,HLS_SYN_FF=89,HLS_SYN_LUT=1249,HLS_VERSION=2018_3}" *)

module a5b (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_V_data_0_V_dout,
        in_V_data_0_V_empty_n,
        in_V_data_0_V_read,
        in_V_data_1_V_dout,
        in_V_data_1_V_empty_n,
        in_V_data_1_V_read,
        in_V_data_2_V_dout,
        in_V_data_2_V_empty_n,
        in_V_data_2_V_read,
        in_V_data_3_V_dout,
        in_V_data_3_V_empty_n,
        in_V_data_3_V_read,
        out_V_data_0_V_din,
        out_V_data_0_V_full_n,
        out_V_data_0_V_write,
        out_V_data_1_V_din,
        out_V_data_1_V_full_n,
        out_V_data_1_V_write,
        out_V_data_2_V_din,
        out_V_data_2_V_full_n,
        out_V_data_2_V_write,
        out_V_data_3_V_din,
        out_V_data_3_V_full_n,
        out_V_data_3_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] in_V_data_0_V_dout;
input   in_V_data_0_V_empty_n;
output   in_V_data_0_V_read;
input  [7:0] in_V_data_1_V_dout;
input   in_V_data_1_V_empty_n;
output   in_V_data_1_V_read;
input  [7:0] in_V_data_2_V_dout;
input   in_V_data_2_V_empty_n;
output   in_V_data_2_V_read;
input  [7:0] in_V_data_3_V_dout;
input   in_V_data_3_V_empty_n;
output   in_V_data_3_V_read;
output  [7:0] out_V_data_0_V_din;
input   out_V_data_0_V_full_n;
output   out_V_data_0_V_write;
output  [7:0] out_V_data_1_V_din;
input   out_V_data_1_V_full_n;
output   out_V_data_1_V_write;
output  [7:0] out_V_data_2_V_din;
input   out_V_data_2_V_full_n;
output   out_V_data_2_V_write;
output  [7:0] out_V_data_3_V_din;
input   out_V_data_3_V_full_n;
output   out_V_data_3_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    in_V_data_0_V_blk_n;
reg    in_V_data_1_V_blk_n;
reg    in_V_data_2_V_blk_n;
reg    in_V_data_3_V_blk_n;
reg    out_V_data_0_V_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond_fu_216_p2;
reg    out_V_data_1_V_blk_n;
reg    out_V_data_2_V_blk_n;
reg    out_V_data_3_V_blk_n;
reg   [7:0] tmp_data_0_V_reg_561;
wire    in_V_data_0_V0_status;
reg    ap_block_state1;
reg   [7:0] tmp_data_1_V_reg_566;
reg   [7:0] tmp_data_2_V_reg_571;
reg   [7:0] tmp_data_3_V_reg_576;
wire   [2:0] c_V_fu_222_p2;
reg   [2:0] c_V_reg_589;
wire    out_V_data_0_V1_status;
reg    ap_block_state2;
wire   [1:0] tmp_1_fu_228_p1;
reg   [1:0] tmp_1_reg_594;
wire   [7:0] tmp_fu_232_p6;
reg   [7:0] tmp_reg_599;
wire   [4:0] tmp_7_fu_242_p3;
reg   [4:0] tmp_7_reg_605;
wire   [4:0] tmp_8_fu_251_p2;
reg   [4:0] tmp_8_reg_612;
wire   [0:0] grp_fu_196_p2;
reg   [0:0] tmp_28_reg_619;
wire   [0:0] tmp_s_fu_258_p2;
reg   [0:0] tmp_s_reg_627;
wire   [7:0] tmp_data_3_V_2_be_fu_533_p3;
wire    ap_CS_fsm_state3;
wire   [7:0] tmp_data_2_V_2_be_fu_540_p3;
wire   [7:0] tmp_data_1_V_2_be_fu_547_p3;
wire   [7:0] tmp_data_0_V_2_be_fu_554_p3;
wire   [0:0] bram_V_address0;
reg    bram_V_ce0;
reg   [3:0] bram_V_we0;
wire   [31:0] bram_V_d0;
wire   [31:0] bram_V_q0;
reg   [7:0] tmp_data_3_V_1_reg_133;
reg   [7:0] tmp_data_2_V_1_reg_146;
reg   [7:0] tmp_data_1_V_1_reg_159;
reg   [7:0] tmp_data_0_V_1_reg_172;
reg   [2:0] p_s_reg_185;
reg    in_V_data_0_V0_update;
reg    out_V_data_0_V1_update;
wire   [3:0] mask_fu_492_p2;
reg   [4:0] grp_fu_196_p0;
reg   [4:0] grp_fu_196_p1;
wire   [5:0] tmp_6_fu_264_p1;
wire   [5:0] tmp_9_fu_267_p1;
wire   [5:0] tmp_11_fu_273_p2;
wire   [5:0] tmp_12_fu_279_p3;
wire   [5:0] tmp_14_fu_295_p3;
wire   [5:0] tmp_13_fu_287_p3;
wire   [5:0] tmp_15_fu_303_p2;
wire   [31:0] tmp_10_fu_270_p1;
wire   [31:0] tmp_16_fu_309_p1;
wire   [31:0] tmp_19_fu_321_p2;
reg   [31:0] tmp_20_fu_327_p4;
wire   [31:0] tmp_17_fu_313_p1;
wire   [31:0] tmp_18_fu_317_p1;
wire   [31:0] tmp_22_fu_345_p2;
wire   [31:0] tmp_23_fu_351_p2;
wire   [31:0] p_demorgan_fu_357_p2;
wire   [31:0] tmp_24_fu_363_p2;
wire   [31:0] tmp_21_fu_337_p3;
wire   [31:0] tmp_25_fu_369_p2;
wire   [31:0] tmp_26_fu_375_p2;
wire   [5:0] tmp_29_fu_387_p1;
wire   [5:0] tmp_30_fu_390_p1;
wire   [5:0] tmp_32_fu_396_p2;
wire   [5:0] tmp_33_fu_402_p3;
wire   [5:0] tmp_35_fu_416_p3;
wire   [5:0] tmp_34_fu_409_p3;
wire   [5:0] tmp_36_fu_423_p2;
wire   [31:0] tmp_31_fu_393_p1;
wire   [31:0] tmp_37_fu_429_p1;
wire   [31:0] tmp_40_fu_441_p2;
reg   [31:0] tmp_41_fu_447_p4;
wire   [31:0] tmp_38_fu_433_p1;
wire   [31:0] tmp_39_fu_437_p1;
wire   [31:0] tmp_43_fu_464_p2;
wire   [31:0] tmp_44_fu_470_p2;
wire   [31:0] tmp_42_fu_457_p3;
wire   [31:0] p_demorgan1_fu_476_p2;
wire   [3:0] tmp_46_fu_489_p1;
wire   [31:0] tmp_27_fu_381_p2;
wire   [7:0] tmp_4_fu_523_p4;
wire   [7:0] tmp_3_fu_513_p4;
wire   [7:0] tmp_2_fu_503_p4;
wire   [7:0] tmp_47_fu_499_p1;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
end

a5b_bram_V #(
    .DataWidth( 32 ),
    .AddressRange( 2 ),
    .AddressWidth( 1 ))
bram_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bram_V_address0),
    .ce0(bram_V_ce0),
    .we0(bram_V_we0),
    .d0(bram_V_d0),
    .q0(bram_V_q0)
);

a5b_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
a5b_mux_42_8_1_1_U1(
    .din0(tmp_data_0_V_reg_561),
    .din1(tmp_data_1_V_reg_566),
    .din2(tmp_data_2_V_reg_571),
    .din3(tmp_data_3_V_reg_576),
    .din4(tmp_1_fu_228_p1),
    .dout(tmp_fu_232_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        p_s_reg_185 <= c_V_reg_589;
    end else if ((~((ap_start == 1'b0) | (in_V_data_0_V0_status == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_s_reg_185 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_data_0_V_1_reg_172 <= tmp_data_0_V_2_be_fu_554_p3;
    end else if ((~((ap_start == 1'b0) | (in_V_data_0_V0_status == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_data_0_V_1_reg_172 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_data_1_V_1_reg_159 <= tmp_data_1_V_2_be_fu_547_p3;
    end else if ((~((ap_start == 1'b0) | (in_V_data_0_V0_status == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_data_1_V_1_reg_159 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_data_2_V_1_reg_146 <= tmp_data_2_V_2_be_fu_540_p3;
    end else if ((~((ap_start == 1'b0) | (in_V_data_0_V0_status == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_data_2_V_1_reg_146 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_data_3_V_1_reg_133 <= tmp_data_3_V_2_be_fu_533_p3;
    end else if ((~((ap_start == 1'b0) | (in_V_data_0_V0_status == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_data_3_V_1_reg_133 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((exitcond_fu_216_p2 == 1'd1) & (out_V_data_0_V1_status == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        c_V_reg_589 <= c_V_fu_222_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((exitcond_fu_216_p2 == 1'd1) & (out_V_data_0_V1_status == 1'b0)) & (exitcond_fu_216_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_1_reg_594 <= tmp_1_fu_228_p1;
        tmp_28_reg_619 <= grp_fu_196_p2;
        tmp_7_reg_605[4 : 3] <= tmp_7_fu_242_p3[4 : 3];
        tmp_8_reg_612[4 : 3] <= tmp_8_fu_251_p2[4 : 3];
        tmp_reg_599 <= tmp_fu_232_p6;
        tmp_s_reg_627 <= tmp_s_fu_258_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (in_V_data_0_V0_status == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_data_0_V_reg_561 <= in_V_data_0_V_dout;
        tmp_data_1_V_reg_566 <= in_V_data_1_V_dout;
        tmp_data_2_V_reg_571 <= in_V_data_2_V_dout;
        tmp_data_3_V_reg_576 <= in_V_data_3_V_dout;
    end
end

always @ (*) begin
    if ((~((exitcond_fu_216_p2 == 1'd1) & (out_V_data_0_V1_status == 1'b0)) & (exitcond_fu_216_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_fu_216_p2 == 1'd1) & (out_V_data_0_V1_status == 1'b0)) & (exitcond_fu_216_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (~((exitcond_fu_216_p2 == 1'd1) & (out_V_data_0_V1_status == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        bram_V_ce0 = 1'b1;
    end else begin
        bram_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        bram_V_we0 = mask_fu_492_p2;
    end else begin
        bram_V_we0 = 4'd0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_196_p0 = tmp_7_reg_605;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_196_p0 = tmp_7_fu_242_p3;
    end else begin
        grp_fu_196_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_196_p1 = tmp_8_reg_612;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_196_p1 = tmp_8_fu_251_p2;
    end else begin
        grp_fu_196_p1 = 'bx;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (in_V_data_0_V0_status == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_V_data_0_V0_update = 1'b1;
    end else begin
        in_V_data_0_V0_update = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        in_V_data_0_V_blk_n = in_V_data_0_V_empty_n;
    end else begin
        in_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        in_V_data_1_V_blk_n = in_V_data_1_V_empty_n;
    end else begin
        in_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        in_V_data_2_V_blk_n = in_V_data_2_V_empty_n;
    end else begin
        in_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        in_V_data_3_V_blk_n = in_V_data_3_V_empty_n;
    end else begin
        in_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((exitcond_fu_216_p2 == 1'd1) & (out_V_data_0_V1_status == 1'b0)) & (exitcond_fu_216_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        out_V_data_0_V1_update = 1'b1;
    end else begin
        out_V_data_0_V1_update = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_216_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        out_V_data_0_V_blk_n = out_V_data_0_V_full_n;
    end else begin
        out_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_fu_216_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        out_V_data_1_V_blk_n = out_V_data_1_V_full_n;
    end else begin
        out_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_fu_216_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        out_V_data_2_V_blk_n = out_V_data_2_V_full_n;
    end else begin
        out_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_fu_216_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        out_V_data_3_V_blk_n = out_V_data_3_V_full_n;
    end else begin
        out_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (in_V_data_0_V0_status == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((exitcond_fu_216_p2 == 1'd1) & (out_V_data_0_V1_status == 1'b0)) & (exitcond_fu_216_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((exitcond_fu_216_p2 == 1'd1) & (out_V_data_0_V1_status == 1'b0)) & (exitcond_fu_216_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (in_V_data_0_V0_status == 1'b0));
end

always @ (*) begin
    ap_block_state2 = ((exitcond_fu_216_p2 == 1'd1) & (out_V_data_0_V1_status == 1'b0));
end

assign bram_V_address0 = 64'd0;

assign bram_V_d0 = (tmp_42_fu_457_p3 & p_demorgan1_fu_476_p2);

assign c_V_fu_222_p2 = (p_s_reg_185 + 3'd1);

assign exitcond_fu_216_p2 = ((p_s_reg_185 == 3'd4) ? 1'b1 : 1'b0);

assign grp_fu_196_p2 = ((grp_fu_196_p0 > grp_fu_196_p1) ? 1'b1 : 1'b0);

assign in_V_data_0_V0_status = (in_V_data_3_V_empty_n & in_V_data_2_V_empty_n & in_V_data_1_V_empty_n & in_V_data_0_V_empty_n);

assign in_V_data_0_V_read = in_V_data_0_V0_update;

assign in_V_data_1_V_read = in_V_data_0_V0_update;

assign in_V_data_2_V_read = in_V_data_0_V0_update;

assign in_V_data_3_V_read = in_V_data_0_V0_update;

assign mask_fu_492_p2 = 4'd1 << tmp_46_fu_489_p1;

assign out_V_data_0_V1_status = (out_V_data_3_V_full_n & out_V_data_2_V_full_n & out_V_data_1_V_full_n & out_V_data_0_V_full_n);

assign out_V_data_0_V_din = tmp_data_0_V_1_reg_172;

assign out_V_data_0_V_write = out_V_data_0_V1_update;

assign out_V_data_1_V_din = tmp_data_1_V_1_reg_159;

assign out_V_data_1_V_write = out_V_data_0_V1_update;

assign out_V_data_2_V_din = tmp_data_2_V_1_reg_146;

assign out_V_data_2_V_write = out_V_data_0_V1_update;

assign out_V_data_3_V_din = tmp_data_3_V_1_reg_133;

assign out_V_data_3_V_write = out_V_data_0_V1_update;

assign p_demorgan1_fu_476_p2 = (tmp_44_fu_470_p2 & tmp_43_fu_464_p2);

assign p_demorgan_fu_357_p2 = (tmp_23_fu_351_p2 & tmp_22_fu_345_p2);

assign tmp_10_fu_270_p1 = tmp_reg_599;

assign tmp_11_fu_273_p2 = (tmp_6_fu_264_p1 ^ 6'd31);

assign tmp_12_fu_279_p3 = ((grp_fu_196_p2[0:0] === 1'b1) ? tmp_6_fu_264_p1 : tmp_9_fu_267_p1);

assign tmp_13_fu_287_p3 = ((grp_fu_196_p2[0:0] === 1'b1) ? tmp_9_fu_267_p1 : tmp_6_fu_264_p1);

assign tmp_14_fu_295_p3 = ((grp_fu_196_p2[0:0] === 1'b1) ? tmp_11_fu_273_p2 : tmp_6_fu_264_p1);

assign tmp_15_fu_303_p2 = (tmp_12_fu_279_p3 ^ 6'd31);

assign tmp_16_fu_309_p1 = tmp_14_fu_295_p3;

assign tmp_17_fu_313_p1 = tmp_13_fu_287_p3;

assign tmp_18_fu_317_p1 = tmp_15_fu_303_p2;

assign tmp_19_fu_321_p2 = tmp_10_fu_270_p1 << tmp_16_fu_309_p1;

assign tmp_1_fu_228_p1 = p_s_reg_185[1:0];

integer ap_tvar_int_0;

always @ (tmp_19_fu_321_p2) begin
    for (ap_tvar_int_0 = 32 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 31 - 0) begin
            tmp_20_fu_327_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_20_fu_327_p4[ap_tvar_int_0] = tmp_19_fu_321_p2[31 - ap_tvar_int_0];
        end
    end
end

assign tmp_21_fu_337_p3 = ((grp_fu_196_p2[0:0] === 1'b1) ? tmp_20_fu_327_p4 : tmp_19_fu_321_p2);

assign tmp_22_fu_345_p2 = 32'd4294967295 << tmp_17_fu_313_p1;

assign tmp_23_fu_351_p2 = 32'd4294967295 >> tmp_18_fu_317_p1;

assign tmp_24_fu_363_p2 = (p_demorgan_fu_357_p2 ^ 32'd4294967295);

assign tmp_25_fu_369_p2 = (tmp_24_fu_363_p2 & bram_V_q0);

assign tmp_26_fu_375_p2 = (tmp_21_fu_337_p3 & p_demorgan_fu_357_p2);

assign tmp_27_fu_381_p2 = (tmp_26_fu_375_p2 | tmp_25_fu_369_p2);

assign tmp_29_fu_387_p1 = tmp_7_reg_605;

assign tmp_2_fu_503_p4 = {{tmp_27_fu_381_p2[15:8]}};

assign tmp_30_fu_390_p1 = tmp_8_reg_612;

assign tmp_31_fu_393_p1 = tmp_reg_599;

assign tmp_32_fu_396_p2 = (tmp_29_fu_387_p1 ^ 6'd31);

assign tmp_33_fu_402_p3 = ((tmp_28_reg_619[0:0] === 1'b1) ? tmp_29_fu_387_p1 : tmp_30_fu_390_p1);

assign tmp_34_fu_409_p3 = ((tmp_28_reg_619[0:0] === 1'b1) ? tmp_30_fu_390_p1 : tmp_29_fu_387_p1);

assign tmp_35_fu_416_p3 = ((tmp_28_reg_619[0:0] === 1'b1) ? tmp_32_fu_396_p2 : tmp_29_fu_387_p1);

assign tmp_36_fu_423_p2 = (tmp_33_fu_402_p3 ^ 6'd31);

assign tmp_37_fu_429_p1 = tmp_35_fu_416_p3;

assign tmp_38_fu_433_p1 = tmp_34_fu_409_p3;

assign tmp_39_fu_437_p1 = tmp_36_fu_423_p2;

assign tmp_3_fu_513_p4 = {{tmp_27_fu_381_p2[23:16]}};

assign tmp_40_fu_441_p2 = tmp_31_fu_393_p1 << tmp_37_fu_429_p1;

integer ap_tvar_int_1;

always @ (tmp_40_fu_441_p2) begin
    for (ap_tvar_int_1 = 32 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 31 - 0) begin
            tmp_41_fu_447_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_41_fu_447_p4[ap_tvar_int_1] = tmp_40_fu_441_p2[31 - ap_tvar_int_1];
        end
    end
end

assign tmp_42_fu_457_p3 = ((tmp_28_reg_619[0:0] === 1'b1) ? tmp_41_fu_447_p4 : tmp_40_fu_441_p2);

assign tmp_43_fu_464_p2 = 32'd4294967295 << tmp_38_fu_433_p1;

assign tmp_44_fu_470_p2 = 32'd4294967295 >> tmp_39_fu_437_p1;

assign tmp_46_fu_489_p1 = tmp_1_reg_594;

assign tmp_47_fu_499_p1 = tmp_27_fu_381_p2[7:0];

assign tmp_4_fu_523_p4 = {{tmp_27_fu_381_p2[31:24]}};

assign tmp_6_fu_264_p1 = tmp_7_reg_605;

assign tmp_7_fu_242_p3 = {{tmp_1_fu_228_p1}, {3'd0}};

assign tmp_8_fu_251_p2 = (tmp_7_fu_242_p3 | 5'd7);

assign tmp_9_fu_267_p1 = tmp_8_reg_612;

assign tmp_data_0_V_2_be_fu_554_p3 = ((tmp_s_reg_627[0:0] === 1'b1) ? tmp_47_fu_499_p1 : tmp_data_0_V_1_reg_172);

assign tmp_data_1_V_2_be_fu_547_p3 = ((tmp_s_reg_627[0:0] === 1'b1) ? tmp_2_fu_503_p4 : tmp_data_1_V_1_reg_159);

assign tmp_data_2_V_2_be_fu_540_p3 = ((tmp_s_reg_627[0:0] === 1'b1) ? tmp_3_fu_513_p4 : tmp_data_2_V_1_reg_146);

assign tmp_data_3_V_2_be_fu_533_p3 = ((tmp_s_reg_627[0:0] === 1'b1) ? tmp_4_fu_523_p4 : tmp_data_3_V_1_reg_133);

assign tmp_s_fu_258_p2 = ((c_V_fu_222_p2 == 3'd4) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    tmp_7_reg_605[2:0] <= 3'b000;
    tmp_8_reg_612[2:0] <= 3'b111;
end

endmodule //a5b
