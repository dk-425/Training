// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module crc24a_crc24a_Pipeline_VITIS_LOOP_55_5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        mux_case_01730_reload,
        conv3_i_14921733_reload,
        conv3_i_15061736_reload,
        conv3_i_15201739_reload,
        conv3_i_15341742_reload,
        conv3_i_15481745_reload,
        conv3_i_65891748_reload,
        lhs_V_1_reload,
        mux_case_84881754_reload,
        mux_case_95811757_reload,
        mux_case_105821760_reload,
        mux_case_115831763_reload,
        lhs_V_2_reload,
        lhs_V_3_reload,
        mux_case_146821772_reload,
        mux_case_157771775_reload,
        lhs_V_4_reload,
        mux_case_177791781_reload,
        mux_case_188741784_reload,
        lhs_V_5_reload,
        lhs_V_6_reload,
        mux_case_219731793_reload,
        mux_case_2210681796_reload,
        lhs_V_7_reload,
        lhs_V_8_reload,
        lhs_V_9_reload,
        lhs_V_10_reload,
        lhs_V_11_reload,
        mux_case_2814581814_reload,
        lhs_V_12_reload,
        lhs_V_13_reload,
        mux_case_3143416521823_reload,
        startIdx_out,
        startIdx_out_ap_vld,
        icmp_ln55_out,
        icmp_ln55_out_ap_vld,
        ap_return
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [0:0] mux_case_01730_reload;
input  [0:0] conv3_i_14921733_reload;
input  [0:0] conv3_i_15061736_reload;
input  [0:0] conv3_i_15201739_reload;
input  [0:0] conv3_i_15341742_reload;
input  [0:0] conv3_i_15481745_reload;
input  [0:0] conv3_i_65891748_reload;
input  [0:0] lhs_V_1_reload;
input  [0:0] mux_case_84881754_reload;
input  [0:0] mux_case_95811757_reload;
input  [0:0] mux_case_105821760_reload;
input  [0:0] mux_case_115831763_reload;
input  [0:0] lhs_V_2_reload;
input  [0:0] lhs_V_3_reload;
input  [0:0] mux_case_146821772_reload;
input  [0:0] mux_case_157771775_reload;
input  [0:0] lhs_V_4_reload;
input  [0:0] mux_case_177791781_reload;
input  [0:0] mux_case_188741784_reload;
input  [0:0] lhs_V_5_reload;
input  [0:0] lhs_V_6_reload;
input  [0:0] mux_case_219731793_reload;
input  [0:0] mux_case_2210681796_reload;
input  [0:0] lhs_V_7_reload;
input  [0:0] lhs_V_8_reload;
input  [0:0] lhs_V_9_reload;
input  [0:0] lhs_V_10_reload;
input  [0:0] lhs_V_11_reload;
input  [0:0] mux_case_2814581814_reload;
input  [0:0] lhs_V_12_reload;
input  [0:0] lhs_V_13_reload;
input  [0:0] mux_case_3143416521823_reload;
output  [4:0] startIdx_out;
output   startIdx_out_ap_vld;
output  [0:0] icmp_ln55_out;
output   icmp_ln55_out_ap_vld;
output  [0:0] ap_return;

reg ap_idle;
reg startIdx_out_ap_vld;
reg[0:0] icmp_ln55_out;
reg icmp_ln55_out_ap_vld;
reg[0:0] ap_return;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] tmp_8_fu_354_p34;
wire   [0:0] icmp_ln55_fu_342_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [0:0] ap_phi_mux_UnifiedRetVal_phi_fu_321_p4;
reg   [5:0] startIdx_fu_106;
wire   [5:0] add_ln57_fu_348_p2;
wire    ap_loop_init;
reg   [5:0] ap_sig_allocacmp_startIdx_1;
wire   [4:0] trunc_ln55_fu_337_p1;
reg   [0:0] ap_return_preg;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_return_preg = 1'd0;
#0 ap_done_reg = 1'b0;
end

crc24a_mux_325_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 1 ),
    .din5_WIDTH( 1 ),
    .din6_WIDTH( 1 ),
    .din7_WIDTH( 1 ),
    .din8_WIDTH( 1 ),
    .din9_WIDTH( 1 ),
    .din10_WIDTH( 1 ),
    .din11_WIDTH( 1 ),
    .din12_WIDTH( 1 ),
    .din13_WIDTH( 1 ),
    .din14_WIDTH( 1 ),
    .din15_WIDTH( 1 ),
    .din16_WIDTH( 1 ),
    .din17_WIDTH( 1 ),
    .din18_WIDTH( 1 ),
    .din19_WIDTH( 1 ),
    .din20_WIDTH( 1 ),
    .din21_WIDTH( 1 ),
    .din22_WIDTH( 1 ),
    .din23_WIDTH( 1 ),
    .din24_WIDTH( 1 ),
    .din25_WIDTH( 1 ),
    .din26_WIDTH( 1 ),
    .din27_WIDTH( 1 ),
    .din28_WIDTH( 1 ),
    .din29_WIDTH( 1 ),
    .din30_WIDTH( 1 ),
    .din31_WIDTH( 1 ),
    .din32_WIDTH( 5 ),
    .dout_WIDTH( 1 ))
mux_325_1_1_1_U100(
    .din0(mux_case_01730_reload),
    .din1(conv3_i_14921733_reload),
    .din2(conv3_i_15061736_reload),
    .din3(conv3_i_15201739_reload),
    .din4(conv3_i_15341742_reload),
    .din5(conv3_i_15481745_reload),
    .din6(conv3_i_65891748_reload),
    .din7(lhs_V_1_reload),
    .din8(mux_case_84881754_reload),
    .din9(mux_case_95811757_reload),
    .din10(mux_case_105821760_reload),
    .din11(mux_case_115831763_reload),
    .din12(lhs_V_2_reload),
    .din13(lhs_V_3_reload),
    .din14(mux_case_146821772_reload),
    .din15(mux_case_157771775_reload),
    .din16(lhs_V_4_reload),
    .din17(mux_case_177791781_reload),
    .din18(mux_case_188741784_reload),
    .din19(lhs_V_5_reload),
    .din20(lhs_V_6_reload),
    .din21(mux_case_219731793_reload),
    .din22(mux_case_2210681796_reload),
    .din23(lhs_V_7_reload),
    .din24(lhs_V_8_reload),
    .din25(lhs_V_9_reload),
    .din26(lhs_V_10_reload),
    .din27(lhs_V_11_reload),
    .din28(mux_case_2814581814_reload),
    .din29(lhs_V_12_reload),
    .din30(lhs_V_13_reload),
    .din31(mux_case_3143416521823_reload),
    .din32(trunc_ln55_fu_337_p1),
    .dout(tmp_8_fu_354_p34)
);

crc24a_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 1'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1) & ((icmp_ln55_fu_342_p2 == 1'd1) | (tmp_8_fu_354_p34 == 1'd1)))) begin
            ap_return_preg <= ap_phi_mux_UnifiedRetVal_phi_fu_321_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        if (((icmp_ln55_fu_342_p2 == 1'd0) & (tmp_8_fu_354_p34 == 1'd0))) begin
            startIdx_fu_106 <= add_ln57_fu_348_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            startIdx_fu_106 <= 6'd0;
        end
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1) & ((icmp_ln55_fu_342_p2 == 1'd1) | (tmp_8_fu_354_p34 == 1'd1)))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if (((icmp_ln55_fu_342_p2 == 1'd0) & (tmp_8_fu_354_p34 == 1'd1))) begin
            ap_phi_mux_UnifiedRetVal_phi_fu_321_p4 = 1'd0;
        end else if ((icmp_ln55_fu_342_p2 == 1'd1)) begin
            ap_phi_mux_UnifiedRetVal_phi_fu_321_p4 = 1'd1;
        end else begin
            ap_phi_mux_UnifiedRetVal_phi_fu_321_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_UnifiedRetVal_phi_fu_321_p4 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1) & ((icmp_ln55_fu_342_p2 == 1'd1) | (tmp_8_fu_354_p34 == 1'd1)))) begin
        ap_return = ap_phi_mux_UnifiedRetVal_phi_fu_321_p4;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_startIdx_1 = 6'd0;
    end else begin
        ap_sig_allocacmp_startIdx_1 = startIdx_fu_106;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        if ((icmp_ln55_fu_342_p2 == 1'd1)) begin
            icmp_ln55_out = 1'd1;
        end else if (((icmp_ln55_fu_342_p2 == 1'd0) & (tmp_8_fu_354_p34 == 1'd1))) begin
            icmp_ln55_out = 1'd0;
        end else begin
            icmp_ln55_out = 'bx;
        end
    end else begin
        icmp_ln55_out = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln55_fu_342_p2 == 1'd0) & (tmp_8_fu_354_p34 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)) | ((icmp_ln55_fu_342_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)))) begin
        icmp_ln55_out_ap_vld = 1'b1;
    end else begin
        icmp_ln55_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln55_fu_342_p2 == 1'd0) & (tmp_8_fu_354_p34 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)) | ((icmp_ln55_fu_342_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)))) begin
        startIdx_out_ap_vld = 1'b1;
    end else begin
        startIdx_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln57_fu_348_p2 = (ap_sig_allocacmp_startIdx_1 + 6'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln55_fu_342_p2 = ((ap_sig_allocacmp_startIdx_1 == 6'd32) ? 1'b1 : 1'b0);

assign startIdx_out = trunc_ln55_fu_337_p1;

assign trunc_ln55_fu_337_p1 = ap_sig_allocacmp_startIdx_1[4:0];

endmodule //crc24a_crc24a_Pipeline_VITIS_LOOP_55_5
