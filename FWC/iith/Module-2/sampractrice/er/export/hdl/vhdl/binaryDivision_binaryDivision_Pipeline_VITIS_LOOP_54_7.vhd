-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity binaryDivision_binaryDivision_Pipeline_VITIS_LOOP_54_7 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    startIdx_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    dividend_97_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    dividend_98_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    dividend_99_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    dividend_100_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    dividend_101_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    dividend_102_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    dividend_103_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    dividend_104_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    dividend_105_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    dividend_106_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    dividend_107_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    dividend_108_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    dividend_109_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    dividend_110_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    dividend_111_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    dividend_112_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    dividend_113_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    dividend_114_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    dividend_115_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    dividend_116_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    dividend_117_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    dividend_118_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    dividend_119_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    dividend_120_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    dividend_121_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    dividend_122_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    dividend_123_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    dividend_124_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    dividend_125_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    dividend_126_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    dividend_127_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    dividend_128_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    dividend_129_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    dividend_130_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    dividend_131_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    dividend_132_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    dividend_133_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    dividend_134_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    dividend_135_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    dividend_136_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    dividend_137_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    dividend_138_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    dividend_139_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    dividend_140_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    dividend_141_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    dividend_142_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    dividend_143_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    dividend_144_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    p_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    p_ce0 : OUT STD_LOGIC;
    p_we0 : OUT STD_LOGIC;
    p_d0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of binaryDivision_binaryDivision_Pipeline_VITIS_LOOP_54_7 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln54_fu_449_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal i_2_reg_589 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_3_fu_471_p50 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_597 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln54_fu_578_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_fu_130 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln54_fu_455_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln56_fu_461_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_471_p49 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component binaryDivision_mux_486_1_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        din31_WIDTH : INTEGER;
        din32_WIDTH : INTEGER;
        din33_WIDTH : INTEGER;
        din34_WIDTH : INTEGER;
        din35_WIDTH : INTEGER;
        din36_WIDTH : INTEGER;
        din37_WIDTH : INTEGER;
        din38_WIDTH : INTEGER;
        din39_WIDTH : INTEGER;
        din40_WIDTH : INTEGER;
        din41_WIDTH : INTEGER;
        din42_WIDTH : INTEGER;
        din43_WIDTH : INTEGER;
        din44_WIDTH : INTEGER;
        din45_WIDTH : INTEGER;
        din46_WIDTH : INTEGER;
        din47_WIDTH : INTEGER;
        din48_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        din8 : IN STD_LOGIC_VECTOR (0 downto 0);
        din9 : IN STD_LOGIC_VECTOR (0 downto 0);
        din10 : IN STD_LOGIC_VECTOR (0 downto 0);
        din11 : IN STD_LOGIC_VECTOR (0 downto 0);
        din12 : IN STD_LOGIC_VECTOR (0 downto 0);
        din13 : IN STD_LOGIC_VECTOR (0 downto 0);
        din14 : IN STD_LOGIC_VECTOR (0 downto 0);
        din15 : IN STD_LOGIC_VECTOR (0 downto 0);
        din16 : IN STD_LOGIC_VECTOR (0 downto 0);
        din17 : IN STD_LOGIC_VECTOR (0 downto 0);
        din18 : IN STD_LOGIC_VECTOR (0 downto 0);
        din19 : IN STD_LOGIC_VECTOR (0 downto 0);
        din20 : IN STD_LOGIC_VECTOR (0 downto 0);
        din21 : IN STD_LOGIC_VECTOR (0 downto 0);
        din22 : IN STD_LOGIC_VECTOR (0 downto 0);
        din23 : IN STD_LOGIC_VECTOR (0 downto 0);
        din24 : IN STD_LOGIC_VECTOR (0 downto 0);
        din25 : IN STD_LOGIC_VECTOR (0 downto 0);
        din26 : IN STD_LOGIC_VECTOR (0 downto 0);
        din27 : IN STD_LOGIC_VECTOR (0 downto 0);
        din28 : IN STD_LOGIC_VECTOR (0 downto 0);
        din29 : IN STD_LOGIC_VECTOR (0 downto 0);
        din30 : IN STD_LOGIC_VECTOR (0 downto 0);
        din31 : IN STD_LOGIC_VECTOR (0 downto 0);
        din32 : IN STD_LOGIC_VECTOR (0 downto 0);
        din33 : IN STD_LOGIC_VECTOR (0 downto 0);
        din34 : IN STD_LOGIC_VECTOR (0 downto 0);
        din35 : IN STD_LOGIC_VECTOR (0 downto 0);
        din36 : IN STD_LOGIC_VECTOR (0 downto 0);
        din37 : IN STD_LOGIC_VECTOR (0 downto 0);
        din38 : IN STD_LOGIC_VECTOR (0 downto 0);
        din39 : IN STD_LOGIC_VECTOR (0 downto 0);
        din40 : IN STD_LOGIC_VECTOR (0 downto 0);
        din41 : IN STD_LOGIC_VECTOR (0 downto 0);
        din42 : IN STD_LOGIC_VECTOR (0 downto 0);
        din43 : IN STD_LOGIC_VECTOR (0 downto 0);
        din44 : IN STD_LOGIC_VECTOR (0 downto 0);
        din45 : IN STD_LOGIC_VECTOR (0 downto 0);
        din46 : IN STD_LOGIC_VECTOR (0 downto 0);
        din47 : IN STD_LOGIC_VECTOR (0 downto 0);
        din48 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component binaryDivision_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_486_1_1_1_U226 : component binaryDivision_mux_486_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 1,
        din10_WIDTH => 1,
        din11_WIDTH => 1,
        din12_WIDTH => 1,
        din13_WIDTH => 1,
        din14_WIDTH => 1,
        din15_WIDTH => 1,
        din16_WIDTH => 1,
        din17_WIDTH => 1,
        din18_WIDTH => 1,
        din19_WIDTH => 1,
        din20_WIDTH => 1,
        din21_WIDTH => 1,
        din22_WIDTH => 1,
        din23_WIDTH => 1,
        din24_WIDTH => 1,
        din25_WIDTH => 1,
        din26_WIDTH => 1,
        din27_WIDTH => 1,
        din28_WIDTH => 1,
        din29_WIDTH => 1,
        din30_WIDTH => 1,
        din31_WIDTH => 1,
        din32_WIDTH => 1,
        din33_WIDTH => 1,
        din34_WIDTH => 1,
        din35_WIDTH => 1,
        din36_WIDTH => 1,
        din37_WIDTH => 1,
        din38_WIDTH => 1,
        din39_WIDTH => 1,
        din40_WIDTH => 1,
        din41_WIDTH => 1,
        din42_WIDTH => 1,
        din43_WIDTH => 1,
        din44_WIDTH => 1,
        din45_WIDTH => 1,
        din46_WIDTH => 1,
        din47_WIDTH => 1,
        din48_WIDTH => 6,
        dout_WIDTH => 1)
    port map (
        din0 => dividend_97_reload,
        din1 => dividend_98_reload,
        din2 => dividend_99_reload,
        din3 => dividend_100_reload,
        din4 => dividend_101_reload,
        din5 => dividend_102_reload,
        din6 => dividend_103_reload,
        din7 => dividend_104_reload,
        din8 => dividend_105_reload,
        din9 => dividend_106_reload,
        din10 => dividend_107_reload,
        din11 => dividend_108_reload,
        din12 => dividend_109_reload,
        din13 => dividend_110_reload,
        din14 => dividend_111_reload,
        din15 => dividend_112_reload,
        din16 => dividend_113_reload,
        din17 => dividend_114_reload,
        din18 => dividend_115_reload,
        din19 => dividend_116_reload,
        din20 => dividend_117_reload,
        din21 => dividend_118_reload,
        din22 => dividend_119_reload,
        din23 => dividend_120_reload,
        din24 => dividend_121_reload,
        din25 => dividend_122_reload,
        din26 => dividend_123_reload,
        din27 => dividend_124_reload,
        din28 => dividend_125_reload,
        din29 => dividend_126_reload,
        din30 => dividend_127_reload,
        din31 => dividend_128_reload,
        din32 => dividend_129_reload,
        din33 => dividend_130_reload,
        din34 => dividend_131_reload,
        din35 => dividend_132_reload,
        din36 => dividend_133_reload,
        din37 => dividend_134_reload,
        din38 => dividend_135_reload,
        din39 => dividend_136_reload,
        din40 => dividend_137_reload,
        din41 => dividend_138_reload,
        din42 => dividend_139_reload,
        din43 => dividend_140_reload,
        din44 => dividend_141_reload,
        din45 => dividend_142_reload,
        din46 => dividend_143_reload,
        din47 => dividend_144_reload,
        din48 => tmp_3_fu_471_p49,
        dout => tmp_3_fu_471_p50);

    flow_control_loop_pipe_sequential_init_U : component binaryDivision_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    i_fu_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln54_fu_449_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_130 <= add_ln54_fu_455_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_130 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_2_reg_589 <= ap_sig_allocacmp_i_2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_fu_449_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_3_reg_597 <= tmp_3_fu_471_p50;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln54_fu_455_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_2) + unsigned(ap_const_lv5_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln54_fu_449_p2)
    begin
        if (((icmp_ln54_fu_449_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_130, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_2 <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_i_2 <= i_fu_130;
        end if; 
    end process;

    icmp_ln54_fu_449_p2 <= "1" when (ap_sig_allocacmp_i_2 = ap_const_lv5_18) else "0";
    p_address0 <= zext_ln54_fu_578_p1(5 - 1 downto 0);

    p_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_ce0 <= ap_const_logic_1;
        else 
            p_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_d0 <= tmp_3_reg_597;

    p_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_we0 <= ap_const_logic_1;
        else 
            p_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_3_fu_471_p49 <= std_logic_vector(unsigned(zext_ln56_fu_461_p1) + unsigned(startIdx_reload));
    zext_ln54_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_589),64));
    zext_ln56_fu_461_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_2),6));
end behav;
