// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
// Version: 2022.2.2
// Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module crc24a_crc24a_Pipeline_VITIS_LOOP_82_8 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        f_V_8_reload,
        f_V_9_reload,
        f_V_10_reload,
        f_V_11_reload,
        f_V_12_reload,
        f_V_13_reload,
        f_V_14_reload,
        f_V_15_reload,
        lk_V_1_out,
        lk_V_1_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [0:0] f_V_8_reload;
input  [0:0] f_V_9_reload;
input  [0:0] f_V_10_reload;
input  [0:0] f_V_11_reload;
input  [0:0] f_V_12_reload;
input  [0:0] f_V_13_reload;
input  [0:0] f_V_14_reload;
input  [0:0] f_V_15_reload;
output  [7:0] lk_V_1_out;
output   lk_V_1_out_ap_vld;

reg ap_idle;
reg lk_V_1_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln82_fu_121_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [7:0] p_Val2_s_fu_50;
reg   [7:0] p_Result_s_fu_180_p4;
reg   [4:0] i_fu_54;
wire   [4:0] i_4_fu_190_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_i_3;
wire   [2:0] trunc_ln82_fu_130_p1;
wire   [3:0] tmp_4_fu_142_p17;
wire   [31:0] zext_ln186_fu_134_p1;
wire   [0:0] tmp_4_fu_142_p18;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

crc24a_mux_164_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 1 ),
    .din5_WIDTH( 1 ),
    .din6_WIDTH( 1 ),
    .din7_WIDTH( 1 ),
    .din8_WIDTH( 1 ),
    .din9_WIDTH( 1 ),
    .din10_WIDTH( 1 ),
    .din11_WIDTH( 1 ),
    .din12_WIDTH( 1 ),
    .din13_WIDTH( 1 ),
    .din14_WIDTH( 1 ),
    .din15_WIDTH( 1 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 1 ))
mux_164_1_1_1_U205(
    .din0(1'd0),
    .din1(1'd0),
    .din2(1'd0),
    .din3(1'd0),
    .din4(1'd0),
    .din5(1'd0),
    .din6(1'd0),
    .din7(1'd0),
    .din8(f_V_8_reload),
    .din9(f_V_9_reload),
    .din10(f_V_10_reload),
    .din11(f_V_11_reload),
    .din12(f_V_12_reload),
    .din13(f_V_13_reload),
    .din14(f_V_14_reload),
    .din15(f_V_15_reload),
    .din16(tmp_4_fu_142_p17),
    .dout(tmp_4_fu_142_p18)
);

crc24a_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        if ((icmp_ln82_fu_121_p2 == 1'd0)) begin
            i_fu_54 <= i_4_fu_190_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_54 <= 5'd8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln82_fu_121_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        p_Val2_s_fu_50 <= p_Result_s_fu_180_p4;
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln82_fu_121_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i_3 = 5'd8;
    end else begin
        ap_sig_allocacmp_i_3 = i_fu_54;
    end
end

always @ (*) begin
    if (((icmp_ln82_fu_121_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        lk_V_1_out_ap_vld = 1'b1;
    end else begin
        lk_V_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_4_fu_190_p2 = (ap_sig_allocacmp_i_3 + 5'd1);

assign icmp_ln82_fu_121_p2 = ((ap_sig_allocacmp_i_3 == 5'd16) ? 1'b1 : 1'b0);

assign lk_V_1_out = p_Val2_s_fu_50;

always @ (*) begin
    p_Result_s_fu_180_p4 = p_Val2_s_fu_50;
    p_Result_s_fu_180_p4[zext_ln186_fu_134_p1] = |(tmp_4_fu_142_p18);
end

assign tmp_4_fu_142_p17 = ap_sig_allocacmp_i_3[3:0];

assign trunc_ln82_fu_130_p1 = ap_sig_allocacmp_i_3[2:0];

assign zext_ln186_fu_134_p1 = trunc_ln82_fu_130_p1;

endmodule //crc24a_crc24a_Pipeline_VITIS_LOOP_82_8
