// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="cal,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=4.170000,HLS_SYN_LAT=13,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=560,HLS_SYN_LUT=584,HLS_VERSION=2018_3}" *)

module cal (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        d_V_TREADY,
        a_V_TDATA,
        a_V_TVALID,
        a_V_TREADY,
        b_V_TDATA,
        b_V_TVALID,
        b_V_TREADY,
        c_V_TDATA,
        c_V_TVALID,
        c_V_TREADY,
        d_V_TDATA,
        d_V_TVALID
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   d_V_TREADY;
input  [7:0] a_V_TDATA;
input   a_V_TVALID;
output   a_V_TREADY;
input  [7:0] b_V_TDATA;
input   b_V_TVALID;
output   b_V_TREADY;
input  [7:0] c_V_TDATA;
input   c_V_TVALID;
output   c_V_TREADY;
output  [15:0] d_V_TDATA;
output   d_V_TVALID;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_idle_pp0;
wire    c_V_0_vld_out;
wire    b_V_0_vld_out;
wire    a_V_0_vld_out;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    d_V_1_ack_in;
reg   [2:0] tmp_reg_190;
reg   [2:0] tmp_reg_190_pp0_iter11_reg;
reg    ap_block_state13_io;
reg    ap_block_state14_pp0_stage0_iter13;
reg   [2:0] tmp_reg_190_pp0_iter12_reg;
reg    ap_block_state14_io;
reg    ap_block_pp0_stage0_11001;
reg   [7:0] a_V_0_data_out;
wire    a_V_0_vld_in;
wire    a_V_0_ack_in;
reg    a_V_0_ack_out;
reg   [7:0] a_V_0_payload_A;
reg   [7:0] a_V_0_payload_B;
reg    a_V_0_sel_rd;
reg    a_V_0_sel_wr;
wire    a_V_0_sel;
wire    a_V_0_load_A;
wire    a_V_0_load_B;
reg   [1:0] a_V_0_state;
wire    a_V_0_state_cmp_full;
reg  signed [7:0] b_V_0_data_out;
wire    b_V_0_vld_in;
wire    b_V_0_ack_in;
reg    b_V_0_ack_out;
reg   [7:0] b_V_0_payload_A;
reg   [7:0] b_V_0_payload_B;
reg    b_V_0_sel_rd;
reg    b_V_0_sel_wr;
wire    b_V_0_sel;
wire    b_V_0_load_A;
wire    b_V_0_load_B;
reg   [1:0] b_V_0_state;
wire    b_V_0_state_cmp_full;
reg   [7:0] c_V_0_data_out;
wire    c_V_0_vld_in;
wire    c_V_0_ack_in;
reg    c_V_0_ack_out;
reg   [7:0] c_V_0_payload_A;
reg   [7:0] c_V_0_payload_B;
reg    c_V_0_sel_rd;
reg    c_V_0_sel_wr;
wire    c_V_0_sel;
wire    c_V_0_load_A;
wire    c_V_0_load_B;
reg   [1:0] c_V_0_state;
wire    c_V_0_state_cmp_full;
reg   [15:0] d_V_1_data_in;
reg   [15:0] d_V_1_data_out;
reg    d_V_1_vld_in;
wire    d_V_1_vld_out;
wire    d_V_1_ack_out;
reg   [15:0] d_V_1_payload_A;
reg   [15:0] d_V_1_payload_B;
reg    d_V_1_sel_rd;
reg    d_V_1_sel_wr;
wire    d_V_1_sel;
wire    d_V_1_load_A;
wire    d_V_1_load_B;
reg   [1:0] d_V_1_state;
wire    d_V_1_state_cmp_full;
reg    a_V_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    b_V_TDATA_blk_n;
reg    c_V_TDATA_blk_n;
reg    d_V_TDATA_blk_n;
reg  signed [7:0] b_V_read_reg_170;
reg  signed [7:0] b_V_read_reg_170_pp0_iter1_reg;
reg  signed [7:0] b_V_read_reg_170_pp0_iter2_reg;
reg  signed [7:0] b_V_read_reg_170_pp0_iter3_reg;
reg  signed [7:0] b_V_read_reg_170_pp0_iter4_reg;
reg  signed [7:0] b_V_read_reg_170_pp0_iter5_reg;
reg  signed [7:0] b_V_read_reg_170_pp0_iter6_reg;
reg  signed [7:0] b_V_read_reg_170_pp0_iter7_reg;
reg  signed [7:0] b_V_read_reg_170_pp0_iter8_reg;
reg  signed [7:0] b_V_read_reg_170_pp0_iter9_reg;
reg  signed [7:0] b_V_read_reg_170_pp0_iter10_reg;
reg  signed [7:0] b_V_read_reg_170_pp0_iter11_reg;
reg  signed [7:0] a_V_read_reg_180;
reg  signed [7:0] a_V_read_reg_180_pp0_iter1_reg;
reg  signed [7:0] a_V_read_reg_180_pp0_iter2_reg;
reg  signed [7:0] a_V_read_reg_180_pp0_iter3_reg;
reg  signed [7:0] a_V_read_reg_180_pp0_iter4_reg;
reg  signed [7:0] a_V_read_reg_180_pp0_iter5_reg;
reg  signed [7:0] a_V_read_reg_180_pp0_iter6_reg;
reg  signed [7:0] a_V_read_reg_180_pp0_iter7_reg;
reg  signed [7:0] a_V_read_reg_180_pp0_iter8_reg;
reg  signed [7:0] a_V_read_reg_180_pp0_iter9_reg;
reg  signed [7:0] a_V_read_reg_180_pp0_iter10_reg;
reg  signed [7:0] a_V_read_reg_180_pp0_iter11_reg;
wire   [2:0] tmp_fu_73_p1;
reg   [2:0] tmp_reg_190_pp0_iter1_reg;
reg   [2:0] tmp_reg_190_pp0_iter2_reg;
reg   [2:0] tmp_reg_190_pp0_iter3_reg;
reg   [2:0] tmp_reg_190_pp0_iter4_reg;
reg   [2:0] tmp_reg_190_pp0_iter5_reg;
reg   [2:0] tmp_reg_190_pp0_iter6_reg;
reg   [2:0] tmp_reg_190_pp0_iter7_reg;
reg   [2:0] tmp_reg_190_pp0_iter8_reg;
reg   [2:0] tmp_reg_190_pp0_iter9_reg;
reg   [2:0] tmp_reg_190_pp0_iter10_reg;
wire  signed [15:0] p_5_fu_95_p1;
wire  signed [15:0] p_4_fu_104_p1;
wire  signed [15:0] p_3_fu_113_p1;
wire  signed [15:0] p_2_fu_118_p1;
wire   [15:0] ret_V_2_fu_129_p2;
wire  signed [15:0] p_1_fu_148_p1;
wire  signed [15:0] p_s_fu_165_p1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage0_01001;
wire  signed [7:0] tmp_7_tr_fu_77_p0;
wire  signed [8:0] grp_fu_85_p0;
wire   [7:0] ret_V_6_fu_91_p2;
wire   [7:0] ret_V_5_fu_100_p2;
wire   [7:0] ret_V_4_fu_109_p2;
wire   [8:0] grp_fu_85_p2;
wire  signed [7:0] ret_V_2_fu_129_p0;
wire  signed [7:0] ret_V_2_fu_129_p1;
wire  signed [8:0] lhs_V_1_fu_136_p1;
wire  signed [8:0] rhs_V_1_fu_139_p1;
wire   [8:0] ret_V_1_fu_142_p2;
wire  signed [8:0] rhs_V_fu_156_p1;
wire  signed [8:0] lhs_V_fu_153_p1;
wire   [8:0] ret_V_fu_159_p2;
reg    grp_fu_85_ce;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to12;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 a_V_0_sel_rd = 1'b0;
#0 a_V_0_sel_wr = 1'b0;
#0 a_V_0_state = 2'd0;
#0 b_V_0_sel_rd = 1'b0;
#0 b_V_0_sel_wr = 1'b0;
#0 b_V_0_state = 2'd0;
#0 c_V_0_sel_rd = 1'b0;
#0 c_V_0_sel_wr = 1'b0;
#0 c_V_0_state = 2'd0;
#0 d_V_1_sel_rd = 1'b0;
#0 d_V_1_sel_wr = 1'b0;
#0 d_V_1_state = 2'd0;
end

cal_sdiv_9s_8s_9_13_1 #(
    .ID( 1 ),
    .NUM_STAGE( 13 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 9 ))
cal_sdiv_9s_8s_9_13_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_85_p0),
    .din1(b_V_0_data_out),
    .ce(grp_fu_85_ce),
    .dout(grp_fu_85_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        a_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == a_V_0_vld_out) & (1'b1 == a_V_0_ack_out))) begin
            a_V_0_sel_rd <= ~a_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        a_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == a_V_0_ack_in) & (1'b1 == a_V_0_vld_in))) begin
            a_V_0_sel_wr <= ~a_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        a_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == a_V_0_vld_in) & (2'd2 == a_V_0_state)) | ((1'b0 == a_V_0_vld_in) & (1'b1 == a_V_0_ack_out) & (2'd3 == a_V_0_state)))) begin
            a_V_0_state <= 2'd2;
        end else if ((((1'b0 == a_V_0_ack_out) & (2'd1 == a_V_0_state)) | ((1'b0 == a_V_0_ack_out) & (1'b1 == a_V_0_vld_in) & (2'd3 == a_V_0_state)))) begin
            a_V_0_state <= 2'd1;
        end else if (((~((1'b0 == a_V_0_vld_in) & (1'b1 == a_V_0_ack_out)) & ~((1'b0 == a_V_0_ack_out) & (1'b1 == a_V_0_vld_in)) & (2'd3 == a_V_0_state)) | ((1'b1 == a_V_0_ack_out) & (2'd1 == a_V_0_state)) | ((1'b1 == a_V_0_vld_in) & (2'd2 == a_V_0_state)))) begin
            a_V_0_state <= 2'd3;
        end else begin
            a_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        b_V_0_sel_rd <= 1'b0;
    end else begin
        if (((b_V_0_vld_out == 1'b1) & (b_V_0_ack_out == 1'b1))) begin
            b_V_0_sel_rd <= ~b_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        b_V_0_sel_wr <= 1'b0;
    end else begin
        if (((b_V_0_ack_in == 1'b1) & (b_V_0_vld_in == 1'b1))) begin
            b_V_0_sel_wr <= ~b_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        b_V_0_state <= 2'd0;
    end else begin
        if ((((b_V_0_vld_in == 1'b0) & (b_V_0_state == 2'd2)) | ((b_V_0_vld_in == 1'b0) & (b_V_0_ack_out == 1'b1) & (b_V_0_state == 2'd3)))) begin
            b_V_0_state <= 2'd2;
        end else if ((((b_V_0_ack_out == 1'b0) & (b_V_0_state == 2'd1)) | ((b_V_0_ack_out == 1'b0) & (b_V_0_vld_in == 1'b1) & (b_V_0_state == 2'd3)))) begin
            b_V_0_state <= 2'd1;
        end else if (((~((b_V_0_vld_in == 1'b0) & (b_V_0_ack_out == 1'b1)) & ~((b_V_0_ack_out == 1'b0) & (b_V_0_vld_in == 1'b1)) & (b_V_0_state == 2'd3)) | ((b_V_0_ack_out == 1'b1) & (b_V_0_state == 2'd1)) | ((b_V_0_vld_in == 1'b1) & (b_V_0_state == 2'd2)))) begin
            b_V_0_state <= 2'd3;
        end else begin
            b_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        c_V_0_sel_rd <= 1'b0;
    end else begin
        if (((c_V_0_vld_out == 1'b1) & (c_V_0_ack_out == 1'b1))) begin
            c_V_0_sel_rd <= ~c_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        c_V_0_sel_wr <= 1'b0;
    end else begin
        if (((c_V_0_ack_in == 1'b1) & (c_V_0_vld_in == 1'b1))) begin
            c_V_0_sel_wr <= ~c_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        c_V_0_state <= 2'd0;
    end else begin
        if ((((c_V_0_vld_in == 1'b0) & (c_V_0_state == 2'd2)) | ((c_V_0_vld_in == 1'b0) & (c_V_0_ack_out == 1'b1) & (c_V_0_state == 2'd3)))) begin
            c_V_0_state <= 2'd2;
        end else if ((((c_V_0_ack_out == 1'b0) & (c_V_0_state == 2'd1)) | ((c_V_0_ack_out == 1'b0) & (c_V_0_vld_in == 1'b1) & (c_V_0_state == 2'd3)))) begin
            c_V_0_state <= 2'd1;
        end else if (((~((c_V_0_vld_in == 1'b0) & (c_V_0_ack_out == 1'b1)) & ~((c_V_0_ack_out == 1'b0) & (c_V_0_vld_in == 1'b1)) & (c_V_0_state == 2'd3)) | ((c_V_0_ack_out == 1'b1) & (c_V_0_state == 2'd1)) | ((c_V_0_vld_in == 1'b1) & (c_V_0_state == 2'd2)))) begin
            c_V_0_state <= 2'd3;
        end else begin
            c_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        d_V_1_sel_rd <= 1'b0;
    end else begin
        if (((d_V_1_ack_out == 1'b1) & (d_V_1_vld_out == 1'b1))) begin
            d_V_1_sel_rd <= ~d_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        d_V_1_sel_wr <= 1'b0;
    end else begin
        if (((d_V_1_ack_in == 1'b1) & (d_V_1_vld_in == 1'b1))) begin
            d_V_1_sel_wr <= ~d_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        d_V_1_state <= 2'd0;
    end else begin
        if ((((d_V_1_vld_in == 1'b0) & (d_V_1_state == 2'd2)) | ((d_V_1_vld_in == 1'b0) & (d_V_1_ack_out == 1'b1) & (d_V_1_state == 2'd3)))) begin
            d_V_1_state <= 2'd2;
        end else if ((((d_V_1_ack_out == 1'b0) & (d_V_1_state == 2'd1)) | ((d_V_1_ack_out == 1'b0) & (d_V_1_vld_in == 1'b1) & (d_V_1_state == 2'd3)))) begin
            d_V_1_state <= 2'd1;
        end else if (((~((d_V_1_vld_in == 1'b0) & (d_V_1_ack_out == 1'b1)) & ~((d_V_1_ack_out == 1'b0) & (d_V_1_vld_in == 1'b1)) & (d_V_1_state == 2'd3)) | ((d_V_1_ack_out == 1'b1) & (d_V_1_state == 2'd1)) | ((d_V_1_vld_in == 1'b1) & (d_V_1_state == 2'd2)))) begin
            d_V_1_state <= 2'd3;
        end else begin
            d_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == a_V_0_load_A)) begin
        a_V_0_payload_A <= a_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == a_V_0_load_B)) begin
        a_V_0_payload_B <= a_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        a_V_read_reg_180 <= a_V_0_data_out;
        a_V_read_reg_180_pp0_iter1_reg <= a_V_read_reg_180;
        b_V_read_reg_170 <= b_V_0_data_out;
        b_V_read_reg_170_pp0_iter1_reg <= b_V_read_reg_170;
        tmp_reg_190 <= tmp_fu_73_p1;
        tmp_reg_190_pp0_iter1_reg <= tmp_reg_190;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        a_V_read_reg_180_pp0_iter10_reg <= a_V_read_reg_180_pp0_iter9_reg;
        a_V_read_reg_180_pp0_iter11_reg <= a_V_read_reg_180_pp0_iter10_reg;
        a_V_read_reg_180_pp0_iter2_reg <= a_V_read_reg_180_pp0_iter1_reg;
        a_V_read_reg_180_pp0_iter3_reg <= a_V_read_reg_180_pp0_iter2_reg;
        a_V_read_reg_180_pp0_iter4_reg <= a_V_read_reg_180_pp0_iter3_reg;
        a_V_read_reg_180_pp0_iter5_reg <= a_V_read_reg_180_pp0_iter4_reg;
        a_V_read_reg_180_pp0_iter6_reg <= a_V_read_reg_180_pp0_iter5_reg;
        a_V_read_reg_180_pp0_iter7_reg <= a_V_read_reg_180_pp0_iter6_reg;
        a_V_read_reg_180_pp0_iter8_reg <= a_V_read_reg_180_pp0_iter7_reg;
        a_V_read_reg_180_pp0_iter9_reg <= a_V_read_reg_180_pp0_iter8_reg;
        b_V_read_reg_170_pp0_iter10_reg <= b_V_read_reg_170_pp0_iter9_reg;
        b_V_read_reg_170_pp0_iter11_reg <= b_V_read_reg_170_pp0_iter10_reg;
        b_V_read_reg_170_pp0_iter2_reg <= b_V_read_reg_170_pp0_iter1_reg;
        b_V_read_reg_170_pp0_iter3_reg <= b_V_read_reg_170_pp0_iter2_reg;
        b_V_read_reg_170_pp0_iter4_reg <= b_V_read_reg_170_pp0_iter3_reg;
        b_V_read_reg_170_pp0_iter5_reg <= b_V_read_reg_170_pp0_iter4_reg;
        b_V_read_reg_170_pp0_iter6_reg <= b_V_read_reg_170_pp0_iter5_reg;
        b_V_read_reg_170_pp0_iter7_reg <= b_V_read_reg_170_pp0_iter6_reg;
        b_V_read_reg_170_pp0_iter8_reg <= b_V_read_reg_170_pp0_iter7_reg;
        b_V_read_reg_170_pp0_iter9_reg <= b_V_read_reg_170_pp0_iter8_reg;
        tmp_reg_190_pp0_iter10_reg <= tmp_reg_190_pp0_iter9_reg;
        tmp_reg_190_pp0_iter11_reg <= tmp_reg_190_pp0_iter10_reg;
        tmp_reg_190_pp0_iter12_reg <= tmp_reg_190_pp0_iter11_reg;
        tmp_reg_190_pp0_iter2_reg <= tmp_reg_190_pp0_iter1_reg;
        tmp_reg_190_pp0_iter3_reg <= tmp_reg_190_pp0_iter2_reg;
        tmp_reg_190_pp0_iter4_reg <= tmp_reg_190_pp0_iter3_reg;
        tmp_reg_190_pp0_iter5_reg <= tmp_reg_190_pp0_iter4_reg;
        tmp_reg_190_pp0_iter6_reg <= tmp_reg_190_pp0_iter5_reg;
        tmp_reg_190_pp0_iter7_reg <= tmp_reg_190_pp0_iter6_reg;
        tmp_reg_190_pp0_iter8_reg <= tmp_reg_190_pp0_iter7_reg;
        tmp_reg_190_pp0_iter9_reg <= tmp_reg_190_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((b_V_0_load_A == 1'b1)) begin
        b_V_0_payload_A <= b_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((b_V_0_load_B == 1'b1)) begin
        b_V_0_payload_B <= b_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((c_V_0_load_A == 1'b1)) begin
        c_V_0_payload_A <= c_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((c_V_0_load_B == 1'b1)) begin
        c_V_0_payload_B <= c_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((d_V_1_load_A == 1'b1)) begin
        d_V_1_payload_A <= d_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((d_V_1_load_B == 1'b1)) begin
        d_V_1_payload_B <= d_V_1_data_in;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        a_V_0_ack_out = 1'b1;
    end else begin
        a_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == a_V_0_sel)) begin
        a_V_0_data_out = a_V_0_payload_B;
    end else begin
        a_V_0_data_out = a_V_0_payload_A;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_V_TDATA_blk_n = a_V_0_state[1'd0];
    end else begin
        a_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to12 = 1'b1;
    end else begin
        ap_idle_pp0_0to12 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to12 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        b_V_0_ack_out = 1'b1;
    end else begin
        b_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((b_V_0_sel == 1'b1)) begin
        b_V_0_data_out = b_V_0_payload_B;
    end else begin
        b_V_0_data_out = b_V_0_payload_A;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_V_TDATA_blk_n = b_V_0_state[1'd0];
    end else begin
        b_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        c_V_0_ack_out = 1'b1;
    end else begin
        c_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((c_V_0_sel == 1'b1)) begin
        c_V_0_data_out = c_V_0_payload_B;
    end else begin
        c_V_0_data_out = c_V_0_payload_A;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_V_TDATA_blk_n = c_V_0_state[1'd0];
    end else begin
        c_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        if ((tmp_reg_190_pp0_iter11_reg == 3'd0)) begin
            d_V_1_data_in = p_s_fu_165_p1;
        end else if ((tmp_reg_190_pp0_iter11_reg == 3'd1)) begin
            d_V_1_data_in = p_1_fu_148_p1;
        end else if ((tmp_reg_190_pp0_iter11_reg == 3'd2)) begin
            d_V_1_data_in = ret_V_2_fu_129_p2;
        end else if ((tmp_reg_190_pp0_iter11_reg == 3'd3)) begin
            d_V_1_data_in = p_2_fu_118_p1;
        end else if ((tmp_reg_190_pp0_iter11_reg == 3'd4)) begin
            d_V_1_data_in = p_3_fu_113_p1;
        end else if ((tmp_reg_190_pp0_iter11_reg == 3'd5)) begin
            d_V_1_data_in = p_4_fu_104_p1;
        end else if ((tmp_reg_190_pp0_iter11_reg == 3'd6)) begin
            d_V_1_data_in = p_5_fu_95_p1;
        end else begin
            d_V_1_data_in = 'bx;
        end
    end else begin
        d_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((d_V_1_sel == 1'b1)) begin
        d_V_1_data_out = d_V_1_payload_B;
    end else begin
        d_V_1_data_out = d_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_190_pp0_iter11_reg == 3'd0)) | ((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_190_pp0_iter11_reg == 3'd1)) | ((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_190_pp0_iter11_reg == 3'd2)) | ((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_190_pp0_iter11_reg == 3'd3)) | ((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_190_pp0_iter11_reg == 3'd4)) | ((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_190_pp0_iter11_reg == 3'd5)) | ((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_190_pp0_iter11_reg == 3'd6)))) begin
        d_V_1_vld_in = 1'b1;
    end else begin
        d_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter13 == 1'b1) & (tmp_reg_190_pp0_iter12_reg == 3'd0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter13 == 1'b1) & (tmp_reg_190_pp0_iter12_reg == 3'd1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter13 == 1'b1) & (tmp_reg_190_pp0_iter12_reg == 3'd2)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter13 == 1'b1) & (tmp_reg_190_pp0_iter12_reg == 3'd3)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter13 == 1'b1) & (tmp_reg_190_pp0_iter12_reg == 3'd4)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter13 == 1'b1) & (tmp_reg_190_pp0_iter12_reg == 3'd5)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter13 == 1'b1) & (tmp_reg_190_pp0_iter12_reg == 3'd6)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter12 == 1'b1) & (tmp_reg_190_pp0_iter11_reg == 3'd0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter12 == 1'b1) & (tmp_reg_190_pp0_iter11_reg == 3'd1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter12 == 1'b1) & (tmp_reg_190_pp0_iter11_reg == 3'd2)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter12 == 1'b1) & (tmp_reg_190_pp0_iter11_reg == 3'd3)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter12 == 1'b1) & (tmp_reg_190_pp0_iter11_reg == 3'd4)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter12 == 1'b1) & (tmp_reg_190_pp0_iter11_reg == 3'd5)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter12 == 1'b1) & (tmp_reg_190_pp0_iter11_reg == 3'd6)))) begin
        d_V_TDATA_blk_n = d_V_1_state[1'd1];
    end else begin
        d_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_85_ce = 1'b1;
    end else begin
        grp_fu_85_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_V_0_ack_in = a_V_0_state[1'd1];

assign a_V_0_load_A = (~a_V_0_sel_wr & a_V_0_state_cmp_full);

assign a_V_0_load_B = (a_V_0_state_cmp_full & a_V_0_sel_wr);

assign a_V_0_sel = a_V_0_sel_rd;

assign a_V_0_state_cmp_full = ((a_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign a_V_0_vld_in = a_V_TVALID;

assign a_V_0_vld_out = a_V_0_state[1'd0];

assign a_V_TREADY = a_V_0_state[1'd1];

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((d_V_1_ack_in == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b1)) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0) | (c_V_0_vld_out == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_start == 1'b1) & ((ap_start == 1'b0) | (1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0) | (c_V_0_vld_out == 1'b0))) | ((ap_enable_reg_pp0_iter13 == 1'b1) & ((d_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state14_io))) | ((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b1 == ap_block_state13_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_start == 1'b1) & ((ap_start == 1'b0) | (1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0) | (c_V_0_vld_out == 1'b0))) | ((ap_enable_reg_pp0_iter13 == 1'b1) & ((d_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state14_io))) | ((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b1 == ap_block_state13_io)));
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state13_io = (((d_V_1_ack_in == 1'b0) & (tmp_reg_190_pp0_iter11_reg == 3'd0)) | ((d_V_1_ack_in == 1'b0) & (tmp_reg_190_pp0_iter11_reg == 3'd1)) | ((d_V_1_ack_in == 1'b0) & (tmp_reg_190_pp0_iter11_reg == 3'd2)) | ((d_V_1_ack_in == 1'b0) & (tmp_reg_190_pp0_iter11_reg == 3'd3)) | ((d_V_1_ack_in == 1'b0) & (tmp_reg_190_pp0_iter11_reg == 3'd4)) | ((d_V_1_ack_in == 1'b0) & (tmp_reg_190_pp0_iter11_reg == 3'd5)) | ((d_V_1_ack_in == 1'b0) & (tmp_reg_190_pp0_iter11_reg == 3'd6)));
end

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state14_io = (((d_V_1_ack_in == 1'b0) & (tmp_reg_190_pp0_iter12_reg == 3'd0)) | ((d_V_1_ack_in == 1'b0) & (tmp_reg_190_pp0_iter12_reg == 3'd1)) | ((d_V_1_ack_in == 1'b0) & (tmp_reg_190_pp0_iter12_reg == 3'd2)) | ((d_V_1_ack_in == 1'b0) & (tmp_reg_190_pp0_iter12_reg == 3'd3)) | ((d_V_1_ack_in == 1'b0) & (tmp_reg_190_pp0_iter12_reg == 3'd4)) | ((d_V_1_ack_in == 1'b0) & (tmp_reg_190_pp0_iter12_reg == 3'd5)) | ((d_V_1_ack_in == 1'b0) & (tmp_reg_190_pp0_iter12_reg == 3'd6)));
end

always @ (*) begin
    ap_block_state14_pp0_stage0_iter13 = (d_V_1_ack_in == 1'b0);
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start == 1'b0) | (1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0) | (c_V_0_vld_out == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign b_V_0_ack_in = b_V_0_state[1'd1];

assign b_V_0_load_A = (~b_V_0_sel_wr & b_V_0_state_cmp_full);

assign b_V_0_load_B = (b_V_0_state_cmp_full & b_V_0_sel_wr);

assign b_V_0_sel = b_V_0_sel_rd;

assign b_V_0_state_cmp_full = ((b_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign b_V_0_vld_in = b_V_TVALID;

assign b_V_0_vld_out = b_V_0_state[1'd0];

assign b_V_TREADY = b_V_0_state[1'd1];

assign c_V_0_ack_in = c_V_0_state[1'd1];

assign c_V_0_load_A = (~c_V_0_sel_wr & c_V_0_state_cmp_full);

assign c_V_0_load_B = (c_V_0_state_cmp_full & c_V_0_sel_wr);

assign c_V_0_sel = c_V_0_sel_rd;

assign c_V_0_state_cmp_full = ((c_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign c_V_0_vld_in = c_V_TVALID;

assign c_V_0_vld_out = c_V_0_state[1'd0];

assign c_V_TREADY = c_V_0_state[1'd1];

assign d_V_1_ack_in = d_V_1_state[1'd1];

assign d_V_1_ack_out = d_V_TREADY;

assign d_V_1_load_A = (~d_V_1_sel_wr & d_V_1_state_cmp_full);

assign d_V_1_load_B = (d_V_1_state_cmp_full & d_V_1_sel_wr);

assign d_V_1_sel = d_V_1_sel_rd;

assign d_V_1_state_cmp_full = ((d_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign d_V_1_vld_out = d_V_1_state[1'd0];

assign d_V_TDATA = d_V_1_data_out;

assign d_V_TVALID = d_V_1_state[1'd0];

assign grp_fu_85_p0 = tmp_7_tr_fu_77_p0;

assign lhs_V_1_fu_136_p1 = a_V_read_reg_180_pp0_iter11_reg;

assign lhs_V_fu_153_p1 = a_V_read_reg_180_pp0_iter11_reg;

assign p_1_fu_148_p1 = $signed(ret_V_1_fu_142_p2);

assign p_2_fu_118_p1 = $signed(grp_fu_85_p2);

assign p_3_fu_113_p1 = $signed(ret_V_4_fu_109_p2);

assign p_4_fu_104_p1 = $signed(ret_V_5_fu_100_p2);

assign p_5_fu_95_p1 = $signed(ret_V_6_fu_91_p2);

assign p_s_fu_165_p1 = $signed(ret_V_fu_159_p2);

assign ret_V_1_fu_142_p2 = ($signed(lhs_V_1_fu_136_p1) - $signed(rhs_V_1_fu_139_p1));

assign ret_V_2_fu_129_p0 = b_V_read_reg_170_pp0_iter11_reg;

assign ret_V_2_fu_129_p1 = a_V_read_reg_180_pp0_iter11_reg;

assign ret_V_2_fu_129_p2 = ($signed(ret_V_2_fu_129_p0) * $signed(ret_V_2_fu_129_p1));

assign ret_V_4_fu_109_p2 = (b_V_read_reg_170_pp0_iter11_reg & a_V_read_reg_180_pp0_iter11_reg);

assign ret_V_5_fu_100_p2 = (b_V_read_reg_170_pp0_iter11_reg | a_V_read_reg_180_pp0_iter11_reg);

assign ret_V_6_fu_91_p2 = (b_V_read_reg_170_pp0_iter11_reg ^ a_V_read_reg_180_pp0_iter11_reg);

assign ret_V_fu_159_p2 = ($signed(rhs_V_fu_156_p1) + $signed(lhs_V_fu_153_p1));

assign rhs_V_1_fu_139_p1 = b_V_read_reg_170_pp0_iter11_reg;

assign rhs_V_fu_156_p1 = b_V_read_reg_170_pp0_iter11_reg;

assign tmp_7_tr_fu_77_p0 = a_V_0_data_out;

assign tmp_fu_73_p1 = c_V_0_data_out[2:0];

endmodule //cal
