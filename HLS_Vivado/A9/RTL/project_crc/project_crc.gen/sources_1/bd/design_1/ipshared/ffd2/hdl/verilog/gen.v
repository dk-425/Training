// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="gen_gen,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.525000,HLS_SYN_LAT=51,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=65,HLS_SYN_LUT=691,HLS_VERSION=2022_2}" *)

module gen (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        w_TDATA,
        w_TVALID,
        w_TREADY
);

parameter    ap_ST_fsm_state1 = 22'd1;
parameter    ap_ST_fsm_state2 = 22'd2;
parameter    ap_ST_fsm_state3 = 22'd4;
parameter    ap_ST_fsm_state4 = 22'd8;
parameter    ap_ST_fsm_state5 = 22'd16;
parameter    ap_ST_fsm_state6 = 22'd32;
parameter    ap_ST_fsm_state7 = 22'd64;
parameter    ap_ST_fsm_state8 = 22'd128;
parameter    ap_ST_fsm_state9 = 22'd256;
parameter    ap_ST_fsm_state10 = 22'd512;
parameter    ap_ST_fsm_state11 = 22'd1024;
parameter    ap_ST_fsm_state12 = 22'd2048;
parameter    ap_ST_fsm_state13 = 22'd4096;
parameter    ap_ST_fsm_state14 = 22'd8192;
parameter    ap_ST_fsm_state15 = 22'd16384;
parameter    ap_ST_fsm_state16 = 22'd32768;
parameter    ap_ST_fsm_state17 = 22'd65536;
parameter    ap_ST_fsm_state18 = 22'd131072;
parameter    ap_ST_fsm_state19 = 22'd262144;
parameter    ap_ST_fsm_state20 = 22'd524288;
parameter    ap_ST_fsm_state21 = 22'd1048576;
parameter    ap_ST_fsm_state22 = 22'd2097152;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [63:0] w_TDATA;
output   w_TVALID;
input   w_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [21:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    w_TDATA_blk_n;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire   [2:0] x_bits_V_addr_reg_249;
wire    ap_CS_fsm_state3;
wire   [2:0] x_bits_V_addr_1_reg_254;
wire   [0:0] x_bits_V_q1;
reg   [0:0] x_bits_V_load_reg_259;
wire    ap_CS_fsm_state4;
wire   [0:0] x_bits_V_q0;
reg   [0:0] x_bits_V_load_1_reg_264;
wire   [2:0] x_bits_V_addr_2_reg_269;
wire   [2:0] x_bits_V_addr_3_reg_274;
reg   [0:0] x_bits_V_load_2_reg_279;
wire    ap_CS_fsm_state5;
reg   [0:0] x_bits_V_load_3_reg_284;
wire   [2:0] x_bits_V_addr_4_reg_289;
wire   [2:0] x_bits_V_addr_5_reg_294;
reg   [0:0] x_bits_V_load_4_reg_299;
wire    ap_CS_fsm_state6;
reg   [0:0] x_bits_V_load_5_reg_304;
wire   [2:0] x_bits_V_addr_6_reg_309;
wire   [2:0] x_bits_V_addr_7_reg_314;
wire   [63:0] zext_ln21_fu_178_p1;
reg   [0:0] x_bits_V_load_8_reg_324;
wire    ap_CS_fsm_state11;
reg   [0:0] x_bits_V_load_9_reg_329;
reg   [0:0] x_bits_V_load_10_reg_334;
wire    ap_CS_fsm_state12;
reg   [0:0] x_bits_V_load_11_reg_339;
reg   [0:0] x_bits_V_load_12_reg_344;
wire    ap_CS_fsm_state13;
reg   [0:0] x_bits_V_load_13_reg_349;
wire   [63:0] zext_ln27_fu_211_p1;
reg   [0:0] x_bits_V_load_16_reg_359;
wire    ap_CS_fsm_state18;
reg   [0:0] x_bits_V_load_17_reg_364;
reg   [0:0] x_bits_V_load_18_reg_369;
wire    ap_CS_fsm_state19;
reg   [0:0] x_bits_V_load_19_reg_374;
reg   [0:0] x_bits_V_load_20_reg_379;
wire    ap_CS_fsm_state20;
reg   [0:0] x_bits_V_load_21_reg_384;
wire   [63:0] zext_ln33_fu_244_p1;
reg   [2:0] x_bits_V_address0;
reg    x_bits_V_ce0;
reg    x_bits_V_we0;
reg   [0:0] x_bits_V_d0;
reg   [2:0] x_bits_V_address1;
reg    x_bits_V_ce1;
wire    grp_gen_Pipeline_VITIS_LOOP_16_1_fu_134_ap_start;
wire    grp_gen_Pipeline_VITIS_LOOP_16_1_fu_134_ap_done;
wire    grp_gen_Pipeline_VITIS_LOOP_16_1_fu_134_ap_idle;
wire    grp_gen_Pipeline_VITIS_LOOP_16_1_fu_134_ap_ready;
wire   [2:0] grp_gen_Pipeline_VITIS_LOOP_16_1_fu_134_x_bits_V_address0;
wire    grp_gen_Pipeline_VITIS_LOOP_16_1_fu_134_x_bits_V_ce0;
wire    grp_gen_Pipeline_VITIS_LOOP_16_1_fu_134_x_bits_V_we0;
wire   [0:0] grp_gen_Pipeline_VITIS_LOOP_16_1_fu_134_x_bits_V_d0;
wire    grp_gen_Pipeline_VITIS_LOOP_22_2_fu_140_ap_start;
wire    grp_gen_Pipeline_VITIS_LOOP_22_2_fu_140_ap_done;
wire    grp_gen_Pipeline_VITIS_LOOP_22_2_fu_140_ap_idle;
wire    grp_gen_Pipeline_VITIS_LOOP_22_2_fu_140_ap_ready;
wire   [2:0] grp_gen_Pipeline_VITIS_LOOP_22_2_fu_140_x_bits_V_address0;
wire    grp_gen_Pipeline_VITIS_LOOP_22_2_fu_140_x_bits_V_ce0;
wire    grp_gen_Pipeline_VITIS_LOOP_22_2_fu_140_x_bits_V_we0;
wire   [0:0] grp_gen_Pipeline_VITIS_LOOP_22_2_fu_140_x_bits_V_d0;
wire    grp_gen_Pipeline_VITIS_LOOP_28_3_fu_145_ap_start;
wire    grp_gen_Pipeline_VITIS_LOOP_28_3_fu_145_ap_done;
wire    grp_gen_Pipeline_VITIS_LOOP_28_3_fu_145_ap_idle;
wire    grp_gen_Pipeline_VITIS_LOOP_28_3_fu_145_ap_ready;
wire   [2:0] grp_gen_Pipeline_VITIS_LOOP_28_3_fu_145_x_bits_V_address0;
wire    grp_gen_Pipeline_VITIS_LOOP_28_3_fu_145_x_bits_V_ce0;
wire    grp_gen_Pipeline_VITIS_LOOP_28_3_fu_145_x_bits_V_we0;
wire   [0:0] grp_gen_Pipeline_VITIS_LOOP_28_3_fu_145_x_bits_V_d0;
reg    grp_gen_Pipeline_VITIS_LOOP_16_1_fu_134_ap_start_reg;
wire    ap_CS_fsm_state2;
reg    grp_gen_Pipeline_VITIS_LOOP_22_2_fu_140_ap_start_reg;
wire    ap_CS_fsm_state9;
reg    grp_gen_Pipeline_VITIS_LOOP_28_3_fu_145_ap_start_reg;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state17;
wire   [56:0] tmp_3_fu_150_p16;
wire   [56:0] tmp_4_fu_183_p16;
wire   [56:0] tmp_5_fu_216_p16;
wire    regslice_both_w_U_apdone_blk;
reg    ap_block_state22;
reg   [21:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
reg    ap_ST_fsm_state7_blk;
reg    ap_ST_fsm_state8_blk;
reg    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
reg    ap_ST_fsm_state14_blk;
reg    ap_ST_fsm_state15_blk;
reg    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
reg    ap_ST_fsm_state21_blk;
reg    ap_ST_fsm_state22_blk;
reg   [63:0] w_TDATA_int_regslice;
reg    w_TVALID_int_regslice;
wire    w_TREADY_int_regslice;
wire    regslice_both_w_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 22'd1;
#0 grp_gen_Pipeline_VITIS_LOOP_16_1_fu_134_ap_start_reg = 1'b0;
#0 grp_gen_Pipeline_VITIS_LOOP_22_2_fu_140_ap_start_reg = 1'b0;
#0 grp_gen_Pipeline_VITIS_LOOP_28_3_fu_145_ap_start_reg = 1'b0;
end

gen_x_bits_V_RAM_AUTO_1R1W #(
    .DataWidth( 1 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
x_bits_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(x_bits_V_address0),
    .ce0(x_bits_V_ce0),
    .we0(x_bits_V_we0),
    .d0(x_bits_V_d0),
    .q0(x_bits_V_q0),
    .address1(x_bits_V_address1),
    .ce1(x_bits_V_ce1),
    .q1(x_bits_V_q1)
);

gen_gen_Pipeline_VITIS_LOOP_16_1 grp_gen_Pipeline_VITIS_LOOP_16_1_fu_134(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_gen_Pipeline_VITIS_LOOP_16_1_fu_134_ap_start),
    .ap_done(grp_gen_Pipeline_VITIS_LOOP_16_1_fu_134_ap_done),
    .ap_idle(grp_gen_Pipeline_VITIS_LOOP_16_1_fu_134_ap_idle),
    .ap_ready(grp_gen_Pipeline_VITIS_LOOP_16_1_fu_134_ap_ready),
    .x_bits_V_address0(grp_gen_Pipeline_VITIS_LOOP_16_1_fu_134_x_bits_V_address0),
    .x_bits_V_ce0(grp_gen_Pipeline_VITIS_LOOP_16_1_fu_134_x_bits_V_ce0),
    .x_bits_V_we0(grp_gen_Pipeline_VITIS_LOOP_16_1_fu_134_x_bits_V_we0),
    .x_bits_V_d0(grp_gen_Pipeline_VITIS_LOOP_16_1_fu_134_x_bits_V_d0)
);

gen_gen_Pipeline_VITIS_LOOP_22_2 grp_gen_Pipeline_VITIS_LOOP_22_2_fu_140(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_gen_Pipeline_VITIS_LOOP_22_2_fu_140_ap_start),
    .ap_done(grp_gen_Pipeline_VITIS_LOOP_22_2_fu_140_ap_done),
    .ap_idle(grp_gen_Pipeline_VITIS_LOOP_22_2_fu_140_ap_idle),
    .ap_ready(grp_gen_Pipeline_VITIS_LOOP_22_2_fu_140_ap_ready),
    .x_bits_V_address0(grp_gen_Pipeline_VITIS_LOOP_22_2_fu_140_x_bits_V_address0),
    .x_bits_V_ce0(grp_gen_Pipeline_VITIS_LOOP_22_2_fu_140_x_bits_V_ce0),
    .x_bits_V_we0(grp_gen_Pipeline_VITIS_LOOP_22_2_fu_140_x_bits_V_we0),
    .x_bits_V_d0(grp_gen_Pipeline_VITIS_LOOP_22_2_fu_140_x_bits_V_d0)
);

gen_gen_Pipeline_VITIS_LOOP_28_3 grp_gen_Pipeline_VITIS_LOOP_28_3_fu_145(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_gen_Pipeline_VITIS_LOOP_28_3_fu_145_ap_start),
    .ap_done(grp_gen_Pipeline_VITIS_LOOP_28_3_fu_145_ap_done),
    .ap_idle(grp_gen_Pipeline_VITIS_LOOP_28_3_fu_145_ap_idle),
    .ap_ready(grp_gen_Pipeline_VITIS_LOOP_28_3_fu_145_ap_ready),
    .x_bits_V_address0(grp_gen_Pipeline_VITIS_LOOP_28_3_fu_145_x_bits_V_address0),
    .x_bits_V_ce0(grp_gen_Pipeline_VITIS_LOOP_28_3_fu_145_x_bits_V_ce0),
    .x_bits_V_we0(grp_gen_Pipeline_VITIS_LOOP_28_3_fu_145_x_bits_V_we0),
    .x_bits_V_d0(grp_gen_Pipeline_VITIS_LOOP_28_3_fu_145_x_bits_V_d0)
);

gen_regslice_both #(
    .DataWidth( 64 ))
regslice_both_w_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(w_TDATA_int_regslice),
    .vld_in(w_TVALID_int_regslice),
    .ack_in(w_TREADY_int_regslice),
    .data_out(w_TDATA),
    .vld_out(regslice_both_w_U_vld_out),
    .ack_out(w_TREADY),
    .apdone_blk(regslice_both_w_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_gen_Pipeline_VITIS_LOOP_16_1_fu_134_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_gen_Pipeline_VITIS_LOOP_16_1_fu_134_ap_start_reg <= 1'b1;
        end else if ((grp_gen_Pipeline_VITIS_LOOP_16_1_fu_134_ap_ready == 1'b1)) begin
            grp_gen_Pipeline_VITIS_LOOP_16_1_fu_134_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_gen_Pipeline_VITIS_LOOP_22_2_fu_140_ap_start_reg <= 1'b0;
    end else begin
        if (((w_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
            grp_gen_Pipeline_VITIS_LOOP_22_2_fu_140_ap_start_reg <= 1'b1;
        end else if ((grp_gen_Pipeline_VITIS_LOOP_22_2_fu_140_ap_ready == 1'b1)) begin
            grp_gen_Pipeline_VITIS_LOOP_22_2_fu_140_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_gen_Pipeline_VITIS_LOOP_28_3_fu_145_ap_start_reg <= 1'b0;
    end else begin
        if (((w_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
            grp_gen_Pipeline_VITIS_LOOP_28_3_fu_145_ap_start_reg <= 1'b1;
        end else if ((grp_gen_Pipeline_VITIS_LOOP_28_3_fu_145_ap_ready == 1'b1)) begin
            grp_gen_Pipeline_VITIS_LOOP_28_3_fu_145_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        x_bits_V_load_10_reg_334 <= x_bits_V_q1;
        x_bits_V_load_11_reg_339 <= x_bits_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        x_bits_V_load_12_reg_344 <= x_bits_V_q1;
        x_bits_V_load_13_reg_349 <= x_bits_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        x_bits_V_load_16_reg_359 <= x_bits_V_q1;
        x_bits_V_load_17_reg_364 <= x_bits_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        x_bits_V_load_18_reg_369 <= x_bits_V_q1;
        x_bits_V_load_19_reg_374 <= x_bits_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        x_bits_V_load_1_reg_264 <= x_bits_V_q0;
        x_bits_V_load_reg_259 <= x_bits_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        x_bits_V_load_20_reg_379 <= x_bits_V_q1;
        x_bits_V_load_21_reg_384 <= x_bits_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        x_bits_V_load_2_reg_279 <= x_bits_V_q1;
        x_bits_V_load_3_reg_284 <= x_bits_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        x_bits_V_load_4_reg_299 <= x_bits_V_q1;
        x_bits_V_load_5_reg_304 <= x_bits_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        x_bits_V_load_8_reg_324 <= x_bits_V_q1;
        x_bits_V_load_9_reg_329 <= x_bits_V_q0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

always @ (*) begin
    if ((w_TREADY_int_regslice == 1'b0)) begin
        ap_ST_fsm_state14_blk = 1'b1;
    end else begin
        ap_ST_fsm_state14_blk = 1'b0;
    end
end

always @ (*) begin
    if ((w_TREADY_int_regslice == 1'b0)) begin
        ap_ST_fsm_state15_blk = 1'b1;
    end else begin
        ap_ST_fsm_state15_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_gen_Pipeline_VITIS_LOOP_28_3_fu_145_ap_done == 1'b0)) begin
        ap_ST_fsm_state16_blk = 1'b1;
    end else begin
        ap_ST_fsm_state16_blk = 1'b0;
    end
end

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

always @ (*) begin
    if ((w_TREADY_int_regslice == 1'b0)) begin
        ap_ST_fsm_state21_blk = 1'b1;
    end else begin
        ap_ST_fsm_state21_blk = 1'b0;
    end
end

always @ (*) begin
    if (((w_TREADY_int_regslice == 1'b0) | (regslice_both_w_U_apdone_blk == 1'b1))) begin
        ap_ST_fsm_state22_blk = 1'b1;
    end else begin
        ap_ST_fsm_state22_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_gen_Pipeline_VITIS_LOOP_16_1_fu_134_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

always @ (*) begin
    if ((w_TREADY_int_regslice == 1'b0)) begin
        ap_ST_fsm_state7_blk = 1'b1;
    end else begin
        ap_ST_fsm_state7_blk = 1'b0;
    end
end

always @ (*) begin
    if ((w_TREADY_int_regslice == 1'b0)) begin
        ap_ST_fsm_state8_blk = 1'b1;
    end else begin
        ap_ST_fsm_state8_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_gen_Pipeline_VITIS_LOOP_22_2_fu_140_ap_done == 1'b0)) begin
        ap_ST_fsm_state9_blk = 1'b1;
    end else begin
        ap_ST_fsm_state9_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((w_TREADY_int_regslice == 1'b0) | (regslice_both_w_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state22))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((w_TREADY_int_regslice == 1'b0) | (regslice_both_w_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state22))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        w_TDATA_blk_n = w_TREADY_int_regslice;
    end else begin
        w_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((w_TREADY_int_regslice == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state21)) begin
            w_TDATA_int_regslice = zext_ln33_fu_244_p1;
        end else if ((1'b1 == ap_CS_fsm_state14)) begin
            w_TDATA_int_regslice = zext_ln27_fu_211_p1;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            w_TDATA_int_regslice = zext_ln21_fu_178_p1;
        end else begin
            w_TDATA_int_regslice = 'bx;
        end
    end else begin
        w_TDATA_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((((w_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state21)) | ((w_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state14)) | ((w_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state7)))) begin
        w_TVALID_int_regslice = 1'b1;
    end else begin
        w_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state13))) begin
        x_bits_V_address0 = x_bits_V_addr_7_reg_314;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state12))) begin
        x_bits_V_address0 = x_bits_V_addr_5_reg_294;
    end else if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state11))) begin
        x_bits_V_address0 = x_bits_V_addr_3_reg_274;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state10))) begin
        x_bits_V_address0 = x_bits_V_addr_1_reg_254;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        x_bits_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        x_bits_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        x_bits_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        x_bits_V_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        x_bits_V_address0 = grp_gen_Pipeline_VITIS_LOOP_28_3_fu_145_x_bits_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        x_bits_V_address0 = grp_gen_Pipeline_VITIS_LOOP_22_2_fu_140_x_bits_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        x_bits_V_address0 = grp_gen_Pipeline_VITIS_LOOP_16_1_fu_134_x_bits_V_address0;
    end else begin
        x_bits_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state13))) begin
        x_bits_V_address1 = x_bits_V_addr_6_reg_309;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state12))) begin
        x_bits_V_address1 = x_bits_V_addr_4_reg_289;
    end else if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state11))) begin
        x_bits_V_address1 = x_bits_V_addr_2_reg_269;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state10))) begin
        x_bits_V_address1 = x_bits_V_addr_reg_249;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        x_bits_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        x_bits_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        x_bits_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        x_bits_V_address1 = 64'd0;
    end else begin
        x_bits_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        x_bits_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        x_bits_V_ce0 = grp_gen_Pipeline_VITIS_LOOP_28_3_fu_145_x_bits_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        x_bits_V_ce0 = grp_gen_Pipeline_VITIS_LOOP_22_2_fu_140_x_bits_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        x_bits_V_ce0 = grp_gen_Pipeline_VITIS_LOOP_16_1_fu_134_x_bits_V_ce0;
    end else begin
        x_bits_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        x_bits_V_ce1 = 1'b1;
    end else begin
        x_bits_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        x_bits_V_d0 = grp_gen_Pipeline_VITIS_LOOP_28_3_fu_145_x_bits_V_d0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        x_bits_V_d0 = grp_gen_Pipeline_VITIS_LOOP_22_2_fu_140_x_bits_V_d0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        x_bits_V_d0 = grp_gen_Pipeline_VITIS_LOOP_16_1_fu_134_x_bits_V_d0;
    end else begin
        x_bits_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        x_bits_V_we0 = grp_gen_Pipeline_VITIS_LOOP_28_3_fu_145_x_bits_V_we0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        x_bits_V_we0 = grp_gen_Pipeline_VITIS_LOOP_22_2_fu_140_x_bits_V_we0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        x_bits_V_we0 = grp_gen_Pipeline_VITIS_LOOP_16_1_fu_134_x_bits_V_we0;
    end else begin
        x_bits_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (grp_gen_Pipeline_VITIS_LOOP_16_1_fu_134_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((w_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((w_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (grp_gen_Pipeline_VITIS_LOOP_22_2_fu_140_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((w_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((w_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((grp_gen_Pipeline_VITIS_LOOP_28_3_fu_145_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if (((w_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            if ((~((w_TREADY_int_regslice == 1'b0) | (regslice_both_w_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state22 = ((w_TREADY_int_regslice == 1'b0) | (regslice_both_w_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_gen_Pipeline_VITIS_LOOP_16_1_fu_134_ap_start = grp_gen_Pipeline_VITIS_LOOP_16_1_fu_134_ap_start_reg;

assign grp_gen_Pipeline_VITIS_LOOP_22_2_fu_140_ap_start = grp_gen_Pipeline_VITIS_LOOP_22_2_fu_140_ap_start_reg;

assign grp_gen_Pipeline_VITIS_LOOP_28_3_fu_145_ap_start = grp_gen_Pipeline_VITIS_LOOP_28_3_fu_145_ap_start_reg;

assign tmp_3_fu_150_p16 = {{{{{{{{{{{{{{{x_bits_V_q0}, {7'd0}}, {x_bits_V_q1}}, {7'd0}}, {x_bits_V_load_5_reg_304}}, {7'd0}}, {x_bits_V_load_4_reg_299}}, {7'd0}}, {x_bits_V_load_3_reg_284}}, {7'd0}}, {x_bits_V_load_2_reg_279}}, {7'd0}}, {x_bits_V_load_1_reg_264}}, {7'd0}}, {x_bits_V_load_reg_259}};

assign tmp_4_fu_183_p16 = {{{{{{{{{{{{{{{x_bits_V_q0}, {7'd0}}, {x_bits_V_q1}}, {7'd0}}, {x_bits_V_load_13_reg_349}}, {7'd0}}, {x_bits_V_load_12_reg_344}}, {7'd0}}, {x_bits_V_load_11_reg_339}}, {7'd0}}, {x_bits_V_load_10_reg_334}}, {7'd0}}, {x_bits_V_load_9_reg_329}}, {7'd0}}, {x_bits_V_load_8_reg_324}};

assign tmp_5_fu_216_p16 = {{{{{{{{{{{{{{{x_bits_V_q0}, {7'd0}}, {x_bits_V_q1}}, {7'd0}}, {x_bits_V_load_21_reg_384}}, {7'd0}}, {x_bits_V_load_20_reg_379}}, {7'd0}}, {x_bits_V_load_19_reg_374}}, {7'd0}}, {x_bits_V_load_18_reg_369}}, {7'd0}}, {x_bits_V_load_17_reg_364}}, {7'd0}}, {x_bits_V_load_16_reg_359}};

assign w_TVALID = regslice_both_w_U_vld_out;

assign x_bits_V_addr_1_reg_254 = 64'd1;

assign x_bits_V_addr_2_reg_269 = 64'd2;

assign x_bits_V_addr_3_reg_274 = 64'd3;

assign x_bits_V_addr_4_reg_289 = 64'd4;

assign x_bits_V_addr_5_reg_294 = 64'd5;

assign x_bits_V_addr_6_reg_309 = 64'd6;

assign x_bits_V_addr_7_reg_314 = 64'd7;

assign x_bits_V_addr_reg_249 = 64'd0;

assign zext_ln21_fu_178_p1 = tmp_3_fu_150_p16;

assign zext_ln27_fu_211_p1 = tmp_4_fu_183_p16;

assign zext_ln33_fu_244_p1 = tmp_5_fu_216_p16;


reg find_kernel_block = 0;
// synthesis translate_off
`include "gen_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //gen

