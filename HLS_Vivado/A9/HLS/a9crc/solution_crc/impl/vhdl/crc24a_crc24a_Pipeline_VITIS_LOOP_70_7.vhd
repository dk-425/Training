-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
-- Version: 2022.2.2
-- Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity crc24a_crc24a_Pipeline_VITIS_LOOP_70_7 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    f_V_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    f_V_1_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    f_V_2_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    f_V_3_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    f_V_4_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    f_V_5_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    f_V_6_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    f_V_7_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    f_V_8_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    f_V_9_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    f_V_10_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    f_V_11_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    f_V_12_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    f_V_13_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    f_V_14_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    f_V_15_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    f_V_16_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    f_V_17_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    f_V_18_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    f_V_19_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    f_V_20_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    f_V_21_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    f_V_22_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    f_V_23_reload : IN STD_LOGIC_VECTOR (0 downto 0);
    d_V : IN STD_LOGIC_VECTOR (7 downto 0);
    o_V_2_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    o_V_2_out_ap_vld : OUT STD_LOGIC;
    m_V_2_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_V_2_out_ap_vld : OUT STD_LOGIC;
    h_V_2_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    h_V_2_out_ap_vld : OUT STD_LOGIC;
    g_V_2_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    g_V_2_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of crc24a_crc24a_Pipeline_VITIS_LOOP_70_7 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln70_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal p_Val2_s_fu_102 : STD_LOGIC_VECTOR (7 downto 0);
    signal g_V_1_fu_470_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_1_fu_106 : STD_LOGIC_VECTOR (7 downto 0);
    signal h_V_1_fu_484_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_2_fu_110 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_V_1_fu_492_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_3_fu_114 : STD_LOGIC_VECTOR (7 downto 0);
    signal o_V_1_fu_500_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_fu_118 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln70_fu_314_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_332_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln628_fu_402_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_410_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_348_p26 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln628_fu_406_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln368_fu_446_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln72_fu_342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_1_fu_428_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_438_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln75_fu_478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_2_fu_450_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_3_fu_460_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_s_fu_418_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component crc24a_mux_245_1_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        din8 : IN STD_LOGIC_VECTOR (0 downto 0);
        din9 : IN STD_LOGIC_VECTOR (0 downto 0);
        din10 : IN STD_LOGIC_VECTOR (0 downto 0);
        din11 : IN STD_LOGIC_VECTOR (0 downto 0);
        din12 : IN STD_LOGIC_VECTOR (0 downto 0);
        din13 : IN STD_LOGIC_VECTOR (0 downto 0);
        din14 : IN STD_LOGIC_VECTOR (0 downto 0);
        din15 : IN STD_LOGIC_VECTOR (0 downto 0);
        din16 : IN STD_LOGIC_VECTOR (0 downto 0);
        din17 : IN STD_LOGIC_VECTOR (0 downto 0);
        din18 : IN STD_LOGIC_VECTOR (0 downto 0);
        din19 : IN STD_LOGIC_VECTOR (0 downto 0);
        din20 : IN STD_LOGIC_VECTOR (0 downto 0);
        din21 : IN STD_LOGIC_VECTOR (0 downto 0);
        din22 : IN STD_LOGIC_VECTOR (0 downto 0);
        din23 : IN STD_LOGIC_VECTOR (0 downto 0);
        din24 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component crc24a_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_245_1_1_1_U195 : component crc24a_mux_245_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 1,
        din10_WIDTH => 1,
        din11_WIDTH => 1,
        din12_WIDTH => 1,
        din13_WIDTH => 1,
        din14_WIDTH => 1,
        din15_WIDTH => 1,
        din16_WIDTH => 1,
        din17_WIDTH => 1,
        din18_WIDTH => 1,
        din19_WIDTH => 1,
        din20_WIDTH => 1,
        din21_WIDTH => 1,
        din22_WIDTH => 1,
        din23_WIDTH => 1,
        din24_WIDTH => 5,
        dout_WIDTH => 1)
    port map (
        din0 => f_V_reload,
        din1 => f_V_1_reload,
        din2 => f_V_2_reload,
        din3 => f_V_3_reload,
        din4 => f_V_4_reload,
        din5 => f_V_5_reload,
        din6 => f_V_6_reload,
        din7 => f_V_7_reload,
        din8 => f_V_8_reload,
        din9 => f_V_9_reload,
        din10 => f_V_10_reload,
        din11 => f_V_11_reload,
        din12 => f_V_12_reload,
        din13 => f_V_13_reload,
        din14 => f_V_14_reload,
        din15 => f_V_15_reload,
        din16 => f_V_16_reload,
        din17 => f_V_17_reload,
        din18 => f_V_18_reload,
        din19 => f_V_19_reload,
        din20 => f_V_20_reload,
        din21 => f_V_21_reload,
        din22 => f_V_22_reload,
        din23 => f_V_23_reload,
        din24 => ap_sig_allocacmp_i_1,
        dout => tmp_2_fu_348_p26);

    flow_control_loop_pipe_sequential_init_U : component crc24a_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln70_fu_308_p2 = ap_const_lv1_0)) then 
                    i_fu_118 <= add_ln70_fu_314_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_118 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (icmp_ln70_fu_308_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                p_Val2_1_fu_106 <= h_V_1_fu_484_p3;
                p_Val2_2_fu_110 <= m_V_1_fu_492_p3;
                p_Val2_3_fu_114 <= o_V_1_fu_500_p3;
                p_Val2_s_fu_102 <= g_V_1_fu_470_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln70_fu_314_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv5_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start_int)
    begin
        if ((ap_start_int = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, icmp_ln70_fu_308_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln70_fu_308_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_loop_exit_ready, ap_done_reg, ap_start_int)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_state1, i_fu_118, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_118;
        end if; 
    end process;

    g_V_1_fu_470_p3 <= 
        p_Result_1_fu_428_p4 when (icmp_ln72_fu_342_p2(0) = '1') else 
        p_Val2_s_fu_102;
    g_V_2_out <= p_Val2_s_fu_102;

    g_V_2_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln70_fu_308_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln70_fu_308_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            g_V_2_out_ap_vld <= ap_const_logic_1;
        else 
            g_V_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    h_V_1_fu_484_p3 <= 
        p_Val2_1_fu_106 when (or_ln75_fu_478_p2(0) = '1') else 
        p_Result_2_fu_450_p4;
    h_V_2_out <= p_Val2_1_fu_106;

    h_V_2_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln70_fu_308_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln70_fu_308_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            h_V_2_out_ap_vld <= ap_const_logic_1;
        else 
            h_V_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln70_fu_308_p2 <= "1" when (ap_sig_allocacmp_i_1 = ap_const_lv5_18) else "0";
    icmp_ln72_fu_342_p2 <= "1" when (tmp_fu_332_p4 = ap_const_lv2_0) else "0";
    m_V_1_fu_492_p3 <= 
        p_Result_3_fu_460_p4 when (tmp_5_fu_438_p3(0) = '1') else 
        p_Val2_2_fu_110;
    m_V_2_out <= p_Val2_2_fu_110;

    m_V_2_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln70_fu_308_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln70_fu_308_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_V_2_out_ap_vld <= ap_const_logic_1;
        else 
            m_V_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    o_V_1_fu_500_p3 <= 
        p_Result_s_fu_418_p4 when (icmp_ln72_fu_342_p2(0) = '1') else 
        p_Val2_3_fu_114;
    o_V_2_out <= p_Val2_3_fu_114;

    o_V_2_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln70_fu_308_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln70_fu_308_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            o_V_2_out_ap_vld <= ap_const_logic_1;
        else 
            o_V_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    or_ln75_fu_478_p2 <= (tmp_5_fu_438_p3 or icmp_ln72_fu_342_p2);
    
    p_Result_1_fu_428_p4_proc : process(p_Val2_s_fu_102, zext_ln628_fu_402_p1, tmp_2_fu_348_p26)
    begin
        p_Result_1_fu_428_p4 <= p_Val2_s_fu_102;
        if to_integer(unsigned(zext_ln628_fu_402_p1)) >= p_Val2_s_fu_102'low and to_integer(unsigned(zext_ln628_fu_402_p1)) <= p_Val2_s_fu_102'high then
            p_Result_1_fu_428_p4(to_integer(unsigned(zext_ln628_fu_402_p1))) <= tmp_2_fu_348_p26(0);
        end if;
    end process;

    
    p_Result_2_fu_450_p4_proc : process(p_Val2_1_fu_106, zext_ln368_fu_446_p1, tmp_2_fu_348_p26)
    begin
        p_Result_2_fu_450_p4 <= p_Val2_1_fu_106;
        if to_integer(unsigned(zext_ln368_fu_446_p1)) >= p_Val2_1_fu_106'low and to_integer(unsigned(zext_ln368_fu_446_p1)) <= p_Val2_1_fu_106'high then
            p_Result_2_fu_450_p4(to_integer(unsigned(zext_ln368_fu_446_p1))) <= tmp_2_fu_348_p26(0);
        end if;
    end process;

    
    p_Result_3_fu_460_p4_proc : process(p_Val2_2_fu_110, zext_ln368_fu_446_p1, tmp_2_fu_348_p26)
    begin
        p_Result_3_fu_460_p4 <= p_Val2_2_fu_110;
        if to_integer(unsigned(zext_ln368_fu_446_p1)) >= p_Val2_2_fu_110'low and to_integer(unsigned(zext_ln368_fu_446_p1)) <= p_Val2_2_fu_110'high then
            p_Result_3_fu_460_p4(to_integer(unsigned(zext_ln368_fu_446_p1))) <= tmp_2_fu_348_p26(0);
        end if;
    end process;

    
    p_Result_s_fu_418_p4_proc : process(p_Val2_3_fu_114, zext_ln628_fu_402_p1, tmp_1_fu_410_p3)
    begin
        p_Result_s_fu_418_p4 <= p_Val2_3_fu_114;
        if to_integer(unsigned(zext_ln628_fu_402_p1)) >= p_Val2_3_fu_114'low and to_integer(unsigned(zext_ln628_fu_402_p1)) <= p_Val2_3_fu_114'high then
            p_Result_s_fu_418_p4(to_integer(unsigned(zext_ln628_fu_402_p1))) <= tmp_1_fu_410_p3(0);
        end if;
    end process;

    tmp_1_fu_410_p3 <= d_V(to_integer(unsigned(zext_ln628_fu_402_p1)) downto to_integer(unsigned(zext_ln628_fu_402_p1))) when (to_integer(unsigned(zext_ln628_fu_402_p1)) >= 0 and to_integer(unsigned(zext_ln628_fu_402_p1)) <=7) else "-";
    tmp_5_fu_438_p3 <= ap_sig_allocacmp_i_1(4 downto 4);
    tmp_fu_332_p4 <= ap_sig_allocacmp_i_1(4 downto 3);
    trunc_ln628_fu_406_p1 <= ap_sig_allocacmp_i_1(3 - 1 downto 0);
    zext_ln368_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln628_fu_406_p1),32));
    zext_ln628_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_1),32));
end behav;
