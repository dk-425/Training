// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module crc24a_crc24a_Pipeline_VITIS_LOOP_67_7 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        c_TREADY,
        startIdx_reload,
        icmp_ln60_lcssa,
        mux_case_09555_reload,
        conv4_i_19299558_reload,
        conv4_i_19589561_reload,
        conv4_i_19879564_reload,
        conv4_i_110169567_reload,
        conv4_i_110459570_reload,
        conv4_i_615959573_reload,
        conv4_i_722619576_reload,
        conv4_i_722909579_reload,
        conv4_i_723199582_reload,
        conv4_i_1029279585_reload,
        conv4_i_1029569588_reload,
        conv4_i_1029859591_reload,
        conv4_i_1335939594_reload,
        conv4_i_1442599597_reload,
        conv4_i_1442889600_reload,
        conv4_i_1443179603_reload,
        conv4_i_1749259606_reload,
        conv4_i_1855919609_reload,
        conv4_i_1962579612_reload,
        conv4_i_2069239615_reload,
        conv4_i_2175899618_reload,
        conv4_i_2176189621_reload,
        conv4_i_2382559624_reload,
        mux_case_249269627_reload,
        mux_case_2515889630_reload,
        mux_case_2615899633_reload,
        mux_case_2715909636_reload,
        mux_case_2815919639_reload,
        mux_case_2915929642_reload,
        mux_case_3022589645_reload,
        mux_case_3129229648_reload,
        mux_case_3229239651_reload,
        mux_case_3329249654_reload,
        mux_case_3435889657_reload,
        mux_case_3535899660_reload,
        mux_case_3635909663_reload,
        mux_case_3742569666_reload,
        mux_case_3849209669_reload,
        mux_case_3949219672_reload,
        mux_case_4049229675_reload,
        mux_case_4155889678_reload,
        mux_case_4262549681_reload,
        mux_case_4369209684_reload,
        mux_case_4475869687_reload,
        mux_case_4582519690_reload,
        mux_case_4682529693_reload,
        mux_case_4752489189696_reload,
        c_TDATA,
        c_TVALID
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   c_TREADY;
input  [5:0] startIdx_reload;
input  [0:0] icmp_ln60_lcssa;
input  [0:0] mux_case_09555_reload;
input  [0:0] conv4_i_19299558_reload;
input  [0:0] conv4_i_19589561_reload;
input  [0:0] conv4_i_19879564_reload;
input  [0:0] conv4_i_110169567_reload;
input  [0:0] conv4_i_110459570_reload;
input  [0:0] conv4_i_615959573_reload;
input  [0:0] conv4_i_722619576_reload;
input  [0:0] conv4_i_722909579_reload;
input  [0:0] conv4_i_723199582_reload;
input  [0:0] conv4_i_1029279585_reload;
input  [0:0] conv4_i_1029569588_reload;
input  [0:0] conv4_i_1029859591_reload;
input  [0:0] conv4_i_1335939594_reload;
input  [0:0] conv4_i_1442599597_reload;
input  [0:0] conv4_i_1442889600_reload;
input  [0:0] conv4_i_1443179603_reload;
input  [0:0] conv4_i_1749259606_reload;
input  [0:0] conv4_i_1855919609_reload;
input  [0:0] conv4_i_1962579612_reload;
input  [0:0] conv4_i_2069239615_reload;
input  [0:0] conv4_i_2175899618_reload;
input  [0:0] conv4_i_2176189621_reload;
input  [0:0] conv4_i_2382559624_reload;
input  [0:0] mux_case_249269627_reload;
input  [0:0] mux_case_2515889630_reload;
input  [0:0] mux_case_2615899633_reload;
input  [0:0] mux_case_2715909636_reload;
input  [0:0] mux_case_2815919639_reload;
input  [0:0] mux_case_2915929642_reload;
input  [0:0] mux_case_3022589645_reload;
input  [0:0] mux_case_3129229648_reload;
input  [0:0] mux_case_3229239651_reload;
input  [0:0] mux_case_3329249654_reload;
input  [0:0] mux_case_3435889657_reload;
input  [0:0] mux_case_3535899660_reload;
input  [0:0] mux_case_3635909663_reload;
input  [0:0] mux_case_3742569666_reload;
input  [0:0] mux_case_3849209669_reload;
input  [0:0] mux_case_3949219672_reload;
input  [0:0] mux_case_4049229675_reload;
input  [0:0] mux_case_4155889678_reload;
input  [0:0] mux_case_4262549681_reload;
input  [0:0] mux_case_4369209684_reload;
input  [0:0] mux_case_4475869687_reload;
input  [0:0] mux_case_4582519690_reload;
input  [0:0] mux_case_4682529693_reload;
input  [0:0] mux_case_4752489189696_reload;
output  [63:0] c_TDATA;
output   c_TVALID;

reg ap_idle;
reg c_TVALID;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln70_reg_972;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state2_io;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln67_fu_511_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    c_TDATA_blk_n;
wire    ap_block_pp0_stage0;
wire   [0:0] e_bits_V_8_fu_541_p50;
reg   [0:0] e_bits_V_8_reg_949;
reg    ap_block_pp0_stage0_11001;
wire   [2:0] trunc_ln69_fu_643_p1;
reg   [2:0] trunc_ln69_reg_961;
wire   [0:0] icmp_ln70_fu_647_p2;
reg   [0:0] e_bits_V_fu_160;
wire   [0:0] e_bits_V_16_fu_802_p3;
reg   [0:0] e_bits_V_1_fu_164;
wire   [0:0] e_bits_V_15_fu_795_p3;
reg   [0:0] e_bits_V_2_fu_168;
wire   [0:0] e_bits_V_14_fu_788_p3;
reg   [0:0] e_bits_V_3_fu_172;
wire   [0:0] e_bits_V_13_fu_781_p3;
reg   [0:0] e_bits_V_4_fu_176;
wire   [0:0] e_bits_V_12_fu_774_p3;
reg   [0:0] e_bits_V_5_fu_180;
wire   [0:0] e_bits_V_11_fu_767_p3;
reg   [0:0] e_bits_V_6_fu_184;
wire   [0:0] e_bits_V_10_fu_760_p3;
reg   [0:0] e_bits_V_7_fu_188;
wire   [0:0] e_bits_V_9_fu_753_p3;
reg   [4:0] i_fu_192;
wire   [4:0] add_ln70_fu_517_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_i_1;
reg    ap_block_pp0_stage0_01001;
wire   [5:0] zext_ln69_fu_523_p1;
wire   [5:0] add_ln69_fu_527_p2;
wire   [5:0] e_bits_V_8_fu_541_p49;
wire   [0:0] icmp_ln69_2_fu_692_p2;
wire   [0:0] icmp_ln69_1_fu_687_p2;
wire   [0:0] icmp_ln69_4_fu_702_p2;
wire   [0:0] icmp_ln69_3_fu_697_p2;
wire   [0:0] or_ln69_2_fu_723_p2;
wire   [0:0] icmp_ln69_5_fu_707_p2;
wire   [0:0] or_ln69_fu_717_p2;
wire   [0:0] icmp_ln69_fu_682_p2;
wire   [0:0] or_ln69_1_fu_735_p2;
wire   [0:0] icmp_ln69_6_fu_712_p2;
wire   [0:0] or_ln69_4_fu_741_p2;
wire   [0:0] or_ln69_3_fu_729_p2;
wire   [0:0] or_ln69_5_fu_747_p2;
wire   [56:0] tmp_8_fu_849_p16;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

crc24a_mux_486_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 1 ),
    .din5_WIDTH( 1 ),
    .din6_WIDTH( 1 ),
    .din7_WIDTH( 1 ),
    .din8_WIDTH( 1 ),
    .din9_WIDTH( 1 ),
    .din10_WIDTH( 1 ),
    .din11_WIDTH( 1 ),
    .din12_WIDTH( 1 ),
    .din13_WIDTH( 1 ),
    .din14_WIDTH( 1 ),
    .din15_WIDTH( 1 ),
    .din16_WIDTH( 1 ),
    .din17_WIDTH( 1 ),
    .din18_WIDTH( 1 ),
    .din19_WIDTH( 1 ),
    .din20_WIDTH( 1 ),
    .din21_WIDTH( 1 ),
    .din22_WIDTH( 1 ),
    .din23_WIDTH( 1 ),
    .din24_WIDTH( 1 ),
    .din25_WIDTH( 1 ),
    .din26_WIDTH( 1 ),
    .din27_WIDTH( 1 ),
    .din28_WIDTH( 1 ),
    .din29_WIDTH( 1 ),
    .din30_WIDTH( 1 ),
    .din31_WIDTH( 1 ),
    .din32_WIDTH( 1 ),
    .din33_WIDTH( 1 ),
    .din34_WIDTH( 1 ),
    .din35_WIDTH( 1 ),
    .din36_WIDTH( 1 ),
    .din37_WIDTH( 1 ),
    .din38_WIDTH( 1 ),
    .din39_WIDTH( 1 ),
    .din40_WIDTH( 1 ),
    .din41_WIDTH( 1 ),
    .din42_WIDTH( 1 ),
    .din43_WIDTH( 1 ),
    .din44_WIDTH( 1 ),
    .din45_WIDTH( 1 ),
    .din46_WIDTH( 1 ),
    .din47_WIDTH( 1 ),
    .din48_WIDTH( 6 ),
    .dout_WIDTH( 1 ))
mux_486_1_1_1_U200(
    .din0(mux_case_09555_reload),
    .din1(conv4_i_19299558_reload),
    .din2(conv4_i_19589561_reload),
    .din3(conv4_i_19879564_reload),
    .din4(conv4_i_110169567_reload),
    .din5(conv4_i_110459570_reload),
    .din6(conv4_i_615959573_reload),
    .din7(conv4_i_722619576_reload),
    .din8(conv4_i_722909579_reload),
    .din9(conv4_i_723199582_reload),
    .din10(conv4_i_1029279585_reload),
    .din11(conv4_i_1029569588_reload),
    .din12(conv4_i_1029859591_reload),
    .din13(conv4_i_1335939594_reload),
    .din14(conv4_i_1442599597_reload),
    .din15(conv4_i_1442889600_reload),
    .din16(conv4_i_1443179603_reload),
    .din17(conv4_i_1749259606_reload),
    .din18(conv4_i_1855919609_reload),
    .din19(conv4_i_1962579612_reload),
    .din20(conv4_i_2069239615_reload),
    .din21(conv4_i_2175899618_reload),
    .din22(conv4_i_2176189621_reload),
    .din23(conv4_i_2382559624_reload),
    .din24(mux_case_249269627_reload),
    .din25(mux_case_2515889630_reload),
    .din26(mux_case_2615899633_reload),
    .din27(mux_case_2715909636_reload),
    .din28(mux_case_2815919639_reload),
    .din29(mux_case_2915929642_reload),
    .din30(mux_case_3022589645_reload),
    .din31(mux_case_3129229648_reload),
    .din32(mux_case_3229239651_reload),
    .din33(mux_case_3329249654_reload),
    .din34(mux_case_3435889657_reload),
    .din35(mux_case_3535899660_reload),
    .din36(mux_case_3635909663_reload),
    .din37(mux_case_3742569666_reload),
    .din38(mux_case_3849209669_reload),
    .din39(mux_case_3949219672_reload),
    .din40(mux_case_4049229675_reload),
    .din41(mux_case_4155889678_reload),
    .din42(mux_case_4262549681_reload),
    .din43(mux_case_4369209684_reload),
    .din44(mux_case_4475869687_reload),
    .din45(mux_case_4582519690_reload),
    .din46(mux_case_4682529693_reload),
    .din47(mux_case_4752489189696_reload),
    .din48(e_bits_V_8_fu_541_p49),
    .dout(e_bits_V_8_fu_541_p50)
);

crc24a_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln67_fu_511_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_192 <= add_ln70_fu_517_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_192 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_bits_V_1_fu_164 <= e_bits_V_15_fu_795_p3;
        e_bits_V_2_fu_168 <= e_bits_V_14_fu_788_p3;
        e_bits_V_3_fu_172 <= e_bits_V_13_fu_781_p3;
        e_bits_V_4_fu_176 <= e_bits_V_12_fu_774_p3;
        e_bits_V_5_fu_180 <= e_bits_V_11_fu_767_p3;
        e_bits_V_6_fu_184 <= e_bits_V_10_fu_760_p3;
        e_bits_V_7_fu_188 <= e_bits_V_9_fu_753_p3;
        e_bits_V_fu_160 <= e_bits_V_16_fu_802_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln67_fu_511_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_bits_V_8_reg_949 <= e_bits_V_8_fu_541_p50;
        icmp_ln70_reg_972 <= icmp_ln70_fu_647_p2;
        trunc_ln69_reg_961 <= trunc_ln69_fu_643_p1;
    end
end

always @ (*) begin
    if (((icmp_ln67_fu_511_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_1 = 5'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_192;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln70_reg_972 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_TDATA_blk_n = c_TREADY;
    end else begin
        c_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln70_reg_972 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_TVALID = 1'b1;
    end else begin
        c_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln69_fu_527_p2 = (zext_ln69_fu_523_p1 + startIdx_reload);

assign add_ln70_fu_517_p2 = (ap_sig_allocacmp_i_1 + 5'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((icmp_ln70_reg_972 == 1'd1) & (c_TREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state2_io) | ((icmp_ln70_reg_972 == 1'd1) & (c_TREADY == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state2_io) | ((icmp_ln70_reg_972 == 1'd1) & (c_TREADY == 1'b0))));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_io = ((icmp_ln70_reg_972 == 1'd1) & (c_TREADY == 1'b0));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((icmp_ln70_reg_972 == 1'd1) & (c_TREADY == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign c_TDATA = tmp_8_fu_849_p16;

assign e_bits_V_10_fu_760_p3 = ((icmp_ln69_6_fu_712_p2[0:0] == 1'b1) ? e_bits_V_8_reg_949 : e_bits_V_6_fu_184);

assign e_bits_V_11_fu_767_p3 = ((icmp_ln69_5_fu_707_p2[0:0] == 1'b1) ? e_bits_V_8_reg_949 : e_bits_V_5_fu_180);

assign e_bits_V_12_fu_774_p3 = ((icmp_ln69_4_fu_702_p2[0:0] == 1'b1) ? e_bits_V_8_reg_949 : e_bits_V_4_fu_176);

assign e_bits_V_13_fu_781_p3 = ((icmp_ln69_3_fu_697_p2[0:0] == 1'b1) ? e_bits_V_8_reg_949 : e_bits_V_3_fu_172);

assign e_bits_V_14_fu_788_p3 = ((icmp_ln69_2_fu_692_p2[0:0] == 1'b1) ? e_bits_V_8_reg_949 : e_bits_V_2_fu_168);

assign e_bits_V_15_fu_795_p3 = ((icmp_ln69_1_fu_687_p2[0:0] == 1'b1) ? e_bits_V_8_reg_949 : e_bits_V_1_fu_164);

assign e_bits_V_16_fu_802_p3 = ((icmp_ln69_fu_682_p2[0:0] == 1'b1) ? e_bits_V_8_reg_949 : e_bits_V_fu_160);

assign e_bits_V_8_fu_541_p49 = ((icmp_ln60_lcssa[0:0] == 1'b1) ? zext_ln69_fu_523_p1 : add_ln69_fu_527_p2);

assign e_bits_V_9_fu_753_p3 = ((or_ln69_5_fu_747_p2[0:0] == 1'b1) ? e_bits_V_7_fu_188 : e_bits_V_8_reg_949);

assign icmp_ln67_fu_511_p2 = ((ap_sig_allocacmp_i_1 == 5'd24) ? 1'b1 : 1'b0);

assign icmp_ln69_1_fu_687_p2 = ((trunc_ln69_reg_961 == 3'd1) ? 1'b1 : 1'b0);

assign icmp_ln69_2_fu_692_p2 = ((trunc_ln69_reg_961 == 3'd2) ? 1'b1 : 1'b0);

assign icmp_ln69_3_fu_697_p2 = ((trunc_ln69_reg_961 == 3'd3) ? 1'b1 : 1'b0);

assign icmp_ln69_4_fu_702_p2 = ((trunc_ln69_reg_961 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln69_5_fu_707_p2 = ((trunc_ln69_reg_961 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln69_6_fu_712_p2 = ((trunc_ln69_reg_961 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln69_fu_682_p2 = ((trunc_ln69_reg_961 == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln70_fu_647_p2 = ((trunc_ln69_fu_643_p1 == 3'd7) ? 1'b1 : 1'b0);

assign or_ln69_1_fu_735_p2 = (or_ln69_fu_717_p2 | icmp_ln69_fu_682_p2);

assign or_ln69_2_fu_723_p2 = (icmp_ln69_4_fu_702_p2 | icmp_ln69_3_fu_697_p2);

assign or_ln69_3_fu_729_p2 = (or_ln69_2_fu_723_p2 | icmp_ln69_5_fu_707_p2);

assign or_ln69_4_fu_741_p2 = (or_ln69_1_fu_735_p2 | icmp_ln69_6_fu_712_p2);

assign or_ln69_5_fu_747_p2 = (or_ln69_4_fu_741_p2 | or_ln69_3_fu_729_p2);

assign or_ln69_fu_717_p2 = (icmp_ln69_2_fu_692_p2 | icmp_ln69_1_fu_687_p2);

assign tmp_8_fu_849_p16 = {{{{{{{{{{{{{{{e_bits_V_9_fu_753_p3}, {7'd0}}, {e_bits_V_10_fu_760_p3}}, {7'd0}}, {e_bits_V_11_fu_767_p3}}, {7'd0}}, {e_bits_V_12_fu_774_p3}}, {7'd0}}, {e_bits_V_13_fu_781_p3}}, {7'd0}}, {e_bits_V_14_fu_788_p3}}, {7'd0}}, {e_bits_V_15_fu_795_p3}}, {7'd0}}, {e_bits_V_16_fu_802_p3}};

assign trunc_ln69_fu_643_p1 = ap_sig_allocacmp_i_1[2:0];

assign zext_ln69_fu_523_p1 = ap_sig_allocacmp_i_1;

endmodule //crc24a_crc24a_Pipeline_VITIS_LOOP_67_7
