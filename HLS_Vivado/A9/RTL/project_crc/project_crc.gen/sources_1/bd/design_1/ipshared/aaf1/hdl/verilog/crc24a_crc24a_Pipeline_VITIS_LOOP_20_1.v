// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module crc24a_crc24a_Pipeline_VITIS_LOOP_20_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_TVALID,
        a_TDATA,
        a_TREADY,
        p_0_7_0_0_09814_out,
        p_0_7_0_0_09814_out_ap_vld,
        p_0_6_0_0_09811_out,
        p_0_6_0_0_09811_out_ap_vld,
        p_0_5_0_0_09808_out,
        p_0_5_0_0_09808_out_ap_vld,
        p_0_4_0_0_09805_out,
        p_0_4_0_0_09805_out_ap_vld,
        p_0_3_0_0_09802_out,
        p_0_3_0_0_09802_out_ap_vld,
        p_0_2_0_0_09799_out,
        p_0_2_0_0_09799_out_ap_vld,
        p_0_1_0_0_09796_out,
        p_0_1_0_0_09796_out_ap_vld,
        p_0_0_0_0_09793_out,
        p_0_0_0_0_09793_out_ap_vld,
        p_0_7_0_0_09790_out,
        p_0_7_0_0_09790_out_ap_vld,
        p_0_6_0_0_09787_out,
        p_0_6_0_0_09787_out_ap_vld,
        p_0_5_0_0_09784_out,
        p_0_5_0_0_09784_out_ap_vld,
        p_0_4_0_0_09781_out,
        p_0_4_0_0_09781_out_ap_vld,
        p_0_3_0_0_09778_out,
        p_0_3_0_0_09778_out_ap_vld,
        p_0_2_0_0_09775_out,
        p_0_2_0_0_09775_out_ap_vld,
        p_0_1_0_0_09772_out,
        p_0_1_0_0_09772_out_ap_vld,
        p_0_0_0_0_09769_out,
        p_0_0_0_0_09769_out_ap_vld,
        p_0_7_0_0_09766_out,
        p_0_7_0_0_09766_out_ap_vld,
        p_0_6_0_0_09763_out,
        p_0_6_0_0_09763_out_ap_vld,
        p_0_5_0_0_09760_out,
        p_0_5_0_0_09760_out_ap_vld,
        p_0_4_0_0_09757_out,
        p_0_4_0_0_09757_out_ap_vld,
        p_0_3_0_0_09754_out,
        p_0_3_0_0_09754_out_ap_vld,
        p_0_2_0_0_09751_out,
        p_0_2_0_0_09751_out_ap_vld,
        p_0_1_0_0_09748_out,
        p_0_1_0_0_09748_out_ap_vld,
        p_0_0_0_0_09745_out,
        p_0_0_0_0_09745_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   a_TVALID;
input  [63:0] a_TDATA;
output   a_TREADY;
output  [0:0] p_0_7_0_0_09814_out;
output   p_0_7_0_0_09814_out_ap_vld;
output  [0:0] p_0_6_0_0_09811_out;
output   p_0_6_0_0_09811_out_ap_vld;
output  [0:0] p_0_5_0_0_09808_out;
output   p_0_5_0_0_09808_out_ap_vld;
output  [0:0] p_0_4_0_0_09805_out;
output   p_0_4_0_0_09805_out_ap_vld;
output  [0:0] p_0_3_0_0_09802_out;
output   p_0_3_0_0_09802_out_ap_vld;
output  [0:0] p_0_2_0_0_09799_out;
output   p_0_2_0_0_09799_out_ap_vld;
output  [0:0] p_0_1_0_0_09796_out;
output   p_0_1_0_0_09796_out_ap_vld;
output  [0:0] p_0_0_0_0_09793_out;
output   p_0_0_0_0_09793_out_ap_vld;
output  [0:0] p_0_7_0_0_09790_out;
output   p_0_7_0_0_09790_out_ap_vld;
output  [0:0] p_0_6_0_0_09787_out;
output   p_0_6_0_0_09787_out_ap_vld;
output  [0:0] p_0_5_0_0_09784_out;
output   p_0_5_0_0_09784_out_ap_vld;
output  [0:0] p_0_4_0_0_09781_out;
output   p_0_4_0_0_09781_out_ap_vld;
output  [0:0] p_0_3_0_0_09778_out;
output   p_0_3_0_0_09778_out_ap_vld;
output  [0:0] p_0_2_0_0_09775_out;
output   p_0_2_0_0_09775_out_ap_vld;
output  [0:0] p_0_1_0_0_09772_out;
output   p_0_1_0_0_09772_out_ap_vld;
output  [0:0] p_0_0_0_0_09769_out;
output   p_0_0_0_0_09769_out_ap_vld;
output  [0:0] p_0_7_0_0_09766_out;
output   p_0_7_0_0_09766_out_ap_vld;
output  [0:0] p_0_6_0_0_09763_out;
output   p_0_6_0_0_09763_out_ap_vld;
output  [0:0] p_0_5_0_0_09760_out;
output   p_0_5_0_0_09760_out_ap_vld;
output  [0:0] p_0_4_0_0_09757_out;
output   p_0_4_0_0_09757_out_ap_vld;
output  [0:0] p_0_3_0_0_09754_out;
output   p_0_3_0_0_09754_out_ap_vld;
output  [0:0] p_0_2_0_0_09751_out;
output   p_0_2_0_0_09751_out_ap_vld;
output  [0:0] p_0_1_0_0_09748_out;
output   p_0_1_0_0_09748_out_ap_vld;
output  [0:0] p_0_0_0_0_09745_out;
output   p_0_0_0_0_09745_out_ap_vld;

reg ap_idle;
reg a_TREADY;
reg p_0_7_0_0_09814_out_ap_vld;
reg p_0_6_0_0_09811_out_ap_vld;
reg p_0_5_0_0_09808_out_ap_vld;
reg p_0_4_0_0_09805_out_ap_vld;
reg p_0_3_0_0_09802_out_ap_vld;
reg p_0_2_0_0_09799_out_ap_vld;
reg p_0_1_0_0_09796_out_ap_vld;
reg p_0_0_0_0_09793_out_ap_vld;
reg p_0_7_0_0_09790_out_ap_vld;
reg p_0_6_0_0_09787_out_ap_vld;
reg p_0_5_0_0_09784_out_ap_vld;
reg p_0_4_0_0_09781_out_ap_vld;
reg p_0_3_0_0_09778_out_ap_vld;
reg p_0_2_0_0_09775_out_ap_vld;
reg p_0_1_0_0_09772_out_ap_vld;
reg p_0_0_0_0_09769_out_ap_vld;
reg p_0_7_0_0_09766_out_ap_vld;
reg p_0_6_0_0_09763_out_ap_vld;
reg p_0_5_0_0_09760_out_ap_vld;
reg p_0_4_0_0_09757_out_ap_vld;
reg p_0_3_0_0_09754_out_ap_vld;
reg p_0_2_0_0_09751_out_ap_vld;
reg p_0_1_0_0_09748_out_ap_vld;
reg p_0_0_0_0_09745_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln20_fu_382_p2;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    a_TDATA_blk_n;
reg   [1:0] i_fu_100;
wire   [1:0] add_ln20_fu_388_p2;
wire    ap_loop_init;
reg   [1:0] ap_sig_allocacmp_i_3;
wire   [1:0] i_3_load_fu_379_p1;
reg   [0:0] d_bits_V_fu_104;
wire   [0:0] d_bits_V_24_fu_394_p1;
reg   [0:0] d_bits_V_1_fu_108;
reg   [0:0] d_bits_V_2_fu_112;
reg   [0:0] d_bits_V_3_fu_116;
reg   [0:0] d_bits_V_4_fu_120;
reg   [0:0] d_bits_V_5_fu_124;
reg   [0:0] d_bits_V_6_fu_128;
reg   [0:0] d_bits_V_7_fu_132;
reg   [0:0] d_bits_V_8_fu_136;
reg   [0:0] d_bits_V_9_fu_140;
reg   [0:0] d_bits_V_10_fu_144;
reg   [0:0] d_bits_V_11_fu_148;
reg   [0:0] d_bits_V_12_fu_152;
reg   [0:0] d_bits_V_13_fu_156;
reg   [0:0] d_bits_V_14_fu_160;
reg   [0:0] d_bits_V_15_fu_164;
reg   [0:0] d_bits_V_16_fu_168;
reg   [0:0] d_bits_V_17_fu_172;
reg   [0:0] d_bits_V_18_fu_176;
reg   [0:0] d_bits_V_19_fu_180;
reg   [0:0] d_bits_V_20_fu_184;
reg   [0:0] d_bits_V_21_fu_188;
reg   [0:0] d_bits_V_22_fu_192;
reg   [0:0] d_bits_V_23_fu_196;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
reg    ap_condition_282;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

crc24a_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_start_int == 1'b0) | ((1'b0 == a_TVALID) & (icmp_ln20_fu_382_p2 == 1'd0))) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_282)) begin
        if ((icmp_ln20_fu_382_p2 == 1'd0)) begin
            i_fu_100 <= add_ln20_fu_388_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_100 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == a_TVALID) & (icmp_ln20_fu_382_p2 == 1'd0))) & (icmp_ln20_fu_382_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (i_3_load_fu_379_p1 == 2'd0))) begin
        d_bits_V_10_fu_144 <= a_TDATA[64'd16];
        d_bits_V_11_fu_148 <= a_TDATA[64'd24];
        d_bits_V_12_fu_152 <= a_TDATA[64'd32];
        d_bits_V_13_fu_156 <= a_TDATA[64'd40];
        d_bits_V_14_fu_160 <= a_TDATA[64'd48];
        d_bits_V_15_fu_164 <= a_TDATA[64'd56];
        d_bits_V_8_fu_136 <= d_bits_V_24_fu_394_p1;
        d_bits_V_9_fu_140 <= a_TDATA[64'd8];
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == a_TVALID) & (icmp_ln20_fu_382_p2 == 1'd0))) & ~(i_3_load_fu_379_p1 == 2'd0) & ~(i_3_load_fu_379_p1 == 2'd1) & (icmp_ln20_fu_382_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        d_bits_V_16_fu_168 <= d_bits_V_24_fu_394_p1;
        d_bits_V_17_fu_172 <= a_TDATA[64'd8];
        d_bits_V_18_fu_176 <= a_TDATA[64'd16];
        d_bits_V_19_fu_180 <= a_TDATA[64'd24];
        d_bits_V_20_fu_184 <= a_TDATA[64'd32];
        d_bits_V_21_fu_188 <= a_TDATA[64'd40];
        d_bits_V_22_fu_192 <= a_TDATA[64'd48];
        d_bits_V_23_fu_196 <= a_TDATA[64'd56];
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == a_TVALID) & (icmp_ln20_fu_382_p2 == 1'd0))) & (icmp_ln20_fu_382_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (i_3_load_fu_379_p1 == 2'd1))) begin
        d_bits_V_1_fu_108 <= a_TDATA[64'd8];
        d_bits_V_2_fu_112 <= a_TDATA[64'd16];
        d_bits_V_3_fu_116 <= a_TDATA[64'd24];
        d_bits_V_4_fu_120 <= a_TDATA[64'd32];
        d_bits_V_5_fu_124 <= a_TDATA[64'd40];
        d_bits_V_6_fu_128 <= a_TDATA[64'd48];
        d_bits_V_7_fu_132 <= a_TDATA[64'd56];
        d_bits_V_fu_104 <= d_bits_V_24_fu_394_p1;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln20_fu_382_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        a_TDATA_blk_n = a_TVALID;
    end else begin
        a_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == a_TVALID) & (icmp_ln20_fu_382_p2 == 1'd0))) & (icmp_ln20_fu_382_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        a_TREADY = 1'b1;
    end else begin
        a_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) | ((1'b0 == a_TVALID) & (icmp_ln20_fu_382_p2 == 1'd0)))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == a_TVALID) & (icmp_ln20_fu_382_p2 == 1'd0))) & (icmp_ln20_fu_382_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == a_TVALID) & (icmp_ln20_fu_382_p2 == 1'd0))) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == a_TVALID) & (icmp_ln20_fu_382_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i_3 = 2'd0;
    end else begin
        ap_sig_allocacmp_i_3 = i_fu_100;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == a_TVALID) & (icmp_ln20_fu_382_p2 == 1'd0))) & (icmp_ln20_fu_382_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_0_0_0_0_09745_out_ap_vld = 1'b1;
    end else begin
        p_0_0_0_0_09745_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == a_TVALID) & (icmp_ln20_fu_382_p2 == 1'd0))) & (icmp_ln20_fu_382_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_0_0_0_0_09769_out_ap_vld = 1'b1;
    end else begin
        p_0_0_0_0_09769_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == a_TVALID) & (icmp_ln20_fu_382_p2 == 1'd0))) & (icmp_ln20_fu_382_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_0_0_0_0_09793_out_ap_vld = 1'b1;
    end else begin
        p_0_0_0_0_09793_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == a_TVALID) & (icmp_ln20_fu_382_p2 == 1'd0))) & (icmp_ln20_fu_382_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_0_1_0_0_09748_out_ap_vld = 1'b1;
    end else begin
        p_0_1_0_0_09748_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == a_TVALID) & (icmp_ln20_fu_382_p2 == 1'd0))) & (icmp_ln20_fu_382_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_0_1_0_0_09772_out_ap_vld = 1'b1;
    end else begin
        p_0_1_0_0_09772_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == a_TVALID) & (icmp_ln20_fu_382_p2 == 1'd0))) & (icmp_ln20_fu_382_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_0_1_0_0_09796_out_ap_vld = 1'b1;
    end else begin
        p_0_1_0_0_09796_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == a_TVALID) & (icmp_ln20_fu_382_p2 == 1'd0))) & (icmp_ln20_fu_382_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_0_2_0_0_09751_out_ap_vld = 1'b1;
    end else begin
        p_0_2_0_0_09751_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == a_TVALID) & (icmp_ln20_fu_382_p2 == 1'd0))) & (icmp_ln20_fu_382_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_0_2_0_0_09775_out_ap_vld = 1'b1;
    end else begin
        p_0_2_0_0_09775_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == a_TVALID) & (icmp_ln20_fu_382_p2 == 1'd0))) & (icmp_ln20_fu_382_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_0_2_0_0_09799_out_ap_vld = 1'b1;
    end else begin
        p_0_2_0_0_09799_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == a_TVALID) & (icmp_ln20_fu_382_p2 == 1'd0))) & (icmp_ln20_fu_382_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_0_3_0_0_09754_out_ap_vld = 1'b1;
    end else begin
        p_0_3_0_0_09754_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == a_TVALID) & (icmp_ln20_fu_382_p2 == 1'd0))) & (icmp_ln20_fu_382_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_0_3_0_0_09778_out_ap_vld = 1'b1;
    end else begin
        p_0_3_0_0_09778_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == a_TVALID) & (icmp_ln20_fu_382_p2 == 1'd0))) & (icmp_ln20_fu_382_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_0_3_0_0_09802_out_ap_vld = 1'b1;
    end else begin
        p_0_3_0_0_09802_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == a_TVALID) & (icmp_ln20_fu_382_p2 == 1'd0))) & (icmp_ln20_fu_382_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_0_4_0_0_09757_out_ap_vld = 1'b1;
    end else begin
        p_0_4_0_0_09757_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == a_TVALID) & (icmp_ln20_fu_382_p2 == 1'd0))) & (icmp_ln20_fu_382_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_0_4_0_0_09781_out_ap_vld = 1'b1;
    end else begin
        p_0_4_0_0_09781_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == a_TVALID) & (icmp_ln20_fu_382_p2 == 1'd0))) & (icmp_ln20_fu_382_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_0_4_0_0_09805_out_ap_vld = 1'b1;
    end else begin
        p_0_4_0_0_09805_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == a_TVALID) & (icmp_ln20_fu_382_p2 == 1'd0))) & (icmp_ln20_fu_382_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_0_5_0_0_09760_out_ap_vld = 1'b1;
    end else begin
        p_0_5_0_0_09760_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == a_TVALID) & (icmp_ln20_fu_382_p2 == 1'd0))) & (icmp_ln20_fu_382_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_0_5_0_0_09784_out_ap_vld = 1'b1;
    end else begin
        p_0_5_0_0_09784_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == a_TVALID) & (icmp_ln20_fu_382_p2 == 1'd0))) & (icmp_ln20_fu_382_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_0_5_0_0_09808_out_ap_vld = 1'b1;
    end else begin
        p_0_5_0_0_09808_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == a_TVALID) & (icmp_ln20_fu_382_p2 == 1'd0))) & (icmp_ln20_fu_382_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_0_6_0_0_09763_out_ap_vld = 1'b1;
    end else begin
        p_0_6_0_0_09763_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == a_TVALID) & (icmp_ln20_fu_382_p2 == 1'd0))) & (icmp_ln20_fu_382_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_0_6_0_0_09787_out_ap_vld = 1'b1;
    end else begin
        p_0_6_0_0_09787_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == a_TVALID) & (icmp_ln20_fu_382_p2 == 1'd0))) & (icmp_ln20_fu_382_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_0_6_0_0_09811_out_ap_vld = 1'b1;
    end else begin
        p_0_6_0_0_09811_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == a_TVALID) & (icmp_ln20_fu_382_p2 == 1'd0))) & (icmp_ln20_fu_382_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_0_7_0_0_09766_out_ap_vld = 1'b1;
    end else begin
        p_0_7_0_0_09766_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == a_TVALID) & (icmp_ln20_fu_382_p2 == 1'd0))) & (icmp_ln20_fu_382_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_0_7_0_0_09790_out_ap_vld = 1'b1;
    end else begin
        p_0_7_0_0_09790_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == a_TVALID) & (icmp_ln20_fu_382_p2 == 1'd0))) & (icmp_ln20_fu_382_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_0_7_0_0_09814_out_ap_vld = 1'b1;
    end else begin
        p_0_7_0_0_09814_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln20_fu_388_p2 = (ap_sig_allocacmp_i_3 + 2'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start_int == 1'b0) | ((1'b0 == a_TVALID) & (icmp_ln20_fu_382_p2 == 1'd0)));
end

always @ (*) begin
    ap_condition_282 = (~((ap_start_int == 1'b0) | ((1'b0 == a_TVALID) & (icmp_ln20_fu_382_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state1));
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign d_bits_V_24_fu_394_p1 = a_TDATA[0:0];

assign i_3_load_fu_379_p1 = ap_sig_allocacmp_i_3;

assign icmp_ln20_fu_382_p2 = ((ap_sig_allocacmp_i_3 == 2'd3) ? 1'b1 : 1'b0);

assign p_0_0_0_0_09745_out = d_bits_V_fu_104;

assign p_0_0_0_0_09769_out = d_bits_V_8_fu_136;

assign p_0_0_0_0_09793_out = d_bits_V_16_fu_168;

assign p_0_1_0_0_09748_out = d_bits_V_1_fu_108;

assign p_0_1_0_0_09772_out = d_bits_V_9_fu_140;

assign p_0_1_0_0_09796_out = d_bits_V_17_fu_172;

assign p_0_2_0_0_09751_out = d_bits_V_2_fu_112;

assign p_0_2_0_0_09775_out = d_bits_V_10_fu_144;

assign p_0_2_0_0_09799_out = d_bits_V_18_fu_176;

assign p_0_3_0_0_09754_out = d_bits_V_3_fu_116;

assign p_0_3_0_0_09778_out = d_bits_V_11_fu_148;

assign p_0_3_0_0_09802_out = d_bits_V_19_fu_180;

assign p_0_4_0_0_09757_out = d_bits_V_4_fu_120;

assign p_0_4_0_0_09781_out = d_bits_V_12_fu_152;

assign p_0_4_0_0_09805_out = d_bits_V_20_fu_184;

assign p_0_5_0_0_09760_out = d_bits_V_5_fu_124;

assign p_0_5_0_0_09784_out = d_bits_V_13_fu_156;

assign p_0_5_0_0_09808_out = d_bits_V_21_fu_188;

assign p_0_6_0_0_09763_out = d_bits_V_6_fu_128;

assign p_0_6_0_0_09787_out = d_bits_V_14_fu_160;

assign p_0_6_0_0_09811_out = d_bits_V_22_fu_192;

assign p_0_7_0_0_09766_out = d_bits_V_7_fu_132;

assign p_0_7_0_0_09790_out = d_bits_V_15_fu_164;

assign p_0_7_0_0_09814_out = d_bits_V_23_fu_196;

endmodule //crc24a_crc24a_Pipeline_VITIS_LOOP_20_1
