// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "fir.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic fir::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic fir::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> fir::ap_ST_fsm_state1 = "1";
const sc_lv<3> fir::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<3> fir::ap_ST_fsm_state6 = "100";
const sc_lv<32> fir::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool fir::ap_const_boolean_1 = true;
const sc_lv<32> fir::ap_const_lv32_1 = "1";
const bool fir::ap_const_boolean_0 = false;
const sc_lv<1> fir::ap_const_lv1_0 = "0";
const sc_lv<1> fir::ap_const_lv1_1 = "1";
const sc_lv<48> fir::ap_const_lv48_0 = "000000000000000000000000000000000000000000000000";
const sc_lv<3> fir::ap_const_lv3_3 = "11";
const sc_lv<2> fir::ap_const_lv2_2 = "10";
const sc_lv<2> fir::ap_const_lv2_1 = "1";
const sc_lv<32> fir::ap_const_lv32_2 = "10";
const sc_lv<3> fir::ap_const_lv3_0 = "000";
const sc_lv<3> fir::ap_const_lv3_7 = "111";

fir::fir(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_acc_V_fu_220_p2);
    sensitive << ( p_Val2_s_reg_90 );
    sensitive << ( r_V_2_reg_265 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state5_pp0_stage0_iter3);

    SC_METHOD(thread_ap_condition_131);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( tmp_1_fu_123_p3 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_phi_reg_pp0_iter0_p_s_reg_114);

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_c_V_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_6_fu_146_p1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_c_V_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_current_data_V_fu_187_p3);
    sensitive << ( shift_reg_V_1 );
    sensitive << ( sel_tmp2_fu_182_p2 );
    sensitive << ( sel_tmp1_fu_174_p3 );

    SC_METHOD(thread_i_1_fu_151_p2);
    sensitive << ( i_reg_103 );

    SC_METHOD(thread_r_V_2_fu_214_p0);
    sensitive << ( c_V_load_reg_260 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_r_V_2_fu_214_p1);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_phi_reg_pp0_iter2_p_s_reg_114 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_r_V_2_fu_214_p2);
    sensitive << ( r_V_2_fu_214_p0 );
    sensitive << ( r_V_2_fu_214_p1 );

    SC_METHOD(thread_sel_tmp1_fu_174_p3);
    sensitive << ( shift_reg_V_0 );
    sensitive << ( shift_reg_V_2 );
    sensitive << ( sel_tmp_fu_169_p2 );

    SC_METHOD(thread_sel_tmp2_fu_182_p2);
    sensitive << ( tmp_1_reg_231 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( tmp_2_reg_235 );
    sensitive << ( tmp_3_reg_239 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_sel_tmp_fu_169_p2);
    sensitive << ( tmp_1_reg_231 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( tmp_2_reg_235 );
    sensitive << ( tmp_3_reg_239 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_tmp_1_fu_123_p3);
    sensitive << ( i_reg_103 );

    SC_METHOD(thread_tmp_2_fu_131_p2);
    sensitive << ( i_reg_103 );
    sensitive << ( tmp_1_fu_123_p3 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_tmp_3_fu_137_p1);
    sensitive << ( i_reg_103 );

    SC_METHOD(thread_tmp_6_fu_146_p1);
    sensitive << ( i_reg_103 );

    SC_METHOD(thread_y_V);
    sensitive << ( p_Val2_s_reg_90 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_1_fu_123_p3 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "001";
    shift_reg_V_0 = "000000000000000000000000";
    shift_reg_V_2 = "000000000000000000000000";
    shift_reg_V_1 = "000000000000000000000000";
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter3 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "fir_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, y_V, "(port)y_V");
    sc_trace(mVcdFile, c_V_address0, "(port)c_V_address0");
    sc_trace(mVcdFile, c_V_ce0, "(port)c_V_ce0");
    sc_trace(mVcdFile, c_V_q0, "(port)c_V_q0");
    sc_trace(mVcdFile, x_V, "(port)x_V");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, shift_reg_V_0, "shift_reg_V_0");
    sc_trace(mVcdFile, shift_reg_V_2, "shift_reg_V_2");
    sc_trace(mVcdFile, shift_reg_V_1, "shift_reg_V_1");
    sc_trace(mVcdFile, p_Val2_s_reg_90, "p_Val2_s_reg_90");
    sc_trace(mVcdFile, i_reg_103, "i_reg_103");
    sc_trace(mVcdFile, tmp_1_fu_123_p3, "tmp_1_fu_123_p3");
    sc_trace(mVcdFile, tmp_1_reg_231, "tmp_1_reg_231");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter2, "ap_block_state4_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage0_iter3, "ap_block_state5_pp0_stage0_iter3");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, tmp_1_reg_231_pp0_iter1_reg, "tmp_1_reg_231_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_1_reg_231_pp0_iter2_reg, "tmp_1_reg_231_pp0_iter2_reg");
    sc_trace(mVcdFile, tmp_2_fu_131_p2, "tmp_2_fu_131_p2");
    sc_trace(mVcdFile, tmp_2_reg_235, "tmp_2_reg_235");
    sc_trace(mVcdFile, tmp_3_fu_137_p1, "tmp_3_fu_137_p1");
    sc_trace(mVcdFile, tmp_3_reg_239, "tmp_3_reg_239");
    sc_trace(mVcdFile, i_1_fu_151_p2, "i_1_fu_151_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, current_data_V_fu_187_p3, "current_data_V_fu_187_p3");
    sc_trace(mVcdFile, c_V_load_reg_260, "c_V_load_reg_260");
    sc_trace(mVcdFile, r_V_2_fu_214_p2, "r_V_2_fu_214_p2");
    sc_trace(mVcdFile, r_V_2_reg_265, "r_V_2_reg_265");
    sc_trace(mVcdFile, acc_V_fu_220_p2, "acc_V_fu_220_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter3, "ap_enable_reg_pp0_iter3");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter0_p_s_reg_114, "ap_phi_reg_pp0_iter0_p_s_reg_114");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter1_p_s_reg_114, "ap_phi_reg_pp0_iter1_p_s_reg_114");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter2_p_s_reg_114, "ap_phi_reg_pp0_iter2_p_s_reg_114");
    sc_trace(mVcdFile, tmp_6_fu_146_p1, "tmp_6_fu_146_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, sel_tmp_fu_169_p2, "sel_tmp_fu_169_p2");
    sc_trace(mVcdFile, sel_tmp2_fu_182_p2, "sel_tmp2_fu_182_p2");
    sc_trace(mVcdFile, sel_tmp1_fu_174_p3, "sel_tmp1_fu_174_p3");
    sc_trace(mVcdFile, r_V_2_fu_214_p0, "r_V_2_fu_214_p0");
    sc_trace(mVcdFile, r_V_2_fu_214_p1, "r_V_2_fu_214_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_condition_131, "ap_condition_131");
#endif

    }
    mHdltvinHandle.open("fir.hdltvin.dat");
    mHdltvoutHandle.open("fir.hdltvout.dat");
}

fir::~fir() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void fir::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state2.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter3 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter3 = ap_enable_reg_pp0_iter2.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter3 = ap_const_logic_0;
        }
    }
    if (esl_seteq<1,1,1>(ap_condition_131.read(), ap_const_boolean_1)) {
        if ((esl_seteq<1,1,1>(tmp_1_reg_231.read(), ap_const_lv1_0) && 
             esl_seteq<1,1,1>(tmp_2_reg_235.read(), ap_const_lv1_0))) {
            ap_phi_reg_pp0_iter2_p_s_reg_114 = current_data_V_fu_187_p3.read();
        } else if ((esl_seteq<1,1,1>(tmp_1_reg_231.read(), ap_const_lv1_0) && 
                    esl_seteq<1,1,1>(tmp_2_reg_235.read(), ap_const_lv1_1))) {
            ap_phi_reg_pp0_iter2_p_s_reg_114 = x_V.read();
        } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
            ap_phi_reg_pp0_iter2_p_s_reg_114 = ap_phi_reg_pp0_iter1_p_s_reg_114.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(tmp_1_fu_123_p3.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        i_reg_103 = i_1_fu_151_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_103 = ap_const_lv3_3;
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(tmp_1_reg_231_pp0_iter2_reg.read(), ap_const_lv1_0))) {
        p_Val2_s_reg_90 = acc_V_fu_220_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        p_Val2_s_reg_90 = ap_const_lv48_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        ap_phi_reg_pp0_iter1_p_s_reg_114 = ap_phi_reg_pp0_iter0_p_s_reg_114.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(tmp_1_reg_231.read(), ap_const_lv1_0))) {
        c_V_load_reg_260 = c_V_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(tmp_1_reg_231_pp0_iter1_reg.read(), ap_const_lv1_0))) {
        r_V_2_reg_265 = r_V_2_fu_214_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(tmp_1_fu_123_p3.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(tmp_2_fu_131_p2.read(), ap_const_lv1_1))) {
        shift_reg_V_0 = x_V.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(tmp_2_reg_235.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,2,2>(tmp_3_reg_239.read(), ap_const_lv2_1))) {
        shift_reg_V_1 = current_data_V_fu_187_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(tmp_2_reg_235.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,2,2>(tmp_3_reg_239.read(), ap_const_lv2_2))) {
        shift_reg_V_2 = current_data_V_fu_187_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_1_reg_231 = i_reg_103.read().range(2, 2);
        tmp_1_reg_231_pp0_iter1_reg = tmp_1_reg_231.read();
    }
    if (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) {
        tmp_1_reg_231_pp0_iter2_reg = tmp_1_reg_231_pp0_iter1_reg.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(tmp_1_fu_123_p3.read(), ap_const_lv1_0))) {
        tmp_2_reg_235 = tmp_2_fu_131_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(tmp_1_fu_123_p3.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_2_fu_131_p2.read(), ap_const_lv1_0))) {
        tmp_3_reg_239 = tmp_3_fu_137_p1.read();
    }
}

void fir::thread_acc_V_fu_220_p2() {
    acc_V_fu_220_p2 = (!p_Val2_s_reg_90.read().is_01() || !r_V_2_reg_265.read().is_01())? sc_lv<48>(): (sc_biguint<48>(p_Val2_s_reg_90.read()) + sc_biguint<48>(r_V_2_reg_265.read()));
}

void fir::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void fir::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void fir::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[2];
}

void fir::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void fir::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void fir::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void fir::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void fir::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void fir::thread_ap_block_state4_pp0_stage0_iter2() {
    ap_block_state4_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void fir::thread_ap_block_state5_pp0_stage0_iter3() {
    ap_block_state5_pp0_stage0_iter3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void fir::thread_ap_condition_131() {
    ap_condition_131 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()));
}

void fir::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(tmp_1_fu_123_p3.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void fir::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void fir::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void fir::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void fir::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter3.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void fir::thread_ap_phi_reg_pp0_iter0_p_s_reg_114() {
    ap_phi_reg_pp0_iter0_p_s_reg_114 =  (sc_lv<24>) ("XXXXXXXXXXXXXXXXXXXXXXXX");
}

void fir::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void fir::thread_c_V_address0() {
    c_V_address0 =  (sc_lv<2>) (tmp_6_fu_146_p1.read());
}

void fir::thread_c_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        c_V_ce0 = ap_const_logic_1;
    } else {
        c_V_ce0 = ap_const_logic_0;
    }
}

void fir::thread_current_data_V_fu_187_p3() {
    current_data_V_fu_187_p3 = (!sel_tmp2_fu_182_p2.read()[0].is_01())? sc_lv<24>(): ((sel_tmp2_fu_182_p2.read()[0].to_bool())? shift_reg_V_1.read(): sel_tmp1_fu_174_p3.read());
}

void fir::thread_i_1_fu_151_p2() {
    i_1_fu_151_p2 = (!i_reg_103.read().is_01() || !ap_const_lv3_7.is_01())? sc_lv<3>(): (sc_biguint<3>(i_reg_103.read()) + sc_bigint<3>(ap_const_lv3_7));
}

void fir::thread_r_V_2_fu_214_p0() {
    r_V_2_fu_214_p0 = c_V_load_reg_260.read();
}

void fir::thread_r_V_2_fu_214_p1() {
    r_V_2_fu_214_p1 = ap_phi_reg_pp0_iter2_p_s_reg_114.read();
}

void fir::thread_r_V_2_fu_214_p2() {
    r_V_2_fu_214_p2 = (!r_V_2_fu_214_p0.read().is_01() || !r_V_2_fu_214_p1.read().is_01())? sc_lv<48>(): sc_bigint<24>(r_V_2_fu_214_p0.read()) * sc_bigint<24>(r_V_2_fu_214_p1.read());
}

void fir::thread_sel_tmp1_fu_174_p3() {
    sel_tmp1_fu_174_p3 = (!sel_tmp_fu_169_p2.read()[0].is_01())? sc_lv<24>(): ((sel_tmp_fu_169_p2.read()[0].to_bool())? shift_reg_V_0.read(): shift_reg_V_2.read());
}

void fir::thread_sel_tmp2_fu_182_p2() {
    sel_tmp2_fu_182_p2 = (!tmp_3_reg_239.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(tmp_3_reg_239.read() == ap_const_lv2_2);
}

void fir::thread_sel_tmp_fu_169_p2() {
    sel_tmp_fu_169_p2 = (!tmp_3_reg_239.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(tmp_3_reg_239.read() == ap_const_lv2_1);
}

void fir::thread_tmp_1_fu_123_p3() {
    tmp_1_fu_123_p3 = i_reg_103.read().range(2, 2);
}

void fir::thread_tmp_2_fu_131_p2() {
    tmp_2_fu_131_p2 = (!i_reg_103.read().is_01() || !ap_const_lv3_0.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_103.read() == ap_const_lv3_0);
}

void fir::thread_tmp_3_fu_137_p1() {
    tmp_3_fu_137_p1 = i_reg_103.read().range(2-1, 0);
}

void fir::thread_tmp_6_fu_146_p1() {
    tmp_6_fu_146_p1 = esl_zext<64,3>(i_reg_103.read());
}

void fir::thread_y_V() {
    y_V = p_Val2_s_reg_90.read();
}

void fir::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter2.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(tmp_1_fu_123_p3.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter2.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(tmp_1_fu_123_p3.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

void fir::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"y_V\" :  \"" << y_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"c_V_address0\" :  \"" << c_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"c_V_ce0\" :  \"" << c_V_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"c_V_q0\" :  \"" << c_V_q0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"x_V\" :  \"" << x_V.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

