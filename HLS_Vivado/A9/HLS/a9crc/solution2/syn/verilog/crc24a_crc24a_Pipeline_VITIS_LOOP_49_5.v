// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module crc24a_crc24a_Pipeline_VITIS_LOOP_49_5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_address0,
        p_ce0,
        p_we0,
        p_d0,
        dividend_48_reload,
        dividend_97_reload,
        dividend_98_reload,
        dividend_99_reload,
        dividend_100_reload,
        dividend_101_reload,
        dividend_102_reload,
        dividend_103_reload,
        dividend_104_reload,
        dividend_105_reload,
        dividend_106_reload,
        dividend_107_reload,
        dividend_108_reload,
        dividend_109_reload,
        dividend_110_reload,
        dividend_111_reload,
        dividend_112_reload,
        dividend_113_reload,
        dividend_114_reload,
        dividend_115_reload,
        dividend_116_reload,
        dividend_117_reload,
        dividend_118_reload,
        dividend_119_reload,
        startIdx_reload,
        dividend_120_reload,
        dividend_121_reload,
        dividend_122_reload,
        dividend_123_reload,
        dividend_124_reload,
        dividend_125_reload,
        dividend_126_reload,
        dividend_127_reload,
        dividend_128_reload,
        dividend_129_reload,
        dividend_130_reload,
        dividend_131_reload,
        dividend_132_reload,
        dividend_133_reload,
        dividend_134_reload,
        dividend_135_reload,
        dividend_136_reload,
        dividend_137_reload,
        dividend_138_reload,
        dividend_139_reload,
        dividend_140_reload,
        dividend_141_reload,
        dividend_142_reload,
        dividend_143_reload,
        icmp_ln45_lcssa
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] p_address0;
output   p_ce0;
output   p_we0;
output  [0:0] p_d0;
input  [0:0] dividend_48_reload;
input  [0:0] dividend_97_reload;
input  [0:0] dividend_98_reload;
input  [0:0] dividend_99_reload;
input  [0:0] dividend_100_reload;
input  [0:0] dividend_101_reload;
input  [0:0] dividend_102_reload;
input  [0:0] dividend_103_reload;
input  [0:0] dividend_104_reload;
input  [0:0] dividend_105_reload;
input  [0:0] dividend_106_reload;
input  [0:0] dividend_107_reload;
input  [0:0] dividend_108_reload;
input  [0:0] dividend_109_reload;
input  [0:0] dividend_110_reload;
input  [0:0] dividend_111_reload;
input  [0:0] dividend_112_reload;
input  [0:0] dividend_113_reload;
input  [0:0] dividend_114_reload;
input  [0:0] dividend_115_reload;
input  [0:0] dividend_116_reload;
input  [0:0] dividend_117_reload;
input  [0:0] dividend_118_reload;
input  [0:0] dividend_119_reload;
input  [5:0] startIdx_reload;
input  [0:0] dividend_120_reload;
input  [0:0] dividend_121_reload;
input  [0:0] dividend_122_reload;
input  [0:0] dividend_123_reload;
input  [0:0] dividend_124_reload;
input  [0:0] dividend_125_reload;
input  [0:0] dividend_126_reload;
input  [0:0] dividend_127_reload;
input  [0:0] dividend_128_reload;
input  [0:0] dividend_129_reload;
input  [0:0] dividend_130_reload;
input  [0:0] dividend_131_reload;
input  [0:0] dividend_132_reload;
input  [0:0] dividend_133_reload;
input  [0:0] dividend_134_reload;
input  [0:0] dividend_135_reload;
input  [0:0] dividend_136_reload;
input  [0:0] dividend_137_reload;
input  [0:0] dividend_138_reload;
input  [0:0] dividend_139_reload;
input  [0:0] dividend_140_reload;
input  [0:0] dividend_141_reload;
input  [0:0] dividend_142_reload;
input  [0:0] dividend_143_reload;
input  [0:0] icmp_ln45_lcssa;

reg ap_idle;
reg p_ce0;
reg p_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln49_fu_459_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [4:0] i_1_reg_664;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] storemerge_fu_637_p3;
reg   [0:0] storemerge_reg_672;
wire   [63:0] zext_ln49_fu_650_p1;
wire    ap_block_pp0_stage0;
reg   [4:0] i_fu_134;
wire   [4:0] add_ln49_fu_465_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_i_1;
wire   [5:0] zext_ln52_fu_471_p1;
wire   [5:0] tmp_3_fu_535_p49;
wire   [0:0] tmp_2_fu_475_p26;
wire   [0:0] tmp_3_fu_535_p50;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

crc24a_mux_245_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 1 ),
    .din5_WIDTH( 1 ),
    .din6_WIDTH( 1 ),
    .din7_WIDTH( 1 ),
    .din8_WIDTH( 1 ),
    .din9_WIDTH( 1 ),
    .din10_WIDTH( 1 ),
    .din11_WIDTH( 1 ),
    .din12_WIDTH( 1 ),
    .din13_WIDTH( 1 ),
    .din14_WIDTH( 1 ),
    .din15_WIDTH( 1 ),
    .din16_WIDTH( 1 ),
    .din17_WIDTH( 1 ),
    .din18_WIDTH( 1 ),
    .din19_WIDTH( 1 ),
    .din20_WIDTH( 1 ),
    .din21_WIDTH( 1 ),
    .din22_WIDTH( 1 ),
    .din23_WIDTH( 1 ),
    .din24_WIDTH( 5 ),
    .dout_WIDTH( 1 ))
mux_245_1_1_1_U200(
    .din0(dividend_48_reload),
    .din1(dividend_97_reload),
    .din2(dividend_98_reload),
    .din3(dividend_99_reload),
    .din4(dividend_100_reload),
    .din5(dividend_101_reload),
    .din6(dividend_102_reload),
    .din7(dividend_103_reload),
    .din8(dividend_104_reload),
    .din9(dividend_105_reload),
    .din10(dividend_106_reload),
    .din11(dividend_107_reload),
    .din12(dividend_108_reload),
    .din13(dividend_109_reload),
    .din14(dividend_110_reload),
    .din15(dividend_111_reload),
    .din16(dividend_112_reload),
    .din17(dividend_113_reload),
    .din18(dividend_114_reload),
    .din19(dividend_115_reload),
    .din20(dividend_116_reload),
    .din21(dividend_117_reload),
    .din22(dividend_118_reload),
    .din23(dividend_119_reload),
    .din24(ap_sig_allocacmp_i_1),
    .dout(tmp_2_fu_475_p26)
);

crc24a_mux_486_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 1 ),
    .din5_WIDTH( 1 ),
    .din6_WIDTH( 1 ),
    .din7_WIDTH( 1 ),
    .din8_WIDTH( 1 ),
    .din9_WIDTH( 1 ),
    .din10_WIDTH( 1 ),
    .din11_WIDTH( 1 ),
    .din12_WIDTH( 1 ),
    .din13_WIDTH( 1 ),
    .din14_WIDTH( 1 ),
    .din15_WIDTH( 1 ),
    .din16_WIDTH( 1 ),
    .din17_WIDTH( 1 ),
    .din18_WIDTH( 1 ),
    .din19_WIDTH( 1 ),
    .din20_WIDTH( 1 ),
    .din21_WIDTH( 1 ),
    .din22_WIDTH( 1 ),
    .din23_WIDTH( 1 ),
    .din24_WIDTH( 1 ),
    .din25_WIDTH( 1 ),
    .din26_WIDTH( 1 ),
    .din27_WIDTH( 1 ),
    .din28_WIDTH( 1 ),
    .din29_WIDTH( 1 ),
    .din30_WIDTH( 1 ),
    .din31_WIDTH( 1 ),
    .din32_WIDTH( 1 ),
    .din33_WIDTH( 1 ),
    .din34_WIDTH( 1 ),
    .din35_WIDTH( 1 ),
    .din36_WIDTH( 1 ),
    .din37_WIDTH( 1 ),
    .din38_WIDTH( 1 ),
    .din39_WIDTH( 1 ),
    .din40_WIDTH( 1 ),
    .din41_WIDTH( 1 ),
    .din42_WIDTH( 1 ),
    .din43_WIDTH( 1 ),
    .din44_WIDTH( 1 ),
    .din45_WIDTH( 1 ),
    .din46_WIDTH( 1 ),
    .din47_WIDTH( 1 ),
    .din48_WIDTH( 6 ),
    .dout_WIDTH( 1 ))
mux_486_1_1_1_U201(
    .din0(dividend_48_reload),
    .din1(dividend_97_reload),
    .din2(dividend_98_reload),
    .din3(dividend_99_reload),
    .din4(dividend_100_reload),
    .din5(dividend_101_reload),
    .din6(dividend_102_reload),
    .din7(dividend_103_reload),
    .din8(dividend_104_reload),
    .din9(dividend_105_reload),
    .din10(dividend_106_reload),
    .din11(dividend_107_reload),
    .din12(dividend_108_reload),
    .din13(dividend_109_reload),
    .din14(dividend_110_reload),
    .din15(dividend_111_reload),
    .din16(dividend_112_reload),
    .din17(dividend_113_reload),
    .din18(dividend_114_reload),
    .din19(dividend_115_reload),
    .din20(dividend_116_reload),
    .din21(dividend_117_reload),
    .din22(dividend_118_reload),
    .din23(dividend_119_reload),
    .din24(dividend_120_reload),
    .din25(dividend_121_reload),
    .din26(dividend_122_reload),
    .din27(dividend_123_reload),
    .din28(dividend_124_reload),
    .din29(dividend_125_reload),
    .din30(dividend_126_reload),
    .din31(dividend_127_reload),
    .din32(dividend_128_reload),
    .din33(dividend_129_reload),
    .din34(dividend_130_reload),
    .din35(dividend_131_reload),
    .din36(dividend_132_reload),
    .din37(dividend_133_reload),
    .din38(dividend_134_reload),
    .din39(dividend_135_reload),
    .din40(dividend_136_reload),
    .din41(dividend_137_reload),
    .din42(dividend_138_reload),
    .din43(dividend_139_reload),
    .din44(dividend_140_reload),
    .din45(dividend_141_reload),
    .din46(dividend_142_reload),
    .din47(dividend_143_reload),
    .din48(tmp_3_fu_535_p49),
    .dout(tmp_3_fu_535_p50)
);

crc24a_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln49_fu_459_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_134 <= add_ln49_fu_465_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_134 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_1_reg_664 <= ap_sig_allocacmp_i_1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln49_fu_459_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        storemerge_reg_672 <= storemerge_fu_637_p3;
    end
end

always @ (*) begin
    if (((icmp_ln49_fu_459_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_1 = 5'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_134;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_ce0 = 1'b1;
    end else begin
        p_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_we0 = 1'b1;
    end else begin
        p_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln49_fu_465_p2 = (ap_sig_allocacmp_i_1 + 5'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln49_fu_459_p2 = ((ap_sig_allocacmp_i_1 == 5'd24) ? 1'b1 : 1'b0);

assign p_address0 = zext_ln49_fu_650_p1;

assign p_d0 = storemerge_reg_672;

assign storemerge_fu_637_p3 = ((icmp_ln45_lcssa[0:0] == 1'b1) ? tmp_2_fu_475_p26 : tmp_3_fu_535_p50);

assign tmp_3_fu_535_p49 = (zext_ln52_fu_471_p1 + startIdx_reload);

assign zext_ln49_fu_650_p1 = i_1_reg_664;

assign zext_ln52_fu_471_p1 = ap_sig_allocacmp_i_1;

endmodule //crc24a_crc24a_Pipeline_VITIS_LOOP_49_5
