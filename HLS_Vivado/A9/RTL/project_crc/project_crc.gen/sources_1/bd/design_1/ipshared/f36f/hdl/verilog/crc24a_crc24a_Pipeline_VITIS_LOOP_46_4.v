// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module crc24a_crc24a_Pipeline_VITIS_LOOP_46_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        dividend_97_reload,
        dividend_98_reload,
        dividend_99_reload,
        dividend_100_reload,
        dividend_101_reload,
        dividend_102_reload,
        dividend_103_reload,
        dividend_104_reload,
        dividend_105_reload,
        dividend_106_reload,
        dividend_107_reload,
        dividend_108_reload,
        dividend_109_reload,
        dividend_110_reload,
        dividend_111_reload,
        dividend_112_reload,
        dividend_113_reload,
        dividend_114_reload,
        dividend_115_reload,
        dividend_116_reload,
        dividend_117_reload,
        dividend_118_reload,
        dividend_119_reload,
        dividend_120_reload,
        dividend_121_reload,
        dividend_122_reload,
        dividend_123_reload,
        dividend_124_reload,
        dividend_125_reload,
        dividend_126_reload,
        dividend_127_reload,
        dividend_128_reload,
        dividend_129_reload,
        dividend_130_reload,
        dividend_131_reload,
        dividend_132_reload,
        dividend_133_reload,
        dividend_134_reload,
        dividend_135_reload,
        dividend_136_reload,
        dividend_137_reload,
        dividend_138_reload,
        dividend_139_reload,
        dividend_140_reload,
        dividend_141_reload,
        dividend_142_reload,
        dividend_143_reload,
        dividend_144_reload,
        startIdx_out,
        startIdx_out_ap_vld,
        ap_return
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [0:0] dividend_97_reload;
input  [0:0] dividend_98_reload;
input  [0:0] dividend_99_reload;
input  [0:0] dividend_100_reload;
input  [0:0] dividend_101_reload;
input  [0:0] dividend_102_reload;
input  [0:0] dividend_103_reload;
input  [0:0] dividend_104_reload;
input  [0:0] dividend_105_reload;
input  [0:0] dividend_106_reload;
input  [0:0] dividend_107_reload;
input  [0:0] dividend_108_reload;
input  [0:0] dividend_109_reload;
input  [0:0] dividend_110_reload;
input  [0:0] dividend_111_reload;
input  [0:0] dividend_112_reload;
input  [0:0] dividend_113_reload;
input  [0:0] dividend_114_reload;
input  [0:0] dividend_115_reload;
input  [0:0] dividend_116_reload;
input  [0:0] dividend_117_reload;
input  [0:0] dividend_118_reload;
input  [0:0] dividend_119_reload;
input  [0:0] dividend_120_reload;
input  [0:0] dividend_121_reload;
input  [0:0] dividend_122_reload;
input  [0:0] dividend_123_reload;
input  [0:0] dividend_124_reload;
input  [0:0] dividend_125_reload;
input  [0:0] dividend_126_reload;
input  [0:0] dividend_127_reload;
input  [0:0] dividend_128_reload;
input  [0:0] dividend_129_reload;
input  [0:0] dividend_130_reload;
input  [0:0] dividend_131_reload;
input  [0:0] dividend_132_reload;
input  [0:0] dividend_133_reload;
input  [0:0] dividend_134_reload;
input  [0:0] dividend_135_reload;
input  [0:0] dividend_136_reload;
input  [0:0] dividend_137_reload;
input  [0:0] dividend_138_reload;
input  [0:0] dividend_139_reload;
input  [0:0] dividend_140_reload;
input  [0:0] dividend_141_reload;
input  [0:0] dividend_142_reload;
input  [0:0] dividend_143_reload;
input  [0:0] dividend_144_reload;
output  [5:0] startIdx_out;
output   startIdx_out_ap_vld;
output  [0:0] ap_return;

reg ap_idle;
reg[5:0] startIdx_out;
reg startIdx_out_ap_vld;
reg[0:0] ap_return;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] tmp_1_fu_466_p50;
wire   [0:0] icmp_ln46_fu_454_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [0:0] ap_phi_mux_UnifiedRetVal_phi_fu_437_p4;
reg   [5:0] startIdx_fu_134;
wire   [5:0] add_ln48_fu_460_p2;
wire    ap_loop_init;
reg   [5:0] ap_sig_allocacmp_startIdx_1;
reg   [0:0] ap_return_preg;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_return_preg = 1'd0;
#0 ap_done_reg = 1'b0;
end

crc24a_mux_486_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 1 ),
    .din5_WIDTH( 1 ),
    .din6_WIDTH( 1 ),
    .din7_WIDTH( 1 ),
    .din8_WIDTH( 1 ),
    .din9_WIDTH( 1 ),
    .din10_WIDTH( 1 ),
    .din11_WIDTH( 1 ),
    .din12_WIDTH( 1 ),
    .din13_WIDTH( 1 ),
    .din14_WIDTH( 1 ),
    .din15_WIDTH( 1 ),
    .din16_WIDTH( 1 ),
    .din17_WIDTH( 1 ),
    .din18_WIDTH( 1 ),
    .din19_WIDTH( 1 ),
    .din20_WIDTH( 1 ),
    .din21_WIDTH( 1 ),
    .din22_WIDTH( 1 ),
    .din23_WIDTH( 1 ),
    .din24_WIDTH( 1 ),
    .din25_WIDTH( 1 ),
    .din26_WIDTH( 1 ),
    .din27_WIDTH( 1 ),
    .din28_WIDTH( 1 ),
    .din29_WIDTH( 1 ),
    .din30_WIDTH( 1 ),
    .din31_WIDTH( 1 ),
    .din32_WIDTH( 1 ),
    .din33_WIDTH( 1 ),
    .din34_WIDTH( 1 ),
    .din35_WIDTH( 1 ),
    .din36_WIDTH( 1 ),
    .din37_WIDTH( 1 ),
    .din38_WIDTH( 1 ),
    .din39_WIDTH( 1 ),
    .din40_WIDTH( 1 ),
    .din41_WIDTH( 1 ),
    .din42_WIDTH( 1 ),
    .din43_WIDTH( 1 ),
    .din44_WIDTH( 1 ),
    .din45_WIDTH( 1 ),
    .din46_WIDTH( 1 ),
    .din47_WIDTH( 1 ),
    .din48_WIDTH( 6 ),
    .dout_WIDTH( 1 ))
mux_486_1_1_1_U148(
    .din0(dividend_97_reload),
    .din1(dividend_98_reload),
    .din2(dividend_99_reload),
    .din3(dividend_100_reload),
    .din4(dividend_101_reload),
    .din5(dividend_102_reload),
    .din6(dividend_103_reload),
    .din7(dividend_104_reload),
    .din8(dividend_105_reload),
    .din9(dividend_106_reload),
    .din10(dividend_107_reload),
    .din11(dividend_108_reload),
    .din12(dividend_109_reload),
    .din13(dividend_110_reload),
    .din14(dividend_111_reload),
    .din15(dividend_112_reload),
    .din16(dividend_113_reload),
    .din17(dividend_114_reload),
    .din18(dividend_115_reload),
    .din19(dividend_116_reload),
    .din20(dividend_117_reload),
    .din21(dividend_118_reload),
    .din22(dividend_119_reload),
    .din23(dividend_120_reload),
    .din24(dividend_121_reload),
    .din25(dividend_122_reload),
    .din26(dividend_123_reload),
    .din27(dividend_124_reload),
    .din28(dividend_125_reload),
    .din29(dividend_126_reload),
    .din30(dividend_127_reload),
    .din31(dividend_128_reload),
    .din32(dividend_129_reload),
    .din33(dividend_130_reload),
    .din34(dividend_131_reload),
    .din35(dividend_132_reload),
    .din36(dividend_133_reload),
    .din37(dividend_134_reload),
    .din38(dividend_135_reload),
    .din39(dividend_136_reload),
    .din40(dividend_137_reload),
    .din41(dividend_138_reload),
    .din42(dividend_139_reload),
    .din43(dividend_140_reload),
    .din44(dividend_141_reload),
    .din45(dividend_142_reload),
    .din46(dividend_143_reload),
    .din47(dividend_144_reload),
    .din48(ap_sig_allocacmp_startIdx_1),
    .dout(tmp_1_fu_466_p50)
);

crc24a_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 1'd0;
    end else begin
        if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1) & ((icmp_ln46_fu_454_p2 == 1'd1) | (tmp_1_fu_466_p50 == 1'd1)))) begin
            ap_return_preg <= ap_phi_mux_UnifiedRetVal_phi_fu_437_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln46_fu_454_p2 == 1'd0) & (tmp_1_fu_466_p50 == 1'd0))) begin
            startIdx_fu_134 <= add_ln48_fu_460_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            startIdx_fu_134 <= 6'd0;
        end
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1) & ((icmp_ln46_fu_454_p2 == 1'd1) | (tmp_1_fu_466_p50 == 1'd1)))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if (((icmp_ln46_fu_454_p2 == 1'd0) & (tmp_1_fu_466_p50 == 1'd1))) begin
            ap_phi_mux_UnifiedRetVal_phi_fu_437_p4 = 1'd0;
        end else if ((icmp_ln46_fu_454_p2 == 1'd1)) begin
            ap_phi_mux_UnifiedRetVal_phi_fu_437_p4 = 1'd1;
        end else begin
            ap_phi_mux_UnifiedRetVal_phi_fu_437_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_UnifiedRetVal_phi_fu_437_p4 = 'bx;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1) & ((icmp_ln46_fu_454_p2 == 1'd1) | (tmp_1_fu_466_p50 == 1'd1)))) begin
        ap_return = ap_phi_mux_UnifiedRetVal_phi_fu_437_p4;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_startIdx_1 = 6'd0;
    end else begin
        ap_sig_allocacmp_startIdx_1 = startIdx_fu_134;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln46_fu_454_p2 == 1'd1)) begin
            startIdx_out = 6'd48;
        end else if (((icmp_ln46_fu_454_p2 == 1'd0) & (tmp_1_fu_466_p50 == 1'd1))) begin
            startIdx_out = ap_sig_allocacmp_startIdx_1;
        end else begin
            startIdx_out = 'bx;
        end
    end else begin
        startIdx_out = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln46_fu_454_p2 == 1'd0) & (tmp_1_fu_466_p50 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln46_fu_454_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        startIdx_out_ap_vld = 1'b1;
    end else begin
        startIdx_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln48_fu_460_p2 = (ap_sig_allocacmp_startIdx_1 + 6'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln46_fu_454_p2 = ((ap_sig_allocacmp_startIdx_1 == 6'd48) ? 1'b1 : 1'b0);

endmodule //crc24a_crc24a_Pipeline_VITIS_LOOP_46_4
