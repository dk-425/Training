// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="a6,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.431750,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=52,HLS_SYN_LUT=115,HLS_VERSION=2018_3}" *)

module a6 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_V,
        b_V,
        s,
        out_V,
        out_V_ap_vld
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] a_V;
input  [15:0] b_V;
input   s;
output  [15:0] out_V;
output   out_V_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg out_V_ap_vld;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [16:0] tmp_1_fu_91_p2;
reg   [16:0] tmp_1_reg_146;
wire   [15:0] storemerge_fu_122_p3;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond_fu_97_p2;
wire   [16:0] i_fu_130_p2;
reg   [15:0] a_V_buf_reg_67;
reg   [16:0] i_op_assign_reg_76;
wire   [16:0] tmp_cast_fu_87_p1;
wire   [14:0] tmp_2_fu_108_p4;
wire   [0:0] storemerge_fu_122_p0;
wire   [15:0] tmp_5_fu_118_p1;
wire   [15:0] tmp_fu_102_p2;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_97_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        a_V_buf_reg_67 <= storemerge_fu_122_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        a_V_buf_reg_67 <= a_V;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_97_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_op_assign_reg_76 <= i_fu_130_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_op_assign_reg_76 <= 17'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_1_reg_146 <= tmp_1_fu_91_p2;
    end
end

always @ (*) begin
    if (((exitcond_fu_97_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_97_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_97_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        out_V_ap_vld = 1'b1;
    end else begin
        out_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond_fu_97_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign exitcond_fu_97_p2 = ((i_op_assign_reg_76 == tmp_1_reg_146) ? 1'b1 : 1'b0);

assign i_fu_130_p2 = (17'd1 + i_op_assign_reg_76);

assign out_V = ((storemerge_fu_122_p0[0:0] === 1'b1) ? tmp_5_fu_118_p1 : tmp_fu_102_p2);

assign storemerge_fu_122_p0 = s;

assign storemerge_fu_122_p3 = ((storemerge_fu_122_p0[0:0] === 1'b1) ? tmp_5_fu_118_p1 : tmp_fu_102_p2);

assign tmp_1_fu_91_p2 = (tmp_cast_fu_87_p1 + 17'd1);

assign tmp_2_fu_108_p4 = {{a_V_buf_reg_67[15:1]}};

assign tmp_5_fu_118_p1 = tmp_2_fu_108_p4;

assign tmp_cast_fu_87_p1 = b_V;

assign tmp_fu_102_p2 = a_V_buf_reg_67 << 16'd1;

endmodule //a6
