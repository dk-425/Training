// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "cal.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic cal::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic cal::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> cal::ap_ST_fsm_pp0_stage0 = "1";
const sc_lv<32> cal::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool cal::ap_const_boolean_1 = true;
const sc_lv<3> cal::ap_const_lv3_6 = "110";
const sc_lv<3> cal::ap_const_lv3_5 = "101";
const sc_lv<3> cal::ap_const_lv3_4 = "100";
const sc_lv<3> cal::ap_const_lv3_3 = "11";
const sc_lv<3> cal::ap_const_lv3_2 = "10";
const sc_lv<3> cal::ap_const_lv3_1 = "1";
const sc_lv<3> cal::ap_const_lv3_0 = "000";
const bool cal::ap_const_boolean_0 = false;
const sc_lv<1> cal::ap_const_lv1_0 = "0";
const sc_lv<1> cal::ap_const_lv1_1 = "1";
const sc_lv<2> cal::ap_const_lv2_0 = "00";
const sc_lv<2> cal::ap_const_lv2_2 = "10";
const sc_lv<2> cal::ap_const_lv2_3 = "11";
const sc_lv<2> cal::ap_const_lv2_1 = "1";

cal::cal(sc_module_name name) : sc_module(name), mVcdFile(0) {
    cal_sdiv_9s_8s_9_13_1_U1 = new cal_sdiv_9s_8s_9_13_1<1,13,9,8,9>("cal_sdiv_9s_8s_9_13_1_U1");
    cal_sdiv_9s_8s_9_13_1_U1->clk(ap_clk);
    cal_sdiv_9s_8s_9_13_1_U1->reset(ap_rst_n_inv);
    cal_sdiv_9s_8s_9_13_1_U1->din0(grp_fu_85_p0);
    cal_sdiv_9s_8s_9_13_1_U1->din1(b_V_0_data_out);
    cal_sdiv_9s_8s_9_13_1_U1->ce(grp_fu_85_ce);
    cal_sdiv_9s_8s_9_13_1_U1->dout(grp_fu_85_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_a_V_0_ack_in);
    sensitive << ( a_V_0_state );

    SC_METHOD(thread_a_V_0_ack_out);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_a_V_0_data_out);
    sensitive << ( a_V_0_payload_A );
    sensitive << ( a_V_0_payload_B );
    sensitive << ( a_V_0_sel );

    SC_METHOD(thread_a_V_0_load_A);
    sensitive << ( a_V_0_sel_wr );
    sensitive << ( a_V_0_state_cmp_full );

    SC_METHOD(thread_a_V_0_load_B);
    sensitive << ( a_V_0_sel_wr );
    sensitive << ( a_V_0_state_cmp_full );

    SC_METHOD(thread_a_V_0_sel);
    sensitive << ( a_V_0_sel_rd );

    SC_METHOD(thread_a_V_0_state_cmp_full);
    sensitive << ( a_V_0_state );

    SC_METHOD(thread_a_V_0_vld_in);
    sensitive << ( a_V_TVALID );

    SC_METHOD(thread_a_V_0_vld_out);
    sensitive << ( a_V_0_state );

    SC_METHOD(thread_a_V_TDATA_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( a_V_0_state );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_a_V_TREADY);
    sensitive << ( a_V_0_state );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( ap_start );
    sensitive << ( ap_enable_reg_pp0_iter13 );
    sensitive << ( c_V_0_vld_out );
    sensitive << ( b_V_0_vld_out );
    sensitive << ( a_V_0_vld_out );
    sensitive << ( d_V_1_ack_in );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_start );
    sensitive << ( ap_enable_reg_pp0_iter12 );
    sensitive << ( ap_enable_reg_pp0_iter13 );
    sensitive << ( c_V_0_vld_out );
    sensitive << ( b_V_0_vld_out );
    sensitive << ( a_V_0_vld_out );
    sensitive << ( d_V_1_ack_in );
    sensitive << ( ap_block_state13_io );
    sensitive << ( ap_block_state14_io );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_start );
    sensitive << ( ap_enable_reg_pp0_iter12 );
    sensitive << ( ap_enable_reg_pp0_iter13 );
    sensitive << ( c_V_0_vld_out );
    sensitive << ( b_V_0_vld_out );
    sensitive << ( a_V_0_vld_out );
    sensitive << ( d_V_1_ack_in );
    sensitive << ( ap_block_state13_io );
    sensitive << ( ap_block_state14_io );

    SC_METHOD(thread_ap_block_state10_pp0_stage0_iter9);

    SC_METHOD(thread_ap_block_state11_pp0_stage0_iter10);

    SC_METHOD(thread_ap_block_state12_pp0_stage0_iter11);

    SC_METHOD(thread_ap_block_state13_io);
    sensitive << ( d_V_1_ack_in );
    sensitive << ( tmp_reg_190_pp0_iter11_reg );

    SC_METHOD(thread_ap_block_state13_pp0_stage0_iter12);

    SC_METHOD(thread_ap_block_state14_io);
    sensitive << ( d_V_1_ack_in );
    sensitive << ( tmp_reg_190_pp0_iter12_reg );

    SC_METHOD(thread_ap_block_state14_pp0_stage0_iter13);
    sensitive << ( d_V_1_ack_in );

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);
    sensitive << ( ap_start );
    sensitive << ( c_V_0_vld_out );
    sensitive << ( b_V_0_vld_out );
    sensitive << ( a_V_0_vld_out );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter3);

    SC_METHOD(thread_ap_block_state5_pp0_stage0_iter4);

    SC_METHOD(thread_ap_block_state6_pp0_stage0_iter5);

    SC_METHOD(thread_ap_block_state7_pp0_stage0_iter6);

    SC_METHOD(thread_ap_block_state8_pp0_stage0_iter7);

    SC_METHOD(thread_ap_block_state9_pp0_stage0_iter8);

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_enable_reg_pp0_iter13 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_reg_pp0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( ap_enable_reg_pp0_iter6 );
    sensitive << ( ap_enable_reg_pp0_iter7 );
    sensitive << ( ap_enable_reg_pp0_iter8 );
    sensitive << ( ap_enable_reg_pp0_iter9 );
    sensitive << ( ap_enable_reg_pp0_iter10 );
    sensitive << ( ap_enable_reg_pp0_iter11 );
    sensitive << ( ap_enable_reg_pp0_iter12 );
    sensitive << ( ap_enable_reg_pp0_iter13 );

    SC_METHOD(thread_ap_idle_pp0_0to12);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( ap_enable_reg_pp0_iter6 );
    sensitive << ( ap_enable_reg_pp0_iter7 );
    sensitive << ( ap_enable_reg_pp0_iter8 );
    sensitive << ( ap_enable_reg_pp0_iter9 );
    sensitive << ( ap_enable_reg_pp0_iter10 );
    sensitive << ( ap_enable_reg_pp0_iter11 );
    sensitive << ( ap_enable_reg_pp0_iter12 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_reset_idle_pp0);
    sensitive << ( ap_start );
    sensitive << ( ap_idle_pp0_0to12 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_b_V_0_ack_in);
    sensitive << ( b_V_0_state );

    SC_METHOD(thread_b_V_0_ack_out);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_b_V_0_data_out);
    sensitive << ( b_V_0_payload_A );
    sensitive << ( b_V_0_payload_B );
    sensitive << ( b_V_0_sel );

    SC_METHOD(thread_b_V_0_load_A);
    sensitive << ( b_V_0_sel_wr );
    sensitive << ( b_V_0_state_cmp_full );

    SC_METHOD(thread_b_V_0_load_B);
    sensitive << ( b_V_0_sel_wr );
    sensitive << ( b_V_0_state_cmp_full );

    SC_METHOD(thread_b_V_0_sel);
    sensitive << ( b_V_0_sel_rd );

    SC_METHOD(thread_b_V_0_state_cmp_full);
    sensitive << ( b_V_0_state );

    SC_METHOD(thread_b_V_0_vld_in);
    sensitive << ( b_V_TVALID );

    SC_METHOD(thread_b_V_0_vld_out);
    sensitive << ( b_V_0_state );

    SC_METHOD(thread_b_V_TDATA_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( b_V_0_state );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_b_V_TREADY);
    sensitive << ( b_V_0_state );

    SC_METHOD(thread_c_V_0_ack_in);
    sensitive << ( c_V_0_state );

    SC_METHOD(thread_c_V_0_ack_out);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_c_V_0_data_out);
    sensitive << ( c_V_0_payload_A );
    sensitive << ( c_V_0_payload_B );
    sensitive << ( c_V_0_sel );

    SC_METHOD(thread_c_V_0_load_A);
    sensitive << ( c_V_0_sel_wr );
    sensitive << ( c_V_0_state_cmp_full );

    SC_METHOD(thread_c_V_0_load_B);
    sensitive << ( c_V_0_sel_wr );
    sensitive << ( c_V_0_state_cmp_full );

    SC_METHOD(thread_c_V_0_sel);
    sensitive << ( c_V_0_sel_rd );

    SC_METHOD(thread_c_V_0_state_cmp_full);
    sensitive << ( c_V_0_state );

    SC_METHOD(thread_c_V_0_vld_in);
    sensitive << ( c_V_TVALID );

    SC_METHOD(thread_c_V_0_vld_out);
    sensitive << ( c_V_0_state );

    SC_METHOD(thread_c_V_TDATA_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( c_V_0_state );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_c_V_TREADY);
    sensitive << ( c_V_0_state );

    SC_METHOD(thread_d_V_1_ack_in);
    sensitive << ( d_V_1_state );

    SC_METHOD(thread_d_V_1_ack_out);
    sensitive << ( d_V_TREADY );

    SC_METHOD(thread_d_V_1_data_in);
    sensitive << ( ap_enable_reg_pp0_iter12 );
    sensitive << ( tmp_reg_190_pp0_iter11_reg );
    sensitive << ( p_5_fu_95_p1 );
    sensitive << ( p_4_fu_104_p1 );
    sensitive << ( p_3_fu_113_p1 );
    sensitive << ( p_2_fu_118_p1 );
    sensitive << ( ret_V_2_fu_129_p2 );
    sensitive << ( p_1_fu_148_p1 );
    sensitive << ( p_s_fu_165_p1 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_d_V_1_data_out);
    sensitive << ( d_V_1_payload_A );
    sensitive << ( d_V_1_payload_B );
    sensitive << ( d_V_1_sel );

    SC_METHOD(thread_d_V_1_load_A);
    sensitive << ( d_V_1_sel_wr );
    sensitive << ( d_V_1_state_cmp_full );

    SC_METHOD(thread_d_V_1_load_B);
    sensitive << ( d_V_1_sel_wr );
    sensitive << ( d_V_1_state_cmp_full );

    SC_METHOD(thread_d_V_1_sel);
    sensitive << ( d_V_1_sel_rd );

    SC_METHOD(thread_d_V_1_state_cmp_full);
    sensitive << ( d_V_1_state );

    SC_METHOD(thread_d_V_1_vld_in);
    sensitive << ( ap_enable_reg_pp0_iter12 );
    sensitive << ( tmp_reg_190_pp0_iter11_reg );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_d_V_1_vld_out);
    sensitive << ( d_V_1_state );

    SC_METHOD(thread_d_V_TDATA);
    sensitive << ( d_V_1_data_out );

    SC_METHOD(thread_d_V_TDATA_blk_n);
    sensitive << ( ap_enable_reg_pp0_iter12 );
    sensitive << ( ap_enable_reg_pp0_iter13 );
    sensitive << ( tmp_reg_190_pp0_iter11_reg );
    sensitive << ( tmp_reg_190_pp0_iter12_reg );
    sensitive << ( d_V_1_state );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_d_V_TVALID);
    sensitive << ( d_V_1_state );

    SC_METHOD(thread_grp_fu_85_ce);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_grp_fu_85_p0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_7_tr_fu_77_p0 );

    SC_METHOD(thread_lhs_V_1_fu_136_p1);
    sensitive << ( a_V_read_reg_180_pp0_iter11_reg );

    SC_METHOD(thread_lhs_V_fu_153_p1);
    sensitive << ( a_V_read_reg_180_pp0_iter11_reg );

    SC_METHOD(thread_p_1_fu_148_p1);
    sensitive << ( ret_V_1_fu_142_p2 );

    SC_METHOD(thread_p_2_fu_118_p1);
    sensitive << ( grp_fu_85_p2 );

    SC_METHOD(thread_p_3_fu_113_p1);
    sensitive << ( ret_V_4_fu_109_p2 );

    SC_METHOD(thread_p_4_fu_104_p1);
    sensitive << ( ret_V_5_fu_100_p2 );

    SC_METHOD(thread_p_5_fu_95_p1);
    sensitive << ( ret_V_6_fu_91_p2 );

    SC_METHOD(thread_p_s_fu_165_p1);
    sensitive << ( ret_V_fu_159_p2 );

    SC_METHOD(thread_ret_V_1_fu_142_p2);
    sensitive << ( lhs_V_1_fu_136_p1 );
    sensitive << ( rhs_V_1_fu_139_p1 );

    SC_METHOD(thread_ret_V_2_fu_129_p0);
    sensitive << ( ap_enable_reg_pp0_iter12 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( b_V_read_reg_170_pp0_iter11_reg );

    SC_METHOD(thread_ret_V_2_fu_129_p1);
    sensitive << ( ap_enable_reg_pp0_iter12 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( a_V_read_reg_180_pp0_iter11_reg );

    SC_METHOD(thread_ret_V_2_fu_129_p2);
    sensitive << ( ret_V_2_fu_129_p0 );
    sensitive << ( ret_V_2_fu_129_p1 );

    SC_METHOD(thread_ret_V_4_fu_109_p2);
    sensitive << ( b_V_read_reg_170_pp0_iter11_reg );
    sensitive << ( a_V_read_reg_180_pp0_iter11_reg );

    SC_METHOD(thread_ret_V_5_fu_100_p2);
    sensitive << ( b_V_read_reg_170_pp0_iter11_reg );
    sensitive << ( a_V_read_reg_180_pp0_iter11_reg );

    SC_METHOD(thread_ret_V_6_fu_91_p2);
    sensitive << ( b_V_read_reg_170_pp0_iter11_reg );
    sensitive << ( a_V_read_reg_180_pp0_iter11_reg );

    SC_METHOD(thread_ret_V_fu_159_p2);
    sensitive << ( rhs_V_fu_156_p1 );
    sensitive << ( lhs_V_fu_153_p1 );

    SC_METHOD(thread_rhs_V_1_fu_139_p1);
    sensitive << ( b_V_read_reg_170_pp0_iter11_reg );

    SC_METHOD(thread_rhs_V_fu_156_p1);
    sensitive << ( b_V_read_reg_170_pp0_iter11_reg );

    SC_METHOD(thread_tmp_7_tr_fu_77_p0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( a_V_0_data_out );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_tmp_fu_73_p1);
    sensitive << ( c_V_0_data_out );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_reset_idle_pp0 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "1";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter3 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter4 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter5 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter6 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter7 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter8 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter9 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter10 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter11 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter12 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter13 = SC_LOGIC_0;
    a_V_0_sel_rd = SC_LOGIC_0;
    a_V_0_sel_wr = SC_LOGIC_0;
    a_V_0_state = "00";
    b_V_0_sel_rd = SC_LOGIC_0;
    b_V_0_sel_wr = SC_LOGIC_0;
    b_V_0_state = "00";
    c_V_0_sel_rd = SC_LOGIC_0;
    c_V_0_sel_wr = SC_LOGIC_0;
    c_V_0_state = "00";
    d_V_1_sel_rd = SC_LOGIC_0;
    d_V_1_sel_wr = SC_LOGIC_0;
    d_V_1_state = "00";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "cal_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, d_V_TREADY, "(port)d_V_TREADY");
    sc_trace(mVcdFile, a_V_TDATA, "(port)a_V_TDATA");
    sc_trace(mVcdFile, a_V_TVALID, "(port)a_V_TVALID");
    sc_trace(mVcdFile, a_V_TREADY, "(port)a_V_TREADY");
    sc_trace(mVcdFile, b_V_TDATA, "(port)b_V_TDATA");
    sc_trace(mVcdFile, b_V_TVALID, "(port)b_V_TVALID");
    sc_trace(mVcdFile, b_V_TREADY, "(port)b_V_TREADY");
    sc_trace(mVcdFile, c_V_TDATA, "(port)c_V_TDATA");
    sc_trace(mVcdFile, c_V_TVALID, "(port)c_V_TVALID");
    sc_trace(mVcdFile, c_V_TREADY, "(port)c_V_TREADY");
    sc_trace(mVcdFile, d_V_TDATA, "(port)d_V_TDATA");
    sc_trace(mVcdFile, d_V_TVALID, "(port)d_V_TVALID");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter3, "ap_enable_reg_pp0_iter3");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter4, "ap_enable_reg_pp0_iter4");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter5, "ap_enable_reg_pp0_iter5");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter6, "ap_enable_reg_pp0_iter6");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter7, "ap_enable_reg_pp0_iter7");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter8, "ap_enable_reg_pp0_iter8");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter9, "ap_enable_reg_pp0_iter9");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter10, "ap_enable_reg_pp0_iter10");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter11, "ap_enable_reg_pp0_iter11");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter12, "ap_enable_reg_pp0_iter12");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter13, "ap_enable_reg_pp0_iter13");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, c_V_0_vld_out, "c_V_0_vld_out");
    sc_trace(mVcdFile, b_V_0_vld_out, "b_V_0_vld_out");
    sc_trace(mVcdFile, a_V_0_vld_out, "a_V_0_vld_out");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter2, "ap_block_state3_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter3, "ap_block_state4_pp0_stage0_iter3");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage0_iter4, "ap_block_state5_pp0_stage0_iter4");
    sc_trace(mVcdFile, ap_block_state6_pp0_stage0_iter5, "ap_block_state6_pp0_stage0_iter5");
    sc_trace(mVcdFile, ap_block_state7_pp0_stage0_iter6, "ap_block_state7_pp0_stage0_iter6");
    sc_trace(mVcdFile, ap_block_state8_pp0_stage0_iter7, "ap_block_state8_pp0_stage0_iter7");
    sc_trace(mVcdFile, ap_block_state9_pp0_stage0_iter8, "ap_block_state9_pp0_stage0_iter8");
    sc_trace(mVcdFile, ap_block_state10_pp0_stage0_iter9, "ap_block_state10_pp0_stage0_iter9");
    sc_trace(mVcdFile, ap_block_state11_pp0_stage0_iter10, "ap_block_state11_pp0_stage0_iter10");
    sc_trace(mVcdFile, ap_block_state12_pp0_stage0_iter11, "ap_block_state12_pp0_stage0_iter11");
    sc_trace(mVcdFile, ap_block_state13_pp0_stage0_iter12, "ap_block_state13_pp0_stage0_iter12");
    sc_trace(mVcdFile, d_V_1_ack_in, "d_V_1_ack_in");
    sc_trace(mVcdFile, tmp_reg_190, "tmp_reg_190");
    sc_trace(mVcdFile, tmp_reg_190_pp0_iter11_reg, "tmp_reg_190_pp0_iter11_reg");
    sc_trace(mVcdFile, ap_block_state13_io, "ap_block_state13_io");
    sc_trace(mVcdFile, ap_block_state14_pp0_stage0_iter13, "ap_block_state14_pp0_stage0_iter13");
    sc_trace(mVcdFile, tmp_reg_190_pp0_iter12_reg, "tmp_reg_190_pp0_iter12_reg");
    sc_trace(mVcdFile, ap_block_state14_io, "ap_block_state14_io");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, a_V_0_data_out, "a_V_0_data_out");
    sc_trace(mVcdFile, a_V_0_vld_in, "a_V_0_vld_in");
    sc_trace(mVcdFile, a_V_0_ack_in, "a_V_0_ack_in");
    sc_trace(mVcdFile, a_V_0_ack_out, "a_V_0_ack_out");
    sc_trace(mVcdFile, a_V_0_payload_A, "a_V_0_payload_A");
    sc_trace(mVcdFile, a_V_0_payload_B, "a_V_0_payload_B");
    sc_trace(mVcdFile, a_V_0_sel_rd, "a_V_0_sel_rd");
    sc_trace(mVcdFile, a_V_0_sel_wr, "a_V_0_sel_wr");
    sc_trace(mVcdFile, a_V_0_sel, "a_V_0_sel");
    sc_trace(mVcdFile, a_V_0_load_A, "a_V_0_load_A");
    sc_trace(mVcdFile, a_V_0_load_B, "a_V_0_load_B");
    sc_trace(mVcdFile, a_V_0_state, "a_V_0_state");
    sc_trace(mVcdFile, a_V_0_state_cmp_full, "a_V_0_state_cmp_full");
    sc_trace(mVcdFile, b_V_0_data_out, "b_V_0_data_out");
    sc_trace(mVcdFile, b_V_0_vld_in, "b_V_0_vld_in");
    sc_trace(mVcdFile, b_V_0_ack_in, "b_V_0_ack_in");
    sc_trace(mVcdFile, b_V_0_ack_out, "b_V_0_ack_out");
    sc_trace(mVcdFile, b_V_0_payload_A, "b_V_0_payload_A");
    sc_trace(mVcdFile, b_V_0_payload_B, "b_V_0_payload_B");
    sc_trace(mVcdFile, b_V_0_sel_rd, "b_V_0_sel_rd");
    sc_trace(mVcdFile, b_V_0_sel_wr, "b_V_0_sel_wr");
    sc_trace(mVcdFile, b_V_0_sel, "b_V_0_sel");
    sc_trace(mVcdFile, b_V_0_load_A, "b_V_0_load_A");
    sc_trace(mVcdFile, b_V_0_load_B, "b_V_0_load_B");
    sc_trace(mVcdFile, b_V_0_state, "b_V_0_state");
    sc_trace(mVcdFile, b_V_0_state_cmp_full, "b_V_0_state_cmp_full");
    sc_trace(mVcdFile, c_V_0_data_out, "c_V_0_data_out");
    sc_trace(mVcdFile, c_V_0_vld_in, "c_V_0_vld_in");
    sc_trace(mVcdFile, c_V_0_ack_in, "c_V_0_ack_in");
    sc_trace(mVcdFile, c_V_0_ack_out, "c_V_0_ack_out");
    sc_trace(mVcdFile, c_V_0_payload_A, "c_V_0_payload_A");
    sc_trace(mVcdFile, c_V_0_payload_B, "c_V_0_payload_B");
    sc_trace(mVcdFile, c_V_0_sel_rd, "c_V_0_sel_rd");
    sc_trace(mVcdFile, c_V_0_sel_wr, "c_V_0_sel_wr");
    sc_trace(mVcdFile, c_V_0_sel, "c_V_0_sel");
    sc_trace(mVcdFile, c_V_0_load_A, "c_V_0_load_A");
    sc_trace(mVcdFile, c_V_0_load_B, "c_V_0_load_B");
    sc_trace(mVcdFile, c_V_0_state, "c_V_0_state");
    sc_trace(mVcdFile, c_V_0_state_cmp_full, "c_V_0_state_cmp_full");
    sc_trace(mVcdFile, d_V_1_data_in, "d_V_1_data_in");
    sc_trace(mVcdFile, d_V_1_data_out, "d_V_1_data_out");
    sc_trace(mVcdFile, d_V_1_vld_in, "d_V_1_vld_in");
    sc_trace(mVcdFile, d_V_1_vld_out, "d_V_1_vld_out");
    sc_trace(mVcdFile, d_V_1_ack_out, "d_V_1_ack_out");
    sc_trace(mVcdFile, d_V_1_payload_A, "d_V_1_payload_A");
    sc_trace(mVcdFile, d_V_1_payload_B, "d_V_1_payload_B");
    sc_trace(mVcdFile, d_V_1_sel_rd, "d_V_1_sel_rd");
    sc_trace(mVcdFile, d_V_1_sel_wr, "d_V_1_sel_wr");
    sc_trace(mVcdFile, d_V_1_sel, "d_V_1_sel");
    sc_trace(mVcdFile, d_V_1_load_A, "d_V_1_load_A");
    sc_trace(mVcdFile, d_V_1_load_B, "d_V_1_load_B");
    sc_trace(mVcdFile, d_V_1_state, "d_V_1_state");
    sc_trace(mVcdFile, d_V_1_state_cmp_full, "d_V_1_state_cmp_full");
    sc_trace(mVcdFile, a_V_TDATA_blk_n, "a_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, b_V_TDATA_blk_n, "b_V_TDATA_blk_n");
    sc_trace(mVcdFile, c_V_TDATA_blk_n, "c_V_TDATA_blk_n");
    sc_trace(mVcdFile, d_V_TDATA_blk_n, "d_V_TDATA_blk_n");
    sc_trace(mVcdFile, b_V_read_reg_170, "b_V_read_reg_170");
    sc_trace(mVcdFile, b_V_read_reg_170_pp0_iter1_reg, "b_V_read_reg_170_pp0_iter1_reg");
    sc_trace(mVcdFile, b_V_read_reg_170_pp0_iter2_reg, "b_V_read_reg_170_pp0_iter2_reg");
    sc_trace(mVcdFile, b_V_read_reg_170_pp0_iter3_reg, "b_V_read_reg_170_pp0_iter3_reg");
    sc_trace(mVcdFile, b_V_read_reg_170_pp0_iter4_reg, "b_V_read_reg_170_pp0_iter4_reg");
    sc_trace(mVcdFile, b_V_read_reg_170_pp0_iter5_reg, "b_V_read_reg_170_pp0_iter5_reg");
    sc_trace(mVcdFile, b_V_read_reg_170_pp0_iter6_reg, "b_V_read_reg_170_pp0_iter6_reg");
    sc_trace(mVcdFile, b_V_read_reg_170_pp0_iter7_reg, "b_V_read_reg_170_pp0_iter7_reg");
    sc_trace(mVcdFile, b_V_read_reg_170_pp0_iter8_reg, "b_V_read_reg_170_pp0_iter8_reg");
    sc_trace(mVcdFile, b_V_read_reg_170_pp0_iter9_reg, "b_V_read_reg_170_pp0_iter9_reg");
    sc_trace(mVcdFile, b_V_read_reg_170_pp0_iter10_reg, "b_V_read_reg_170_pp0_iter10_reg");
    sc_trace(mVcdFile, b_V_read_reg_170_pp0_iter11_reg, "b_V_read_reg_170_pp0_iter11_reg");
    sc_trace(mVcdFile, a_V_read_reg_180, "a_V_read_reg_180");
    sc_trace(mVcdFile, a_V_read_reg_180_pp0_iter1_reg, "a_V_read_reg_180_pp0_iter1_reg");
    sc_trace(mVcdFile, a_V_read_reg_180_pp0_iter2_reg, "a_V_read_reg_180_pp0_iter2_reg");
    sc_trace(mVcdFile, a_V_read_reg_180_pp0_iter3_reg, "a_V_read_reg_180_pp0_iter3_reg");
    sc_trace(mVcdFile, a_V_read_reg_180_pp0_iter4_reg, "a_V_read_reg_180_pp0_iter4_reg");
    sc_trace(mVcdFile, a_V_read_reg_180_pp0_iter5_reg, "a_V_read_reg_180_pp0_iter5_reg");
    sc_trace(mVcdFile, a_V_read_reg_180_pp0_iter6_reg, "a_V_read_reg_180_pp0_iter6_reg");
    sc_trace(mVcdFile, a_V_read_reg_180_pp0_iter7_reg, "a_V_read_reg_180_pp0_iter7_reg");
    sc_trace(mVcdFile, a_V_read_reg_180_pp0_iter8_reg, "a_V_read_reg_180_pp0_iter8_reg");
    sc_trace(mVcdFile, a_V_read_reg_180_pp0_iter9_reg, "a_V_read_reg_180_pp0_iter9_reg");
    sc_trace(mVcdFile, a_V_read_reg_180_pp0_iter10_reg, "a_V_read_reg_180_pp0_iter10_reg");
    sc_trace(mVcdFile, a_V_read_reg_180_pp0_iter11_reg, "a_V_read_reg_180_pp0_iter11_reg");
    sc_trace(mVcdFile, tmp_fu_73_p1, "tmp_fu_73_p1");
    sc_trace(mVcdFile, tmp_reg_190_pp0_iter1_reg, "tmp_reg_190_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_reg_190_pp0_iter2_reg, "tmp_reg_190_pp0_iter2_reg");
    sc_trace(mVcdFile, tmp_reg_190_pp0_iter3_reg, "tmp_reg_190_pp0_iter3_reg");
    sc_trace(mVcdFile, tmp_reg_190_pp0_iter4_reg, "tmp_reg_190_pp0_iter4_reg");
    sc_trace(mVcdFile, tmp_reg_190_pp0_iter5_reg, "tmp_reg_190_pp0_iter5_reg");
    sc_trace(mVcdFile, tmp_reg_190_pp0_iter6_reg, "tmp_reg_190_pp0_iter6_reg");
    sc_trace(mVcdFile, tmp_reg_190_pp0_iter7_reg, "tmp_reg_190_pp0_iter7_reg");
    sc_trace(mVcdFile, tmp_reg_190_pp0_iter8_reg, "tmp_reg_190_pp0_iter8_reg");
    sc_trace(mVcdFile, tmp_reg_190_pp0_iter9_reg, "tmp_reg_190_pp0_iter9_reg");
    sc_trace(mVcdFile, tmp_reg_190_pp0_iter10_reg, "tmp_reg_190_pp0_iter10_reg");
    sc_trace(mVcdFile, p_5_fu_95_p1, "p_5_fu_95_p1");
    sc_trace(mVcdFile, p_4_fu_104_p1, "p_4_fu_104_p1");
    sc_trace(mVcdFile, p_3_fu_113_p1, "p_3_fu_113_p1");
    sc_trace(mVcdFile, p_2_fu_118_p1, "p_2_fu_118_p1");
    sc_trace(mVcdFile, ret_V_2_fu_129_p2, "ret_V_2_fu_129_p2");
    sc_trace(mVcdFile, p_1_fu_148_p1, "p_1_fu_148_p1");
    sc_trace(mVcdFile, p_s_fu_165_p1, "p_s_fu_165_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, tmp_7_tr_fu_77_p0, "tmp_7_tr_fu_77_p0");
    sc_trace(mVcdFile, grp_fu_85_p0, "grp_fu_85_p0");
    sc_trace(mVcdFile, ret_V_6_fu_91_p2, "ret_V_6_fu_91_p2");
    sc_trace(mVcdFile, ret_V_5_fu_100_p2, "ret_V_5_fu_100_p2");
    sc_trace(mVcdFile, ret_V_4_fu_109_p2, "ret_V_4_fu_109_p2");
    sc_trace(mVcdFile, grp_fu_85_p2, "grp_fu_85_p2");
    sc_trace(mVcdFile, ret_V_2_fu_129_p0, "ret_V_2_fu_129_p0");
    sc_trace(mVcdFile, ret_V_2_fu_129_p1, "ret_V_2_fu_129_p1");
    sc_trace(mVcdFile, lhs_V_1_fu_136_p1, "lhs_V_1_fu_136_p1");
    sc_trace(mVcdFile, rhs_V_1_fu_139_p1, "rhs_V_1_fu_139_p1");
    sc_trace(mVcdFile, ret_V_1_fu_142_p2, "ret_V_1_fu_142_p2");
    sc_trace(mVcdFile, rhs_V_fu_156_p1, "rhs_V_fu_156_p1");
    sc_trace(mVcdFile, lhs_V_fu_153_p1, "lhs_V_fu_153_p1");
    sc_trace(mVcdFile, ret_V_fu_159_p2, "ret_V_fu_159_p2");
    sc_trace(mVcdFile, grp_fu_85_ce, "grp_fu_85_ce");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0_0to12, "ap_idle_pp0_0to12");
    sc_trace(mVcdFile, ap_reset_idle_pp0, "ap_reset_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
    mHdltvinHandle.open("cal.hdltvin.dat");
    mHdltvoutHandle.open("cal.hdltvout.dat");
}

cal::~cal() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete cal_sdiv_9s_8s_9_13_1_U1;
}

void cal::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        a_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, a_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, a_V_0_vld_out.read()))) {
            a_V_0_sel_rd =  (sc_logic) (~a_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        a_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, a_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, a_V_0_ack_in.read()))) {
            a_V_0_sel_wr =  (sc_logic) (~a_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        a_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, a_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, a_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(a_V_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, a_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(a_V_0_state.read(), ap_const_lv2_2)))) {
            a_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, a_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, a_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(a_V_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, a_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(a_V_0_state.read(), ap_const_lv2_1)))) {
            a_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, a_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(a_V_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, a_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(a_V_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(a_V_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, a_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, a_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, a_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, a_V_0_ack_out.read()))))) {
            a_V_0_state = ap_const_lv2_3;
        } else {
            a_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_pp0_stage0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp0_iter1 = ap_start.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter10 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter10 = ap_enable_reg_pp0_iter9.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter11 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter11 = ap_enable_reg_pp0_iter10.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter12 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter12 = ap_enable_reg_pp0_iter11.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter13 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter13 = ap_enable_reg_pp0_iter12.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter3 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter3 = ap_enable_reg_pp0_iter2.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter4 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter4 = ap_enable_reg_pp0_iter3.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter5 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter5 = ap_enable_reg_pp0_iter4.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter6 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter6 = ap_enable_reg_pp0_iter5.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter7 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter7 = ap_enable_reg_pp0_iter6.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter8 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter8 = ap_enable_reg_pp0_iter7.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter9 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter9 = ap_enable_reg_pp0_iter8.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        b_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, b_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, b_V_0_vld_out.read()))) {
            b_V_0_sel_rd =  (sc_logic) (~b_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        b_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, b_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, b_V_0_ack_in.read()))) {
            b_V_0_sel_wr =  (sc_logic) (~b_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        b_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, b_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, b_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, b_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, b_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, b_V_0_state.read())))) {
            b_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, b_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, b_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, b_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, b_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, b_V_0_state.read())))) {
            b_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, b_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, b_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, b_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, b_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, b_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, b_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, b_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, b_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, b_V_0_ack_out.read()))))) {
            b_V_0_state = ap_const_lv2_3;
        } else {
            b_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        c_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, c_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, c_V_0_vld_out.read()))) {
            c_V_0_sel_rd =  (sc_logic) (~c_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        c_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, c_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, c_V_0_ack_in.read()))) {
            c_V_0_sel_wr =  (sc_logic) (~c_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        c_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, c_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, c_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, c_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, c_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, c_V_0_state.read())))) {
            c_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, c_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, c_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, c_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, c_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, c_V_0_state.read())))) {
            c_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, c_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, c_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, c_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, c_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, c_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, c_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, c_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, c_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, c_V_0_ack_out.read()))))) {
            c_V_0_state = ap_const_lv2_3;
        } else {
            c_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        d_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, d_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, d_V_1_vld_out.read()))) {
            d_V_1_sel_rd =  (sc_logic) (~d_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        d_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, d_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, d_V_1_ack_in.read()))) {
            d_V_1_sel_wr =  (sc_logic) (~d_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        d_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, d_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, d_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, d_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, d_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, d_V_1_state.read())))) {
            d_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, d_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, d_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, d_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, d_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, d_V_1_state.read())))) {
            d_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, d_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, d_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, d_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, d_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, d_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, d_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, d_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, d_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, d_V_1_ack_out.read()))))) {
            d_V_1_state = ap_const_lv2_3;
        } else {
            d_V_1_state = ap_const_lv2_2;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, a_V_0_load_A.read())) {
        a_V_0_payload_A = a_V_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, a_V_0_load_B.read())) {
        a_V_0_payload_B = a_V_TDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        a_V_read_reg_180 = a_V_0_data_out.read();
        a_V_read_reg_180_pp0_iter1_reg = a_V_read_reg_180.read();
        b_V_read_reg_170 = b_V_0_data_out.read();
        b_V_read_reg_170_pp0_iter1_reg = b_V_read_reg_170.read();
        tmp_reg_190 = tmp_fu_73_p1.read();
        tmp_reg_190_pp0_iter1_reg = tmp_reg_190.read();
    }
    if (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) {
        a_V_read_reg_180_pp0_iter10_reg = a_V_read_reg_180_pp0_iter9_reg.read();
        a_V_read_reg_180_pp0_iter11_reg = a_V_read_reg_180_pp0_iter10_reg.read();
        a_V_read_reg_180_pp0_iter2_reg = a_V_read_reg_180_pp0_iter1_reg.read();
        a_V_read_reg_180_pp0_iter3_reg = a_V_read_reg_180_pp0_iter2_reg.read();
        a_V_read_reg_180_pp0_iter4_reg = a_V_read_reg_180_pp0_iter3_reg.read();
        a_V_read_reg_180_pp0_iter5_reg = a_V_read_reg_180_pp0_iter4_reg.read();
        a_V_read_reg_180_pp0_iter6_reg = a_V_read_reg_180_pp0_iter5_reg.read();
        a_V_read_reg_180_pp0_iter7_reg = a_V_read_reg_180_pp0_iter6_reg.read();
        a_V_read_reg_180_pp0_iter8_reg = a_V_read_reg_180_pp0_iter7_reg.read();
        a_V_read_reg_180_pp0_iter9_reg = a_V_read_reg_180_pp0_iter8_reg.read();
        b_V_read_reg_170_pp0_iter10_reg = b_V_read_reg_170_pp0_iter9_reg.read();
        b_V_read_reg_170_pp0_iter11_reg = b_V_read_reg_170_pp0_iter10_reg.read();
        b_V_read_reg_170_pp0_iter2_reg = b_V_read_reg_170_pp0_iter1_reg.read();
        b_V_read_reg_170_pp0_iter3_reg = b_V_read_reg_170_pp0_iter2_reg.read();
        b_V_read_reg_170_pp0_iter4_reg = b_V_read_reg_170_pp0_iter3_reg.read();
        b_V_read_reg_170_pp0_iter5_reg = b_V_read_reg_170_pp0_iter4_reg.read();
        b_V_read_reg_170_pp0_iter6_reg = b_V_read_reg_170_pp0_iter5_reg.read();
        b_V_read_reg_170_pp0_iter7_reg = b_V_read_reg_170_pp0_iter6_reg.read();
        b_V_read_reg_170_pp0_iter8_reg = b_V_read_reg_170_pp0_iter7_reg.read();
        b_V_read_reg_170_pp0_iter9_reg = b_V_read_reg_170_pp0_iter8_reg.read();
        tmp_reg_190_pp0_iter10_reg = tmp_reg_190_pp0_iter9_reg.read();
        tmp_reg_190_pp0_iter11_reg = tmp_reg_190_pp0_iter10_reg.read();
        tmp_reg_190_pp0_iter12_reg = tmp_reg_190_pp0_iter11_reg.read();
        tmp_reg_190_pp0_iter2_reg = tmp_reg_190_pp0_iter1_reg.read();
        tmp_reg_190_pp0_iter3_reg = tmp_reg_190_pp0_iter2_reg.read();
        tmp_reg_190_pp0_iter4_reg = tmp_reg_190_pp0_iter3_reg.read();
        tmp_reg_190_pp0_iter5_reg = tmp_reg_190_pp0_iter4_reg.read();
        tmp_reg_190_pp0_iter6_reg = tmp_reg_190_pp0_iter5_reg.read();
        tmp_reg_190_pp0_iter7_reg = tmp_reg_190_pp0_iter6_reg.read();
        tmp_reg_190_pp0_iter8_reg = tmp_reg_190_pp0_iter7_reg.read();
        tmp_reg_190_pp0_iter9_reg = tmp_reg_190_pp0_iter8_reg.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, b_V_0_load_A.read())) {
        b_V_0_payload_A = b_V_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, b_V_0_load_B.read())) {
        b_V_0_payload_B = b_V_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, c_V_0_load_A.read())) {
        c_V_0_payload_A = c_V_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, c_V_0_load_B.read())) {
        c_V_0_payload_B = c_V_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, d_V_1_load_A.read())) {
        d_V_1_payload_A = d_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, d_V_1_load_B.read())) {
        d_V_1_payload_B = d_V_1_data_in.read();
    }
}

void cal::thread_a_V_0_ack_in() {
    a_V_0_ack_in = a_V_0_state.read()[1];
}

void cal::thread_a_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        a_V_0_ack_out = ap_const_logic_1;
    } else {
        a_V_0_ack_out = ap_const_logic_0;
    }
}

void cal::thread_a_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, a_V_0_sel.read())) {
        a_V_0_data_out = a_V_0_payload_B.read();
    } else {
        a_V_0_data_out = a_V_0_payload_A.read();
    }
}

void cal::thread_a_V_0_load_A() {
    a_V_0_load_A = (a_V_0_state_cmp_full.read() & ~a_V_0_sel_wr.read());
}

void cal::thread_a_V_0_load_B() {
    a_V_0_load_B = (a_V_0_sel_wr.read() & a_V_0_state_cmp_full.read());
}

void cal::thread_a_V_0_sel() {
    a_V_0_sel = a_V_0_sel_rd.read();
}

void cal::thread_a_V_0_state_cmp_full() {
    a_V_0_state_cmp_full =  (sc_logic) ((!a_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(a_V_0_state.read() != ap_const_lv2_1))[0];
}

void cal::thread_a_V_0_vld_in() {
    a_V_0_vld_in = a_V_TVALID.read();
}

void cal::thread_a_V_0_vld_out() {
    a_V_0_vld_out = a_V_0_state.read()[0];
}

void cal::thread_a_V_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        a_V_TDATA_blk_n = a_V_0_state.read()[0];
    } else {
        a_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void cal::thread_a_V_TREADY() {
    a_V_TREADY = a_V_0_state.read()[1];
}

void cal::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[0];
}

void cal::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void cal::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, c_V_0_vld_out.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, b_V_0_vld_out.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, a_V_0_vld_out.read()))) || (esl_seteq<1,1,1>(ap_const_logic_0, d_V_1_ack_in.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter13.read())));
}

void cal::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, c_V_0_vld_out.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, b_V_0_vld_out.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, a_V_0_vld_out.read()))) || (esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state13_io.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter12.read())) || ((esl_seteq<1,1,1>(ap_const_logic_0, d_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state14_io.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter13.read())));
}

void cal::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, c_V_0_vld_out.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, b_V_0_vld_out.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, a_V_0_vld_out.read()))) || (esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state13_io.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter12.read())) || ((esl_seteq<1,1,1>(ap_const_logic_0, d_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state14_io.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter13.read())));
}

void cal::thread_ap_block_state10_pp0_stage0_iter9() {
    ap_block_state10_pp0_stage0_iter9 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void cal::thread_ap_block_state11_pp0_stage0_iter10() {
    ap_block_state11_pp0_stage0_iter10 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void cal::thread_ap_block_state12_pp0_stage0_iter11() {
    ap_block_state12_pp0_stage0_iter11 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void cal::thread_ap_block_state13_io() {
    ap_block_state13_io = ((esl_seteq<1,1,1>(ap_const_logic_0, d_V_1_ack_in.read()) && 
  esl_seteq<1,3,3>(tmp_reg_190_pp0_iter11_reg.read(), ap_const_lv3_6)) || (esl_seteq<1,1,1>(ap_const_logic_0, d_V_1_ack_in.read()) && 
  esl_seteq<1,3,3>(tmp_reg_190_pp0_iter11_reg.read(), ap_const_lv3_5)) || (esl_seteq<1,1,1>(ap_const_logic_0, d_V_1_ack_in.read()) && 
  esl_seteq<1,3,3>(tmp_reg_190_pp0_iter11_reg.read(), ap_const_lv3_4)) || (esl_seteq<1,1,1>(ap_const_logic_0, d_V_1_ack_in.read()) && 
  esl_seteq<1,3,3>(tmp_reg_190_pp0_iter11_reg.read(), ap_const_lv3_3)) || (esl_seteq<1,1,1>(ap_const_logic_0, d_V_1_ack_in.read()) && 
  esl_seteq<1,3,3>(tmp_reg_190_pp0_iter11_reg.read(), ap_const_lv3_2)) || (esl_seteq<1,1,1>(ap_const_logic_0, d_V_1_ack_in.read()) && 
  esl_seteq<1,3,3>(tmp_reg_190_pp0_iter11_reg.read(), ap_const_lv3_1)) || (esl_seteq<1,1,1>(ap_const_logic_0, d_V_1_ack_in.read()) && 
  esl_seteq<1,3,3>(tmp_reg_190_pp0_iter11_reg.read(), ap_const_lv3_0)));
}

void cal::thread_ap_block_state13_pp0_stage0_iter12() {
    ap_block_state13_pp0_stage0_iter12 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void cal::thread_ap_block_state14_io() {
    ap_block_state14_io = ((esl_seteq<1,1,1>(ap_const_logic_0, d_V_1_ack_in.read()) && 
  esl_seteq<1,3,3>(ap_const_lv3_6, tmp_reg_190_pp0_iter12_reg.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, d_V_1_ack_in.read()) && 
  esl_seteq<1,3,3>(ap_const_lv3_5, tmp_reg_190_pp0_iter12_reg.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, d_V_1_ack_in.read()) && 
  esl_seteq<1,3,3>(ap_const_lv3_4, tmp_reg_190_pp0_iter12_reg.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, d_V_1_ack_in.read()) && 
  esl_seteq<1,3,3>(ap_const_lv3_3, tmp_reg_190_pp0_iter12_reg.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, d_V_1_ack_in.read()) && 
  esl_seteq<1,3,3>(ap_const_lv3_2, tmp_reg_190_pp0_iter12_reg.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, d_V_1_ack_in.read()) && 
  esl_seteq<1,3,3>(ap_const_lv3_1, tmp_reg_190_pp0_iter12_reg.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, d_V_1_ack_in.read()) && 
  esl_seteq<1,3,3>(ap_const_lv3_0, tmp_reg_190_pp0_iter12_reg.read())));
}

void cal::thread_ap_block_state14_pp0_stage0_iter13() {
    ap_block_state14_pp0_stage0_iter13 = esl_seteq<1,1,1>(ap_const_logic_0, d_V_1_ack_in.read());
}

void cal::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, c_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, b_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, a_V_0_vld_out.read()));
}

void cal::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void cal::thread_ap_block_state3_pp0_stage0_iter2() {
    ap_block_state3_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void cal::thread_ap_block_state4_pp0_stage0_iter3() {
    ap_block_state4_pp0_stage0_iter3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void cal::thread_ap_block_state5_pp0_stage0_iter4() {
    ap_block_state5_pp0_stage0_iter4 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void cal::thread_ap_block_state6_pp0_stage0_iter5() {
    ap_block_state6_pp0_stage0_iter5 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void cal::thread_ap_block_state7_pp0_stage0_iter6() {
    ap_block_state7_pp0_stage0_iter6 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void cal::thread_ap_block_state8_pp0_stage0_iter7() {
    ap_block_state8_pp0_stage0_iter7 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void cal::thread_ap_block_state9_pp0_stage0_iter8() {
    ap_block_state9_pp0_stage0_iter8 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void cal::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter13.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void cal::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void cal::thread_ap_enable_reg_pp0_iter0() {
    ap_enable_reg_pp0_iter0 = ap_start.read();
}

void cal::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void cal::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter4.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter5.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter6.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter7.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter8.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter9.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter10.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter11.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter12.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter13.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void cal::thread_ap_idle_pp0_0to12() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter4.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter5.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter6.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter7.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter8.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter9.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter10.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter11.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter12.read()))) {
        ap_idle_pp0_0to12 = ap_const_logic_1;
    } else {
        ap_idle_pp0_0to12 = ap_const_logic_0;
    }
}

void cal::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void cal::thread_ap_reset_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_0to12.read()))) {
        ap_reset_idle_pp0 = ap_const_logic_1;
    } else {
        ap_reset_idle_pp0 = ap_const_logic_0;
    }
}

void cal::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void cal::thread_b_V_0_ack_in() {
    b_V_0_ack_in = b_V_0_state.read()[1];
}

void cal::thread_b_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        b_V_0_ack_out = ap_const_logic_1;
    } else {
        b_V_0_ack_out = ap_const_logic_0;
    }
}

void cal::thread_b_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, b_V_0_sel.read())) {
        b_V_0_data_out = b_V_0_payload_B.read();
    } else {
        b_V_0_data_out = b_V_0_payload_A.read();
    }
}

void cal::thread_b_V_0_load_A() {
    b_V_0_load_A = (b_V_0_state_cmp_full.read() & ~b_V_0_sel_wr.read());
}

void cal::thread_b_V_0_load_B() {
    b_V_0_load_B = (b_V_0_sel_wr.read() & b_V_0_state_cmp_full.read());
}

void cal::thread_b_V_0_sel() {
    b_V_0_sel = b_V_0_sel_rd.read();
}

void cal::thread_b_V_0_state_cmp_full() {
    b_V_0_state_cmp_full =  (sc_logic) ((!b_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(b_V_0_state.read() != ap_const_lv2_1))[0];
}

void cal::thread_b_V_0_vld_in() {
    b_V_0_vld_in = b_V_TVALID.read();
}

void cal::thread_b_V_0_vld_out() {
    b_V_0_vld_out = b_V_0_state.read()[0];
}

void cal::thread_b_V_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        b_V_TDATA_blk_n = b_V_0_state.read()[0];
    } else {
        b_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void cal::thread_b_V_TREADY() {
    b_V_TREADY = b_V_0_state.read()[1];
}

void cal::thread_c_V_0_ack_in() {
    c_V_0_ack_in = c_V_0_state.read()[1];
}

void cal::thread_c_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        c_V_0_ack_out = ap_const_logic_1;
    } else {
        c_V_0_ack_out = ap_const_logic_0;
    }
}

void cal::thread_c_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, c_V_0_sel.read())) {
        c_V_0_data_out = c_V_0_payload_B.read();
    } else {
        c_V_0_data_out = c_V_0_payload_A.read();
    }
}

void cal::thread_c_V_0_load_A() {
    c_V_0_load_A = (c_V_0_state_cmp_full.read() & ~c_V_0_sel_wr.read());
}

void cal::thread_c_V_0_load_B() {
    c_V_0_load_B = (c_V_0_sel_wr.read() & c_V_0_state_cmp_full.read());
}

void cal::thread_c_V_0_sel() {
    c_V_0_sel = c_V_0_sel_rd.read();
}

void cal::thread_c_V_0_state_cmp_full() {
    c_V_0_state_cmp_full =  (sc_logic) ((!c_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(c_V_0_state.read() != ap_const_lv2_1))[0];
}

void cal::thread_c_V_0_vld_in() {
    c_V_0_vld_in = c_V_TVALID.read();
}

void cal::thread_c_V_0_vld_out() {
    c_V_0_vld_out = c_V_0_state.read()[0];
}

void cal::thread_c_V_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        c_V_TDATA_blk_n = c_V_0_state.read()[0];
    } else {
        c_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void cal::thread_c_V_TREADY() {
    c_V_TREADY = c_V_0_state.read()[1];
}

void cal::thread_d_V_1_ack_in() {
    d_V_1_ack_in = d_V_1_state.read()[1];
}

void cal::thread_d_V_1_ack_out() {
    d_V_1_ack_out = d_V_TREADY.read();
}

void cal::thread_d_V_1_data_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter12.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0))) {
        if (esl_seteq<1,3,3>(tmp_reg_190_pp0_iter11_reg.read(), ap_const_lv3_0)) {
            d_V_1_data_in = p_s_fu_165_p1.read();
        } else if (esl_seteq<1,3,3>(tmp_reg_190_pp0_iter11_reg.read(), ap_const_lv3_1)) {
            d_V_1_data_in = p_1_fu_148_p1.read();
        } else if (esl_seteq<1,3,3>(tmp_reg_190_pp0_iter11_reg.read(), ap_const_lv3_2)) {
            d_V_1_data_in = ret_V_2_fu_129_p2.read();
        } else if (esl_seteq<1,3,3>(tmp_reg_190_pp0_iter11_reg.read(), ap_const_lv3_3)) {
            d_V_1_data_in = p_2_fu_118_p1.read();
        } else if (esl_seteq<1,3,3>(tmp_reg_190_pp0_iter11_reg.read(), ap_const_lv3_4)) {
            d_V_1_data_in = p_3_fu_113_p1.read();
        } else if (esl_seteq<1,3,3>(tmp_reg_190_pp0_iter11_reg.read(), ap_const_lv3_5)) {
            d_V_1_data_in = p_4_fu_104_p1.read();
        } else if (esl_seteq<1,3,3>(tmp_reg_190_pp0_iter11_reg.read(), ap_const_lv3_6)) {
            d_V_1_data_in = p_5_fu_95_p1.read();
        } else {
            d_V_1_data_in = "XXXXXXXXXXXXXXXX";
        }
    } else {
        d_V_1_data_in = "XXXXXXXXXXXXXXXX";
    }
}

void cal::thread_d_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, d_V_1_sel.read())) {
        d_V_1_data_out = d_V_1_payload_B.read();
    } else {
        d_V_1_data_out = d_V_1_payload_A.read();
    }
}

void cal::thread_d_V_1_load_A() {
    d_V_1_load_A = (d_V_1_state_cmp_full.read() & ~d_V_1_sel_wr.read());
}

void cal::thread_d_V_1_load_B() {
    d_V_1_load_B = (d_V_1_sel_wr.read() & d_V_1_state_cmp_full.read());
}

void cal::thread_d_V_1_sel() {
    d_V_1_sel = d_V_1_sel_rd.read();
}

void cal::thread_d_V_1_state_cmp_full() {
    d_V_1_state_cmp_full =  (sc_logic) ((!d_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(d_V_1_state.read() != ap_const_lv2_1))[0];
}

void cal::thread_d_V_1_vld_in() {
    if (((esl_seteq<1,3,3>(tmp_reg_190_pp0_iter11_reg.read(), ap_const_lv3_6) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter12.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,3,3>(tmp_reg_190_pp0_iter11_reg.read(), ap_const_lv3_5) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter12.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,3,3>(tmp_reg_190_pp0_iter11_reg.read(), ap_const_lv3_4) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter12.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,3,3>(tmp_reg_190_pp0_iter11_reg.read(), ap_const_lv3_3) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter12.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,3,3>(tmp_reg_190_pp0_iter11_reg.read(), ap_const_lv3_2) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter12.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,3,3>(tmp_reg_190_pp0_iter11_reg.read(), ap_const_lv3_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter12.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,3,3>(tmp_reg_190_pp0_iter11_reg.read(), ap_const_lv3_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter12.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        d_V_1_vld_in = ap_const_logic_1;
    } else {
        d_V_1_vld_in = ap_const_logic_0;
    }
}

void cal::thread_d_V_1_vld_out() {
    d_V_1_vld_out = d_V_1_state.read()[0];
}

void cal::thread_d_V_TDATA() {
    d_V_TDATA = d_V_1_data_out.read();
}

void cal::thread_d_V_TDATA_blk_n() {
    if (((esl_seteq<1,3,3>(tmp_reg_190_pp0_iter11_reg.read(), ap_const_lv3_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter12.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,3,3>(ap_const_lv3_0, tmp_reg_190_pp0_iter12_reg.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter13.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,3,3>(tmp_reg_190_pp0_iter11_reg.read(), ap_const_lv3_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter12.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,3,3>(ap_const_lv3_1, tmp_reg_190_pp0_iter12_reg.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter13.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,3,3>(tmp_reg_190_pp0_iter11_reg.read(), ap_const_lv3_2) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter12.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,3,3>(ap_const_lv3_2, tmp_reg_190_pp0_iter12_reg.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter13.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,3,3>(tmp_reg_190_pp0_iter11_reg.read(), ap_const_lv3_3) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter12.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,3,3>(ap_const_lv3_3, tmp_reg_190_pp0_iter12_reg.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter13.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,3,3>(tmp_reg_190_pp0_iter11_reg.read(), ap_const_lv3_4) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter12.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,3,3>(ap_const_lv3_4, tmp_reg_190_pp0_iter12_reg.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter13.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,3,3>(tmp_reg_190_pp0_iter11_reg.read(), ap_const_lv3_5) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter12.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,3,3>(ap_const_lv3_5, tmp_reg_190_pp0_iter12_reg.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter13.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,3,3>(tmp_reg_190_pp0_iter11_reg.read(), ap_const_lv3_6) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter12.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,3,3>(ap_const_lv3_6, tmp_reg_190_pp0_iter12_reg.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter13.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)))) {
        d_V_TDATA_blk_n = d_V_1_state.read()[1];
    } else {
        d_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void cal::thread_d_V_TVALID() {
    d_V_TVALID = d_V_1_state.read()[0];
}

void cal::thread_grp_fu_85_ce() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        grp_fu_85_ce = ap_const_logic_1;
    } else {
        grp_fu_85_ce = ap_const_logic_0;
    }
}

void cal::thread_grp_fu_85_p0() {
    grp_fu_85_p0 = esl_sext<9,8>(tmp_7_tr_fu_77_p0.read());
}

void cal::thread_lhs_V_1_fu_136_p1() {
    lhs_V_1_fu_136_p1 = esl_sext<9,8>(a_V_read_reg_180_pp0_iter11_reg.read());
}

void cal::thread_lhs_V_fu_153_p1() {
    lhs_V_fu_153_p1 = esl_sext<9,8>(a_V_read_reg_180_pp0_iter11_reg.read());
}

void cal::thread_p_1_fu_148_p1() {
    p_1_fu_148_p1 = esl_sext<16,9>(ret_V_1_fu_142_p2.read());
}

void cal::thread_p_2_fu_118_p1() {
    p_2_fu_118_p1 = esl_sext<16,9>(grp_fu_85_p2.read());
}

void cal::thread_p_3_fu_113_p1() {
    p_3_fu_113_p1 = esl_sext<16,8>(ret_V_4_fu_109_p2.read());
}

void cal::thread_p_4_fu_104_p1() {
    p_4_fu_104_p1 = esl_sext<16,8>(ret_V_5_fu_100_p2.read());
}

void cal::thread_p_5_fu_95_p1() {
    p_5_fu_95_p1 = esl_sext<16,8>(ret_V_6_fu_91_p2.read());
}

void cal::thread_p_s_fu_165_p1() {
    p_s_fu_165_p1 = esl_sext<16,9>(ret_V_fu_159_p2.read());
}

void cal::thread_ret_V_1_fu_142_p2() {
    ret_V_1_fu_142_p2 = (!lhs_V_1_fu_136_p1.read().is_01() || !rhs_V_1_fu_139_p1.read().is_01())? sc_lv<9>(): (sc_bigint<9>(lhs_V_1_fu_136_p1.read()) - sc_bigint<9>(rhs_V_1_fu_139_p1.read()));
}

void cal::thread_ret_V_2_fu_129_p0() {
    ret_V_2_fu_129_p0 = b_V_read_reg_170_pp0_iter11_reg.read();
}

void cal::thread_ret_V_2_fu_129_p1() {
    ret_V_2_fu_129_p1 = a_V_read_reg_180_pp0_iter11_reg.read();
}

void cal::thread_ret_V_2_fu_129_p2() {
    ret_V_2_fu_129_p2 = (!ret_V_2_fu_129_p0.read().is_01() || !ret_V_2_fu_129_p1.read().is_01())? sc_lv<16>(): sc_bigint<8>(ret_V_2_fu_129_p0.read()) * sc_bigint<8>(ret_V_2_fu_129_p1.read());
}

void cal::thread_ret_V_4_fu_109_p2() {
    ret_V_4_fu_109_p2 = (b_V_read_reg_170_pp0_iter11_reg.read() & a_V_read_reg_180_pp0_iter11_reg.read());
}

void cal::thread_ret_V_5_fu_100_p2() {
    ret_V_5_fu_100_p2 = (b_V_read_reg_170_pp0_iter11_reg.read() | a_V_read_reg_180_pp0_iter11_reg.read());
}

void cal::thread_ret_V_6_fu_91_p2() {
    ret_V_6_fu_91_p2 = (b_V_read_reg_170_pp0_iter11_reg.read() ^ a_V_read_reg_180_pp0_iter11_reg.read());
}

void cal::thread_ret_V_fu_159_p2() {
    ret_V_fu_159_p2 = (!rhs_V_fu_156_p1.read().is_01() || !lhs_V_fu_153_p1.read().is_01())? sc_lv<9>(): (sc_bigint<9>(rhs_V_fu_156_p1.read()) + sc_bigint<9>(lhs_V_fu_153_p1.read()));
}

void cal::thread_rhs_V_1_fu_139_p1() {
    rhs_V_1_fu_139_p1 = esl_sext<9,8>(b_V_read_reg_170_pp0_iter11_reg.read());
}

void cal::thread_rhs_V_fu_156_p1() {
    rhs_V_fu_156_p1 = esl_sext<9,8>(b_V_read_reg_170_pp0_iter11_reg.read());
}

void cal::thread_tmp_7_tr_fu_77_p0() {
    tmp_7_tr_fu_77_p0 = a_V_0_data_out.read();
}

void cal::thread_tmp_fu_73_p1() {
    tmp_fu_73_p1 = c_V_0_data_out.read().range(3-1, 0);
}

void cal::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
break;
        default : 
            ap_NS_fsm =  (sc_lv<1>) ("X");
            break;
    }
}

void cal::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"d_V_TREADY\" :  \"" << d_V_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"a_V_TDATA\" :  \"" << a_V_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"a_V_TVALID\" :  \"" << a_V_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_V_TREADY\" :  \"" << a_V_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"b_V_TDATA\" :  \"" << b_V_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"b_V_TVALID\" :  \"" << b_V_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_V_TREADY\" :  \"" << b_V_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"c_V_TDATA\" :  \"" << c_V_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"c_V_TVALID\" :  \"" << c_V_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"c_V_TREADY\" :  \"" << c_V_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"d_V_TDATA\" :  \"" << d_V_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"d_V_TVALID\" :  \"" << d_V_TVALID.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

