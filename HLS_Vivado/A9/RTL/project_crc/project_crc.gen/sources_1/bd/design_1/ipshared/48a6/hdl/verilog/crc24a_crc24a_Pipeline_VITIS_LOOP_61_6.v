// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module crc24a_crc24a_Pipeline_VITIS_LOOP_61_6 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        mux_case_09567_reload,
        conv4_i_19419570_reload,
        conv4_i_19709573_reload,
        conv4_i_19999576_reload,
        conv4_i_110289579_reload,
        conv4_i_110579582_reload,
        conv4_i_616079585_reload,
        conv4_i_722739588_reload,
        conv4_i_723029591_reload,
        conv4_i_723319594_reload,
        conv4_i_1029399597_reload,
        conv4_i_1029689600_reload,
        conv4_i_1029979603_reload,
        conv4_i_1336059606_reload,
        conv4_i_1442719609_reload,
        conv4_i_1443009612_reload,
        conv4_i_1443299615_reload,
        conv4_i_1749379618_reload,
        conv4_i_1856039621_reload,
        conv4_i_1962699624_reload,
        conv4_i_2069359627_reload,
        conv4_i_2176019630_reload,
        conv4_i_2176309633_reload,
        conv4_i_2382679636_reload,
        mux_case_249389639_reload,
        mux_case_2516009642_reload,
        mux_case_2616019645_reload,
        mux_case_2716029648_reload,
        mux_case_2816039651_reload,
        mux_case_2916049654_reload,
        mux_case_3022709657_reload,
        mux_case_3129349660_reload,
        mux_case_3229359663_reload,
        mux_case_3329369666_reload,
        mux_case_3436009669_reload,
        mux_case_3536019672_reload,
        mux_case_3636029675_reload,
        mux_case_3742689678_reload,
        mux_case_3849329681_reload,
        mux_case_3949339684_reload,
        mux_case_4049349687_reload,
        mux_case_4156009690_reload,
        mux_case_4262669693_reload,
        mux_case_4369329696_reload,
        mux_case_4475989699_reload,
        mux_case_4582639702_reload,
        mux_case_4682649705_reload,
        mux_case_4753689309708_reload,
        startIdx_out,
        startIdx_out_ap_vld,
        icmp_ln61_out,
        icmp_ln61_out_ap_vld,
        ap_return
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [0:0] mux_case_09567_reload;
input  [0:0] conv4_i_19419570_reload;
input  [0:0] conv4_i_19709573_reload;
input  [0:0] conv4_i_19999576_reload;
input  [0:0] conv4_i_110289579_reload;
input  [0:0] conv4_i_110579582_reload;
input  [0:0] conv4_i_616079585_reload;
input  [0:0] conv4_i_722739588_reload;
input  [0:0] conv4_i_723029591_reload;
input  [0:0] conv4_i_723319594_reload;
input  [0:0] conv4_i_1029399597_reload;
input  [0:0] conv4_i_1029689600_reload;
input  [0:0] conv4_i_1029979603_reload;
input  [0:0] conv4_i_1336059606_reload;
input  [0:0] conv4_i_1442719609_reload;
input  [0:0] conv4_i_1443009612_reload;
input  [0:0] conv4_i_1443299615_reload;
input  [0:0] conv4_i_1749379618_reload;
input  [0:0] conv4_i_1856039621_reload;
input  [0:0] conv4_i_1962699624_reload;
input  [0:0] conv4_i_2069359627_reload;
input  [0:0] conv4_i_2176019630_reload;
input  [0:0] conv4_i_2176309633_reload;
input  [0:0] conv4_i_2382679636_reload;
input  [0:0] mux_case_249389639_reload;
input  [0:0] mux_case_2516009642_reload;
input  [0:0] mux_case_2616019645_reload;
input  [0:0] mux_case_2716029648_reload;
input  [0:0] mux_case_2816039651_reload;
input  [0:0] mux_case_2916049654_reload;
input  [0:0] mux_case_3022709657_reload;
input  [0:0] mux_case_3129349660_reload;
input  [0:0] mux_case_3229359663_reload;
input  [0:0] mux_case_3329369666_reload;
input  [0:0] mux_case_3436009669_reload;
input  [0:0] mux_case_3536019672_reload;
input  [0:0] mux_case_3636029675_reload;
input  [0:0] mux_case_3742689678_reload;
input  [0:0] mux_case_3849329681_reload;
input  [0:0] mux_case_3949339684_reload;
input  [0:0] mux_case_4049349687_reload;
input  [0:0] mux_case_4156009690_reload;
input  [0:0] mux_case_4262669693_reload;
input  [0:0] mux_case_4369329696_reload;
input  [0:0] mux_case_4475989699_reload;
input  [0:0] mux_case_4582639702_reload;
input  [0:0] mux_case_4682649705_reload;
input  [0:0] mux_case_4753689309708_reload;
output  [5:0] startIdx_out;
output   startIdx_out_ap_vld;
output  [0:0] icmp_ln61_out;
output   icmp_ln61_out_ap_vld;
output  [0:0] ap_return;

reg ap_idle;
reg[5:0] startIdx_out;
reg startIdx_out_ap_vld;
reg[0:0] icmp_ln61_out;
reg icmp_ln61_out_ap_vld;
reg[0:0] ap_return;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] tmp_1_fu_479_p50;
wire   [0:0] icmp_ln61_fu_467_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [0:0] ap_phi_mux_UnifiedRetVal_phi_fu_450_p4;
reg   [5:0] startIdx_fu_138;
wire   [5:0] add_ln63_fu_473_p2;
wire    ap_loop_init;
reg   [5:0] ap_sig_allocacmp_startIdx_1;
reg   [0:0] ap_return_preg;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_return_preg = 1'd0;
#0 ap_done_reg = 1'b0;
end

crc24a_mux_486_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 1 ),
    .din5_WIDTH( 1 ),
    .din6_WIDTH( 1 ),
    .din7_WIDTH( 1 ),
    .din8_WIDTH( 1 ),
    .din9_WIDTH( 1 ),
    .din10_WIDTH( 1 ),
    .din11_WIDTH( 1 ),
    .din12_WIDTH( 1 ),
    .din13_WIDTH( 1 ),
    .din14_WIDTH( 1 ),
    .din15_WIDTH( 1 ),
    .din16_WIDTH( 1 ),
    .din17_WIDTH( 1 ),
    .din18_WIDTH( 1 ),
    .din19_WIDTH( 1 ),
    .din20_WIDTH( 1 ),
    .din21_WIDTH( 1 ),
    .din22_WIDTH( 1 ),
    .din23_WIDTH( 1 ),
    .din24_WIDTH( 1 ),
    .din25_WIDTH( 1 ),
    .din26_WIDTH( 1 ),
    .din27_WIDTH( 1 ),
    .din28_WIDTH( 1 ),
    .din29_WIDTH( 1 ),
    .din30_WIDTH( 1 ),
    .din31_WIDTH( 1 ),
    .din32_WIDTH( 1 ),
    .din33_WIDTH( 1 ),
    .din34_WIDTH( 1 ),
    .din35_WIDTH( 1 ),
    .din36_WIDTH( 1 ),
    .din37_WIDTH( 1 ),
    .din38_WIDTH( 1 ),
    .din39_WIDTH( 1 ),
    .din40_WIDTH( 1 ),
    .din41_WIDTH( 1 ),
    .din42_WIDTH( 1 ),
    .din43_WIDTH( 1 ),
    .din44_WIDTH( 1 ),
    .din45_WIDTH( 1 ),
    .din46_WIDTH( 1 ),
    .din47_WIDTH( 1 ),
    .din48_WIDTH( 6 ),
    .dout_WIDTH( 1 ))
mux_486_1_1_1_U148(
    .din0(mux_case_09567_reload),
    .din1(conv4_i_19419570_reload),
    .din2(conv4_i_19709573_reload),
    .din3(conv4_i_19999576_reload),
    .din4(conv4_i_110289579_reload),
    .din5(conv4_i_110579582_reload),
    .din6(conv4_i_616079585_reload),
    .din7(conv4_i_722739588_reload),
    .din8(conv4_i_723029591_reload),
    .din9(conv4_i_723319594_reload),
    .din10(conv4_i_1029399597_reload),
    .din11(conv4_i_1029689600_reload),
    .din12(conv4_i_1029979603_reload),
    .din13(conv4_i_1336059606_reload),
    .din14(conv4_i_1442719609_reload),
    .din15(conv4_i_1443009612_reload),
    .din16(conv4_i_1443299615_reload),
    .din17(conv4_i_1749379618_reload),
    .din18(conv4_i_1856039621_reload),
    .din19(conv4_i_1962699624_reload),
    .din20(conv4_i_2069359627_reload),
    .din21(conv4_i_2176019630_reload),
    .din22(conv4_i_2176309633_reload),
    .din23(conv4_i_2382679636_reload),
    .din24(mux_case_249389639_reload),
    .din25(mux_case_2516009642_reload),
    .din26(mux_case_2616019645_reload),
    .din27(mux_case_2716029648_reload),
    .din28(mux_case_2816039651_reload),
    .din29(mux_case_2916049654_reload),
    .din30(mux_case_3022709657_reload),
    .din31(mux_case_3129349660_reload),
    .din32(mux_case_3229359663_reload),
    .din33(mux_case_3329369666_reload),
    .din34(mux_case_3436009669_reload),
    .din35(mux_case_3536019672_reload),
    .din36(mux_case_3636029675_reload),
    .din37(mux_case_3742689678_reload),
    .din38(mux_case_3849329681_reload),
    .din39(mux_case_3949339684_reload),
    .din40(mux_case_4049349687_reload),
    .din41(mux_case_4156009690_reload),
    .din42(mux_case_4262669693_reload),
    .din43(mux_case_4369329696_reload),
    .din44(mux_case_4475989699_reload),
    .din45(mux_case_4582639702_reload),
    .din46(mux_case_4682649705_reload),
    .din47(mux_case_4753689309708_reload),
    .din48(ap_sig_allocacmp_startIdx_1),
    .dout(tmp_1_fu_479_p50)
);

crc24a_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 1'd0;
    end else begin
        if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1) & ((icmp_ln61_fu_467_p2 == 1'd1) | (tmp_1_fu_479_p50 == 1'd1)))) begin
            ap_return_preg <= ap_phi_mux_UnifiedRetVal_phi_fu_450_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln61_fu_467_p2 == 1'd0) & (tmp_1_fu_479_p50 == 1'd0))) begin
            startIdx_fu_138 <= add_ln63_fu_473_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            startIdx_fu_138 <= 6'd0;
        end
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1) & ((icmp_ln61_fu_467_p2 == 1'd1) | (tmp_1_fu_479_p50 == 1'd1)))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if (((icmp_ln61_fu_467_p2 == 1'd0) & (tmp_1_fu_479_p50 == 1'd1))) begin
            ap_phi_mux_UnifiedRetVal_phi_fu_450_p4 = 1'd0;
        end else if ((icmp_ln61_fu_467_p2 == 1'd1)) begin
            ap_phi_mux_UnifiedRetVal_phi_fu_450_p4 = 1'd1;
        end else begin
            ap_phi_mux_UnifiedRetVal_phi_fu_450_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_UnifiedRetVal_phi_fu_450_p4 = 'bx;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1) & ((icmp_ln61_fu_467_p2 == 1'd1) | (tmp_1_fu_479_p50 == 1'd1)))) begin
        ap_return = ap_phi_mux_UnifiedRetVal_phi_fu_450_p4;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_startIdx_1 = 6'd0;
    end else begin
        ap_sig_allocacmp_startIdx_1 = startIdx_fu_138;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln61_fu_467_p2 == 1'd1)) begin
            icmp_ln61_out = 1'd1;
        end else if (((icmp_ln61_fu_467_p2 == 1'd0) & (tmp_1_fu_479_p50 == 1'd1))) begin
            icmp_ln61_out = 1'd0;
        end else begin
            icmp_ln61_out = 'bx;
        end
    end else begin
        icmp_ln61_out = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln61_fu_467_p2 == 1'd0) & (tmp_1_fu_479_p50 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln61_fu_467_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        icmp_ln61_out_ap_vld = 1'b1;
    end else begin
        icmp_ln61_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln61_fu_467_p2 == 1'd1)) begin
            startIdx_out = 6'd48;
        end else if (((icmp_ln61_fu_467_p2 == 1'd0) & (tmp_1_fu_479_p50 == 1'd1))) begin
            startIdx_out = ap_sig_allocacmp_startIdx_1;
        end else begin
            startIdx_out = 'bx;
        end
    end else begin
        startIdx_out = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln61_fu_467_p2 == 1'd0) & (tmp_1_fu_479_p50 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln61_fu_467_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        startIdx_out_ap_vld = 1'b1;
    end else begin
        startIdx_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln63_fu_473_p2 = (ap_sig_allocacmp_startIdx_1 + 6'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln61_fu_467_p2 = ((ap_sig_allocacmp_startIdx_1 == 6'd48) ? 1'b1 : 1'b0);

endmodule //crc24a_crc24a_Pipeline_VITIS_LOOP_61_6
