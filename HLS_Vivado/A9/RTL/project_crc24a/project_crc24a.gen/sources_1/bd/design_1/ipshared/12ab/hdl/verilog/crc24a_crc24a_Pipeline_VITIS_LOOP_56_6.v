// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
// Version: 2022.2.2
// Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module crc24a_crc24a_Pipeline_VITIS_LOOP_56_6 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        trunc_ln3,
        icmp_ln46_lcssa,
        crc_0_sroa_0_0_crc_0_sroa_0_0_mux_case_0393,
        crc_1_sroa_0_0_crc_1_sroa_0_0_mux_case_1394,
        crc_2_sroa_0_0_crc_2_sroa_0_0_mux_case_2395,
        crc_3_sroa_0_0_crc_3_sroa_0_0_mux_case_3396,
        crc_4_sroa_0_0_crc_4_sroa_0_0_mux_case_4397,
        crc_5_sroa_0_0_crc_5_sroa_0_0_mux_case_5398,
        crc_6_sroa_0_0_crc_6_sroa_0_0_mux_case_6399,
        crc_7_sroa_0_0_crc_7_sroa_0_0_mux_case_7400,
        crc_8_sroa_0_0_crc_8_sroa_0_0_mux_case_8401,
        crc_9_sroa_0_0_crc_9_sroa_0_0_mux_case_9402,
        crc_10_sroa_0_0_crc_10_sroa_0_0_mux_case_10403,
        crc_11_sroa_0_0_crc_11_sroa_0_0_mux_case_11404,
        crc_12_sroa_0_0_crc_12_sroa_0_0_mux_case_12405,
        crc_13_sroa_0_0_crc_13_sroa_0_0_mux_case_13406,
        crc_14_sroa_0_0_crc_14_sroa_0_0_mux_case_14407,
        crc_15_sroa_0_0_crc_15_sroa_0_0_mux_case_15408,
        crc_16_sroa_0_0_crc_16_sroa_0_0_mux_case_16409,
        crc_17_sroa_0_0_crc_17_sroa_0_0_mux_case_17410,
        crc_18_sroa_0_0_crc_18_sroa_0_0_mux_case_18411,
        crc_19_sroa_0_0_crc_19_sroa_0_0_mux_case_19412,
        crc_20_sroa_0_0_crc_20_sroa_0_0_mux_case_20413,
        crc_21_sroa_0_0_crc_21_sroa_0_0_mux_case_21414,
        crc_22_sroa_0_0_crc_22_sroa_0_0_mux_case_22415,
        crc_23_sroa_0_0_crc_23_sroa_0_0_mux_case_23416,
        crc_24_sroa_0_0_crc_24_sroa_0_0_mux_case_24417,
        crc_25_sroa_0_0_crc_25_sroa_0_0_mux_case_25418,
        crc_26_sroa_0_0_crc_26_sroa_0_0_mux_case_26419,
        crc_27_sroa_0_0_crc_27_sroa_0_0_mux_case_27420,
        crc_28_sroa_0_0_crc_28_sroa_0_0_mux_case_28421,
        crc_29_sroa_0_0_crc_29_sroa_0_0_mux_case_29422,
        crc_30_sroa_0_0_crc_30_sroa_0_0_mux_case_30423,
        crc_31_sroa_0_0_crc_31_sroa_0_0_mux_case_31,
        f_V_23_out,
        f_V_23_out_ap_vld,
        f_V_22_out,
        f_V_22_out_ap_vld,
        f_V_21_out,
        f_V_21_out_ap_vld,
        f_V_20_out,
        f_V_20_out_ap_vld,
        f_V_19_out,
        f_V_19_out_ap_vld,
        f_V_18_out,
        f_V_18_out_ap_vld,
        f_V_17_out,
        f_V_17_out_ap_vld,
        f_V_16_out,
        f_V_16_out_ap_vld,
        f_V_15_out,
        f_V_15_out_ap_vld,
        f_V_14_out,
        f_V_14_out_ap_vld,
        f_V_13_out,
        f_V_13_out_ap_vld,
        f_V_12_out,
        f_V_12_out_ap_vld,
        f_V_11_out,
        f_V_11_out_ap_vld,
        f_V_10_out,
        f_V_10_out_ap_vld,
        f_V_9_out,
        f_V_9_out_ap_vld,
        f_V_8_out,
        f_V_8_out_ap_vld,
        f_V_7_out,
        f_V_7_out_ap_vld,
        f_V_6_out,
        f_V_6_out_ap_vld,
        f_V_5_out,
        f_V_5_out_ap_vld,
        f_V_4_out,
        f_V_4_out_ap_vld,
        f_V_3_out,
        f_V_3_out_ap_vld,
        f_V_2_out,
        f_V_2_out_ap_vld,
        f_V_1_out,
        f_V_1_out_ap_vld,
        f_V_out,
        f_V_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [4:0] trunc_ln3;
input  [0:0] icmp_ln46_lcssa;
input  [0:0] crc_0_sroa_0_0_crc_0_sroa_0_0_mux_case_0393;
input  [0:0] crc_1_sroa_0_0_crc_1_sroa_0_0_mux_case_1394;
input  [0:0] crc_2_sroa_0_0_crc_2_sroa_0_0_mux_case_2395;
input  [0:0] crc_3_sroa_0_0_crc_3_sroa_0_0_mux_case_3396;
input  [0:0] crc_4_sroa_0_0_crc_4_sroa_0_0_mux_case_4397;
input  [0:0] crc_5_sroa_0_0_crc_5_sroa_0_0_mux_case_5398;
input  [0:0] crc_6_sroa_0_0_crc_6_sroa_0_0_mux_case_6399;
input  [0:0] crc_7_sroa_0_0_crc_7_sroa_0_0_mux_case_7400;
input  [0:0] crc_8_sroa_0_0_crc_8_sroa_0_0_mux_case_8401;
input  [0:0] crc_9_sroa_0_0_crc_9_sroa_0_0_mux_case_9402;
input  [0:0] crc_10_sroa_0_0_crc_10_sroa_0_0_mux_case_10403;
input  [0:0] crc_11_sroa_0_0_crc_11_sroa_0_0_mux_case_11404;
input  [0:0] crc_12_sroa_0_0_crc_12_sroa_0_0_mux_case_12405;
input  [0:0] crc_13_sroa_0_0_crc_13_sroa_0_0_mux_case_13406;
input  [0:0] crc_14_sroa_0_0_crc_14_sroa_0_0_mux_case_14407;
input  [0:0] crc_15_sroa_0_0_crc_15_sroa_0_0_mux_case_15408;
input  [0:0] crc_16_sroa_0_0_crc_16_sroa_0_0_mux_case_16409;
input  [0:0] crc_17_sroa_0_0_crc_17_sroa_0_0_mux_case_17410;
input  [0:0] crc_18_sroa_0_0_crc_18_sroa_0_0_mux_case_18411;
input  [0:0] crc_19_sroa_0_0_crc_19_sroa_0_0_mux_case_19412;
input  [0:0] crc_20_sroa_0_0_crc_20_sroa_0_0_mux_case_20413;
input  [0:0] crc_21_sroa_0_0_crc_21_sroa_0_0_mux_case_21414;
input  [0:0] crc_22_sroa_0_0_crc_22_sroa_0_0_mux_case_22415;
input  [0:0] crc_23_sroa_0_0_crc_23_sroa_0_0_mux_case_23416;
input  [0:0] crc_24_sroa_0_0_crc_24_sroa_0_0_mux_case_24417;
input  [0:0] crc_25_sroa_0_0_crc_25_sroa_0_0_mux_case_25418;
input  [0:0] crc_26_sroa_0_0_crc_26_sroa_0_0_mux_case_26419;
input  [0:0] crc_27_sroa_0_0_crc_27_sroa_0_0_mux_case_27420;
input  [0:0] crc_28_sroa_0_0_crc_28_sroa_0_0_mux_case_28421;
input  [0:0] crc_29_sroa_0_0_crc_29_sroa_0_0_mux_case_29422;
input  [0:0] crc_30_sroa_0_0_crc_30_sroa_0_0_mux_case_30423;
input  [0:0] crc_31_sroa_0_0_crc_31_sroa_0_0_mux_case_31;
output  [0:0] f_V_23_out;
output   f_V_23_out_ap_vld;
output  [0:0] f_V_22_out;
output   f_V_22_out_ap_vld;
output  [0:0] f_V_21_out;
output   f_V_21_out_ap_vld;
output  [0:0] f_V_20_out;
output   f_V_20_out_ap_vld;
output  [0:0] f_V_19_out;
output   f_V_19_out_ap_vld;
output  [0:0] f_V_18_out;
output   f_V_18_out_ap_vld;
output  [0:0] f_V_17_out;
output   f_V_17_out_ap_vld;
output  [0:0] f_V_16_out;
output   f_V_16_out_ap_vld;
output  [0:0] f_V_15_out;
output   f_V_15_out_ap_vld;
output  [0:0] f_V_14_out;
output   f_V_14_out_ap_vld;
output  [0:0] f_V_13_out;
output   f_V_13_out_ap_vld;
output  [0:0] f_V_12_out;
output   f_V_12_out_ap_vld;
output  [0:0] f_V_11_out;
output   f_V_11_out_ap_vld;
output  [0:0] f_V_10_out;
output   f_V_10_out_ap_vld;
output  [0:0] f_V_9_out;
output   f_V_9_out_ap_vld;
output  [0:0] f_V_8_out;
output   f_V_8_out_ap_vld;
output  [0:0] f_V_7_out;
output   f_V_7_out_ap_vld;
output  [0:0] f_V_6_out;
output   f_V_6_out_ap_vld;
output  [0:0] f_V_5_out;
output   f_V_5_out_ap_vld;
output  [0:0] f_V_4_out;
output   f_V_4_out_ap_vld;
output  [0:0] f_V_3_out;
output   f_V_3_out_ap_vld;
output  [0:0] f_V_2_out;
output   f_V_2_out_ap_vld;
output  [0:0] f_V_1_out;
output   f_V_1_out_ap_vld;
output  [0:0] f_V_out;
output   f_V_out_ap_vld;

reg ap_idle;
reg f_V_23_out_ap_vld;
reg f_V_22_out_ap_vld;
reg f_V_21_out_ap_vld;
reg f_V_20_out_ap_vld;
reg f_V_19_out_ap_vld;
reg f_V_18_out_ap_vld;
reg f_V_17_out_ap_vld;
reg f_V_16_out_ap_vld;
reg f_V_15_out_ap_vld;
reg f_V_14_out_ap_vld;
reg f_V_13_out_ap_vld;
reg f_V_12_out_ap_vld;
reg f_V_11_out_ap_vld;
reg f_V_10_out_ap_vld;
reg f_V_9_out_ap_vld;
reg f_V_8_out_ap_vld;
reg f_V_7_out_ap_vld;
reg f_V_6_out_ap_vld;
reg f_V_5_out_ap_vld;
reg f_V_4_out_ap_vld;
reg f_V_3_out_ap_vld;
reg f_V_2_out_ap_vld;
reg f_V_1_out_ap_vld;
reg f_V_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln56_fu_668_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [4:0] i_fu_188;
wire   [4:0] add_ln56_fu_674_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_i_2;
wire   [4:0] i_2_load_fu_665_p1;
reg   [0:0] f_V_fu_192;
wire   [0:0] f_V_24_fu_694_p34;
reg   [0:0] f_V_1_fu_196;
reg   [0:0] f_V_2_fu_200;
reg   [0:0] f_V_3_fu_204;
reg   [0:0] f_V_4_fu_208;
reg   [0:0] f_V_5_fu_212;
reg   [0:0] f_V_6_fu_216;
reg   [0:0] f_V_7_fu_220;
reg   [0:0] f_V_8_fu_224;
reg   [0:0] f_V_9_fu_228;
reg   [0:0] f_V_10_fu_232;
reg   [0:0] f_V_11_fu_236;
reg   [0:0] f_V_12_fu_240;
reg   [0:0] f_V_13_fu_244;
reg   [0:0] f_V_14_fu_248;
reg   [0:0] f_V_15_fu_252;
reg   [0:0] f_V_16_fu_256;
reg   [0:0] f_V_17_fu_260;
reg   [0:0] f_V_18_fu_264;
reg   [0:0] f_V_19_fu_268;
reg   [0:0] f_V_20_fu_272;
reg   [0:0] f_V_21_fu_276;
reg   [0:0] f_V_22_fu_280;
reg   [0:0] f_V_23_fu_284;
wire   [4:0] add_ln58_fu_680_p2;
wire   [4:0] f_V_24_fu_694_p33;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

crc24a_mux_325_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 1 ),
    .din5_WIDTH( 1 ),
    .din6_WIDTH( 1 ),
    .din7_WIDTH( 1 ),
    .din8_WIDTH( 1 ),
    .din9_WIDTH( 1 ),
    .din10_WIDTH( 1 ),
    .din11_WIDTH( 1 ),
    .din12_WIDTH( 1 ),
    .din13_WIDTH( 1 ),
    .din14_WIDTH( 1 ),
    .din15_WIDTH( 1 ),
    .din16_WIDTH( 1 ),
    .din17_WIDTH( 1 ),
    .din18_WIDTH( 1 ),
    .din19_WIDTH( 1 ),
    .din20_WIDTH( 1 ),
    .din21_WIDTH( 1 ),
    .din22_WIDTH( 1 ),
    .din23_WIDTH( 1 ),
    .din24_WIDTH( 1 ),
    .din25_WIDTH( 1 ),
    .din26_WIDTH( 1 ),
    .din27_WIDTH( 1 ),
    .din28_WIDTH( 1 ),
    .din29_WIDTH( 1 ),
    .din30_WIDTH( 1 ),
    .din31_WIDTH( 1 ),
    .din32_WIDTH( 5 ),
    .dout_WIDTH( 1 ))
mux_325_1_1_1_U136(
    .din0(crc_0_sroa_0_0_crc_0_sroa_0_0_mux_case_0393),
    .din1(crc_1_sroa_0_0_crc_1_sroa_0_0_mux_case_1394),
    .din2(crc_2_sroa_0_0_crc_2_sroa_0_0_mux_case_2395),
    .din3(crc_3_sroa_0_0_crc_3_sroa_0_0_mux_case_3396),
    .din4(crc_4_sroa_0_0_crc_4_sroa_0_0_mux_case_4397),
    .din5(crc_5_sroa_0_0_crc_5_sroa_0_0_mux_case_5398),
    .din6(crc_6_sroa_0_0_crc_6_sroa_0_0_mux_case_6399),
    .din7(crc_7_sroa_0_0_crc_7_sroa_0_0_mux_case_7400),
    .din8(crc_8_sroa_0_0_crc_8_sroa_0_0_mux_case_8401),
    .din9(crc_9_sroa_0_0_crc_9_sroa_0_0_mux_case_9402),
    .din10(crc_10_sroa_0_0_crc_10_sroa_0_0_mux_case_10403),
    .din11(crc_11_sroa_0_0_crc_11_sroa_0_0_mux_case_11404),
    .din12(crc_12_sroa_0_0_crc_12_sroa_0_0_mux_case_12405),
    .din13(crc_13_sroa_0_0_crc_13_sroa_0_0_mux_case_13406),
    .din14(crc_14_sroa_0_0_crc_14_sroa_0_0_mux_case_14407),
    .din15(crc_15_sroa_0_0_crc_15_sroa_0_0_mux_case_15408),
    .din16(crc_16_sroa_0_0_crc_16_sroa_0_0_mux_case_16409),
    .din17(crc_17_sroa_0_0_crc_17_sroa_0_0_mux_case_17410),
    .din18(crc_18_sroa_0_0_crc_18_sroa_0_0_mux_case_18411),
    .din19(crc_19_sroa_0_0_crc_19_sroa_0_0_mux_case_19412),
    .din20(crc_20_sroa_0_0_crc_20_sroa_0_0_mux_case_20413),
    .din21(crc_21_sroa_0_0_crc_21_sroa_0_0_mux_case_21414),
    .din22(crc_22_sroa_0_0_crc_22_sroa_0_0_mux_case_22415),
    .din23(crc_23_sroa_0_0_crc_23_sroa_0_0_mux_case_23416),
    .din24(crc_24_sroa_0_0_crc_24_sroa_0_0_mux_case_24417),
    .din25(crc_25_sroa_0_0_crc_25_sroa_0_0_mux_case_25418),
    .din26(crc_26_sroa_0_0_crc_26_sroa_0_0_mux_case_26419),
    .din27(crc_27_sroa_0_0_crc_27_sroa_0_0_mux_case_27420),
    .din28(crc_28_sroa_0_0_crc_28_sroa_0_0_mux_case_28421),
    .din29(crc_29_sroa_0_0_crc_29_sroa_0_0_mux_case_29422),
    .din30(crc_30_sroa_0_0_crc_30_sroa_0_0_mux_case_30423),
    .din31(crc_31_sroa_0_0_crc_31_sroa_0_0_mux_case_31),
    .din32(f_V_24_fu_694_p33),
    .dout(f_V_24_fu_694_p34)
);

crc24a_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_start_int == 1'b1) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln56_fu_668_p2 == 1'd0)) begin
            i_fu_188 <= add_ln56_fu_674_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_188 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (icmp_ln56_fu_668_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (i_2_load_fu_665_p1 == 5'd10))) begin
        f_V_10_fu_232 <= f_V_24_fu_694_p34;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (icmp_ln56_fu_668_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (i_2_load_fu_665_p1 == 5'd11))) begin
        f_V_11_fu_236 <= f_V_24_fu_694_p34;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (icmp_ln56_fu_668_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (i_2_load_fu_665_p1 == 5'd12))) begin
        f_V_12_fu_240 <= f_V_24_fu_694_p34;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (icmp_ln56_fu_668_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (i_2_load_fu_665_p1 == 5'd13))) begin
        f_V_13_fu_244 <= f_V_24_fu_694_p34;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (icmp_ln56_fu_668_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (i_2_load_fu_665_p1 == 5'd14))) begin
        f_V_14_fu_248 <= f_V_24_fu_694_p34;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (icmp_ln56_fu_668_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (i_2_load_fu_665_p1 == 5'd15))) begin
        f_V_15_fu_252 <= f_V_24_fu_694_p34;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (icmp_ln56_fu_668_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (i_2_load_fu_665_p1 == 5'd16))) begin
        f_V_16_fu_256 <= f_V_24_fu_694_p34;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (icmp_ln56_fu_668_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (i_2_load_fu_665_p1 == 5'd17))) begin
        f_V_17_fu_260 <= f_V_24_fu_694_p34;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (icmp_ln56_fu_668_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (i_2_load_fu_665_p1 == 5'd18))) begin
        f_V_18_fu_264 <= f_V_24_fu_694_p34;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (icmp_ln56_fu_668_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (i_2_load_fu_665_p1 == 5'd19))) begin
        f_V_19_fu_268 <= f_V_24_fu_694_p34;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (icmp_ln56_fu_668_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (i_2_load_fu_665_p1 == 5'd1))) begin
        f_V_1_fu_196 <= f_V_24_fu_694_p34;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (icmp_ln56_fu_668_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (i_2_load_fu_665_p1 == 5'd20))) begin
        f_V_20_fu_272 <= f_V_24_fu_694_p34;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (icmp_ln56_fu_668_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (i_2_load_fu_665_p1 == 5'd21))) begin
        f_V_21_fu_276 <= f_V_24_fu_694_p34;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (icmp_ln56_fu_668_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (i_2_load_fu_665_p1 == 5'd22))) begin
        f_V_22_fu_280 <= f_V_24_fu_694_p34;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1) & ((((((((((icmp_ln56_fu_668_p2 == 1'd0) & (i_2_load_fu_665_p1 == 5'd30)) | ((icmp_ln56_fu_668_p2 == 1'd0) & (i_2_load_fu_665_p1 == 5'd31))) | ((icmp_ln56_fu_668_p2 == 1'd0) & (i_2_load_fu_665_p1 == 5'd29))) | ((icmp_ln56_fu_668_p2 == 1'd0) & (i_2_load_fu_665_p1 == 5'd28))) | ((icmp_ln56_fu_668_p2 == 1'd0) & (i_2_load_fu_665_p1 == 5'd27))) | ((icmp_ln56_fu_668_p2 == 1'd0) & (i_2_load_fu_665_p1 == 5'd26))) | ((icmp_ln56_fu_668_p2 == 1'd0) & (i_2_load_fu_665_p1 == 5'd25))) | ((icmp_ln56_fu_668_p2 == 1'd0) & (i_2_load_fu_665_p1 == 5'd24))) | ((icmp_ln56_fu_668_p2 == 1'd0) & (i_2_load_fu_665_p1 == 5'd23))))) begin
        f_V_23_fu_284 <= f_V_24_fu_694_p34;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (icmp_ln56_fu_668_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (i_2_load_fu_665_p1 == 5'd2))) begin
        f_V_2_fu_200 <= f_V_24_fu_694_p34;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (icmp_ln56_fu_668_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (i_2_load_fu_665_p1 == 5'd3))) begin
        f_V_3_fu_204 <= f_V_24_fu_694_p34;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (icmp_ln56_fu_668_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (i_2_load_fu_665_p1 == 5'd4))) begin
        f_V_4_fu_208 <= f_V_24_fu_694_p34;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (icmp_ln56_fu_668_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (i_2_load_fu_665_p1 == 5'd5))) begin
        f_V_5_fu_212 <= f_V_24_fu_694_p34;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (icmp_ln56_fu_668_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (i_2_load_fu_665_p1 == 5'd6))) begin
        f_V_6_fu_216 <= f_V_24_fu_694_p34;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (icmp_ln56_fu_668_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (i_2_load_fu_665_p1 == 5'd7))) begin
        f_V_7_fu_220 <= f_V_24_fu_694_p34;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (icmp_ln56_fu_668_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (i_2_load_fu_665_p1 == 5'd8))) begin
        f_V_8_fu_224 <= f_V_24_fu_694_p34;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (icmp_ln56_fu_668_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (i_2_load_fu_665_p1 == 5'd9))) begin
        f_V_9_fu_228 <= f_V_24_fu_694_p34;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (icmp_ln56_fu_668_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (i_2_load_fu_665_p1 == 5'd0))) begin
        f_V_fu_192 <= f_V_24_fu_694_p34;
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln56_fu_668_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_2 = 5'd0;
    end else begin
        ap_sig_allocacmp_i_2 = i_fu_188;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln56_fu_668_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_V_10_out_ap_vld = 1'b1;
    end else begin
        f_V_10_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln56_fu_668_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_V_11_out_ap_vld = 1'b1;
    end else begin
        f_V_11_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln56_fu_668_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_V_12_out_ap_vld = 1'b1;
    end else begin
        f_V_12_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln56_fu_668_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_V_13_out_ap_vld = 1'b1;
    end else begin
        f_V_13_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln56_fu_668_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_V_14_out_ap_vld = 1'b1;
    end else begin
        f_V_14_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln56_fu_668_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_V_15_out_ap_vld = 1'b1;
    end else begin
        f_V_15_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln56_fu_668_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_V_16_out_ap_vld = 1'b1;
    end else begin
        f_V_16_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln56_fu_668_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_V_17_out_ap_vld = 1'b1;
    end else begin
        f_V_17_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln56_fu_668_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_V_18_out_ap_vld = 1'b1;
    end else begin
        f_V_18_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln56_fu_668_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_V_19_out_ap_vld = 1'b1;
    end else begin
        f_V_19_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln56_fu_668_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_V_1_out_ap_vld = 1'b1;
    end else begin
        f_V_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln56_fu_668_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_V_20_out_ap_vld = 1'b1;
    end else begin
        f_V_20_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln56_fu_668_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_V_21_out_ap_vld = 1'b1;
    end else begin
        f_V_21_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln56_fu_668_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_V_22_out_ap_vld = 1'b1;
    end else begin
        f_V_22_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln56_fu_668_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_V_23_out_ap_vld = 1'b1;
    end else begin
        f_V_23_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln56_fu_668_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_V_2_out_ap_vld = 1'b1;
    end else begin
        f_V_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln56_fu_668_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_V_3_out_ap_vld = 1'b1;
    end else begin
        f_V_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln56_fu_668_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_V_4_out_ap_vld = 1'b1;
    end else begin
        f_V_4_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln56_fu_668_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_V_5_out_ap_vld = 1'b1;
    end else begin
        f_V_5_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln56_fu_668_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_V_6_out_ap_vld = 1'b1;
    end else begin
        f_V_6_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln56_fu_668_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_V_7_out_ap_vld = 1'b1;
    end else begin
        f_V_7_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln56_fu_668_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_V_8_out_ap_vld = 1'b1;
    end else begin
        f_V_8_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln56_fu_668_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_V_9_out_ap_vld = 1'b1;
    end else begin
        f_V_9_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln56_fu_668_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_V_out_ap_vld = 1'b1;
    end else begin
        f_V_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln56_fu_674_p2 = (ap_sig_allocacmp_i_2 + 5'd1);

assign add_ln58_fu_680_p2 = (ap_sig_allocacmp_i_2 + trunc_ln3);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign f_V_10_out = f_V_10_fu_232;

assign f_V_11_out = f_V_11_fu_236;

assign f_V_12_out = f_V_12_fu_240;

assign f_V_13_out = f_V_13_fu_244;

assign f_V_14_out = f_V_14_fu_248;

assign f_V_15_out = f_V_15_fu_252;

assign f_V_16_out = f_V_16_fu_256;

assign f_V_17_out = f_V_17_fu_260;

assign f_V_18_out = f_V_18_fu_264;

assign f_V_19_out = f_V_19_fu_268;

assign f_V_1_out = f_V_1_fu_196;

assign f_V_20_out = f_V_20_fu_272;

assign f_V_21_out = f_V_21_fu_276;

assign f_V_22_out = f_V_22_fu_280;

assign f_V_23_out = f_V_23_fu_284;

assign f_V_24_fu_694_p33 = ((icmp_ln46_lcssa[0:0] == 1'b1) ? ap_sig_allocacmp_i_2 : add_ln58_fu_680_p2);

assign f_V_2_out = f_V_2_fu_200;

assign f_V_3_out = f_V_3_fu_204;

assign f_V_4_out = f_V_4_fu_208;

assign f_V_5_out = f_V_5_fu_212;

assign f_V_6_out = f_V_6_fu_216;

assign f_V_7_out = f_V_7_fu_220;

assign f_V_8_out = f_V_8_fu_224;

assign f_V_9_out = f_V_9_fu_228;

assign f_V_out = f_V_fu_192;

assign i_2_load_fu_665_p1 = ap_sig_allocacmp_i_2;

assign icmp_ln56_fu_668_p2 = ((ap_sig_allocacmp_i_2 == 5'd24) ? 1'b1 : 1'b0);

endmodule //crc24a_crc24a_Pipeline_VITIS_LOOP_56_6
