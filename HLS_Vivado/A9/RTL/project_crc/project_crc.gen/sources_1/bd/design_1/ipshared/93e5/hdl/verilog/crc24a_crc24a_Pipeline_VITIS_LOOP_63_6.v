// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module crc24a_crc24a_Pipeline_VITIS_LOOP_63_6 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        c_TREADY,
        trunc_ln4,
        icmp_ln55_lcssa,
        mux_case_01623_reload,
        conv3_i_13851626_reload,
        conv3_i_13991629_reload,
        conv3_i_14131632_reload,
        conv3_i_14271635_reload,
        conv3_i_14411638_reload,
        conv3_i_64821641_reload,
        lhs_V_1_reload,
        mux_case_83811647_reload,
        mux_case_94741650_reload,
        mux_case_104751653_reload,
        mux_case_114761656_reload,
        lhs_V_2_reload,
        lhs_V_3_reload,
        mux_case_145751665_reload,
        mux_case_156701668_reload,
        lhs_V_4_reload,
        mux_case_176721674_reload,
        mux_case_187671677_reload,
        lhs_V_5_reload,
        lhs_V_6_reload,
        mux_case_218661686_reload,
        mux_case_229611689_reload,
        lhs_V_7_reload,
        lhs_V_8_reload,
        lhs_V_9_reload,
        lhs_V_10_reload,
        lhs_V_11_reload,
        mux_case_2813511707_reload,
        lhs_V_12_reload,
        lhs_V_13_reload,
        mux_case_3132715451716_reload,
        c_TDATA,
        c_TVALID
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   c_TREADY;
input  [4:0] trunc_ln4;
input  [0:0] icmp_ln55_lcssa;
input  [0:0] mux_case_01623_reload;
input  [0:0] conv3_i_13851626_reload;
input  [0:0] conv3_i_13991629_reload;
input  [0:0] conv3_i_14131632_reload;
input  [0:0] conv3_i_14271635_reload;
input  [0:0] conv3_i_14411638_reload;
input  [0:0] conv3_i_64821641_reload;
input  [0:0] lhs_V_1_reload;
input  [0:0] mux_case_83811647_reload;
input  [0:0] mux_case_94741650_reload;
input  [0:0] mux_case_104751653_reload;
input  [0:0] mux_case_114761656_reload;
input  [0:0] lhs_V_2_reload;
input  [0:0] lhs_V_3_reload;
input  [0:0] mux_case_145751665_reload;
input  [0:0] mux_case_156701668_reload;
input  [0:0] lhs_V_4_reload;
input  [0:0] mux_case_176721674_reload;
input  [0:0] mux_case_187671677_reload;
input  [0:0] lhs_V_5_reload;
input  [0:0] lhs_V_6_reload;
input  [0:0] mux_case_218661686_reload;
input  [0:0] mux_case_229611689_reload;
input  [0:0] lhs_V_7_reload;
input  [0:0] lhs_V_8_reload;
input  [0:0] lhs_V_9_reload;
input  [0:0] lhs_V_10_reload;
input  [0:0] lhs_V_11_reload;
input  [0:0] mux_case_2813511707_reload;
input  [0:0] lhs_V_12_reload;
input  [0:0] lhs_V_13_reload;
input  [0:0] mux_case_3132715451716_reload;
output  [63:0] c_TDATA;
output   c_TVALID;

reg ap_idle;
reg c_TVALID;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln66_reg_808;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state2_io;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln63_fu_383_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    c_TDATA_blk_n;
wire    ap_block_pp0_stage0;
wire   [0:0] e_bits_V_8_fu_409_p34;
reg   [0:0] e_bits_V_8_reg_785;
reg    ap_block_pp0_stage0_11001;
wire   [2:0] trunc_ln65_fu_479_p1;
reg   [2:0] trunc_ln65_reg_797;
wire   [0:0] icmp_ln66_fu_483_p2;
reg   [0:0] e_bits_V_fu_128;
wire   [0:0] e_bits_V_16_fu_638_p3;
reg   [0:0] e_bits_V_1_fu_132;
wire   [0:0] e_bits_V_15_fu_631_p3;
reg   [0:0] e_bits_V_2_fu_136;
wire   [0:0] e_bits_V_14_fu_624_p3;
reg   [0:0] e_bits_V_3_fu_140;
wire   [0:0] e_bits_V_13_fu_617_p3;
reg   [0:0] e_bits_V_4_fu_144;
wire   [0:0] e_bits_V_12_fu_610_p3;
reg   [0:0] e_bits_V_5_fu_148;
wire   [0:0] e_bits_V_11_fu_603_p3;
reg   [0:0] e_bits_V_6_fu_152;
wire   [0:0] e_bits_V_10_fu_596_p3;
reg   [0:0] e_bits_V_7_fu_156;
wire   [0:0] e_bits_V_9_fu_589_p3;
reg   [4:0] i_fu_160;
wire   [4:0] add_ln66_fu_389_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_i_1;
reg    ap_block_pp0_stage0_01001;
wire   [4:0] add_ln65_fu_395_p2;
wire   [4:0] e_bits_V_8_fu_409_p33;
wire   [0:0] icmp_ln65_2_fu_528_p2;
wire   [0:0] icmp_ln65_1_fu_523_p2;
wire   [0:0] icmp_ln65_4_fu_538_p2;
wire   [0:0] icmp_ln65_3_fu_533_p2;
wire   [0:0] or_ln65_2_fu_559_p2;
wire   [0:0] icmp_ln65_5_fu_543_p2;
wire   [0:0] or_ln65_fu_553_p2;
wire   [0:0] icmp_ln65_fu_518_p2;
wire   [0:0] or_ln65_1_fu_571_p2;
wire   [0:0] icmp_ln65_6_fu_548_p2;
wire   [0:0] or_ln65_4_fu_577_p2;
wire   [0:0] or_ln65_3_fu_565_p2;
wire   [0:0] or_ln65_5_fu_583_p2;
wire   [56:0] tmp_s_fu_685_p16;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

crc24a_mux_325_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 1 ),
    .din5_WIDTH( 1 ),
    .din6_WIDTH( 1 ),
    .din7_WIDTH( 1 ),
    .din8_WIDTH( 1 ),
    .din9_WIDTH( 1 ),
    .din10_WIDTH( 1 ),
    .din11_WIDTH( 1 ),
    .din12_WIDTH( 1 ),
    .din13_WIDTH( 1 ),
    .din14_WIDTH( 1 ),
    .din15_WIDTH( 1 ),
    .din16_WIDTH( 1 ),
    .din17_WIDTH( 1 ),
    .din18_WIDTH( 1 ),
    .din19_WIDTH( 1 ),
    .din20_WIDTH( 1 ),
    .din21_WIDTH( 1 ),
    .din22_WIDTH( 1 ),
    .din23_WIDTH( 1 ),
    .din24_WIDTH( 1 ),
    .din25_WIDTH( 1 ),
    .din26_WIDTH( 1 ),
    .din27_WIDTH( 1 ),
    .din28_WIDTH( 1 ),
    .din29_WIDTH( 1 ),
    .din30_WIDTH( 1 ),
    .din31_WIDTH( 1 ),
    .din32_WIDTH( 5 ),
    .dout_WIDTH( 1 ))
mux_325_1_1_1_U136(
    .din0(mux_case_01623_reload),
    .din1(conv3_i_13851626_reload),
    .din2(conv3_i_13991629_reload),
    .din3(conv3_i_14131632_reload),
    .din4(conv3_i_14271635_reload),
    .din5(conv3_i_14411638_reload),
    .din6(conv3_i_64821641_reload),
    .din7(lhs_V_1_reload),
    .din8(mux_case_83811647_reload),
    .din9(mux_case_94741650_reload),
    .din10(mux_case_104751653_reload),
    .din11(mux_case_114761656_reload),
    .din12(lhs_V_2_reload),
    .din13(lhs_V_3_reload),
    .din14(mux_case_145751665_reload),
    .din15(mux_case_156701668_reload),
    .din16(lhs_V_4_reload),
    .din17(mux_case_176721674_reload),
    .din18(mux_case_187671677_reload),
    .din19(lhs_V_5_reload),
    .din20(lhs_V_6_reload),
    .din21(mux_case_218661686_reload),
    .din22(mux_case_229611689_reload),
    .din23(lhs_V_7_reload),
    .din24(lhs_V_8_reload),
    .din25(lhs_V_9_reload),
    .din26(lhs_V_10_reload),
    .din27(lhs_V_11_reload),
    .din28(mux_case_2813511707_reload),
    .din29(lhs_V_12_reload),
    .din30(lhs_V_13_reload),
    .din31(mux_case_3132715451716_reload),
    .din32(e_bits_V_8_fu_409_p33),
    .dout(e_bits_V_8_fu_409_p34)
);

crc24a_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln63_fu_383_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_160 <= add_ln66_fu_389_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_160 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_bits_V_1_fu_132 <= e_bits_V_15_fu_631_p3;
        e_bits_V_2_fu_136 <= e_bits_V_14_fu_624_p3;
        e_bits_V_3_fu_140 <= e_bits_V_13_fu_617_p3;
        e_bits_V_4_fu_144 <= e_bits_V_12_fu_610_p3;
        e_bits_V_5_fu_148 <= e_bits_V_11_fu_603_p3;
        e_bits_V_6_fu_152 <= e_bits_V_10_fu_596_p3;
        e_bits_V_7_fu_156 <= e_bits_V_9_fu_589_p3;
        e_bits_V_fu_128 <= e_bits_V_16_fu_638_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln63_fu_383_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_bits_V_8_reg_785 <= e_bits_V_8_fu_409_p34;
        icmp_ln66_reg_808 <= icmp_ln66_fu_483_p2;
        trunc_ln65_reg_797 <= trunc_ln65_fu_479_p1;
    end
end

always @ (*) begin
    if (((icmp_ln63_fu_383_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_1 = 5'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_160;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln66_reg_808 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_TDATA_blk_n = c_TREADY;
    end else begin
        c_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln66_reg_808 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_TVALID = 1'b1;
    end else begin
        c_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln65_fu_395_p2 = (ap_sig_allocacmp_i_1 + trunc_ln4);

assign add_ln66_fu_389_p2 = (ap_sig_allocacmp_i_1 + 5'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((icmp_ln66_reg_808 == 1'd1) & (c_TREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state2_io) | ((icmp_ln66_reg_808 == 1'd1) & (c_TREADY == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state2_io) | ((icmp_ln66_reg_808 == 1'd1) & (c_TREADY == 1'b0))));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_io = ((icmp_ln66_reg_808 == 1'd1) & (c_TREADY == 1'b0));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((icmp_ln66_reg_808 == 1'd1) & (c_TREADY == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign c_TDATA = tmp_s_fu_685_p16;

assign e_bits_V_10_fu_596_p3 = ((icmp_ln65_6_fu_548_p2[0:0] == 1'b1) ? e_bits_V_8_reg_785 : e_bits_V_6_fu_152);

assign e_bits_V_11_fu_603_p3 = ((icmp_ln65_5_fu_543_p2[0:0] == 1'b1) ? e_bits_V_8_reg_785 : e_bits_V_5_fu_148);

assign e_bits_V_12_fu_610_p3 = ((icmp_ln65_4_fu_538_p2[0:0] == 1'b1) ? e_bits_V_8_reg_785 : e_bits_V_4_fu_144);

assign e_bits_V_13_fu_617_p3 = ((icmp_ln65_3_fu_533_p2[0:0] == 1'b1) ? e_bits_V_8_reg_785 : e_bits_V_3_fu_140);

assign e_bits_V_14_fu_624_p3 = ((icmp_ln65_2_fu_528_p2[0:0] == 1'b1) ? e_bits_V_8_reg_785 : e_bits_V_2_fu_136);

assign e_bits_V_15_fu_631_p3 = ((icmp_ln65_1_fu_523_p2[0:0] == 1'b1) ? e_bits_V_8_reg_785 : e_bits_V_1_fu_132);

assign e_bits_V_16_fu_638_p3 = ((icmp_ln65_fu_518_p2[0:0] == 1'b1) ? e_bits_V_8_reg_785 : e_bits_V_fu_128);

assign e_bits_V_8_fu_409_p33 = ((icmp_ln55_lcssa[0:0] == 1'b1) ? ap_sig_allocacmp_i_1 : add_ln65_fu_395_p2);

assign e_bits_V_9_fu_589_p3 = ((or_ln65_5_fu_583_p2[0:0] == 1'b1) ? e_bits_V_7_fu_156 : e_bits_V_8_reg_785);

assign icmp_ln63_fu_383_p2 = ((ap_sig_allocacmp_i_1 == 5'd24) ? 1'b1 : 1'b0);

assign icmp_ln65_1_fu_523_p2 = ((trunc_ln65_reg_797 == 3'd1) ? 1'b1 : 1'b0);

assign icmp_ln65_2_fu_528_p2 = ((trunc_ln65_reg_797 == 3'd2) ? 1'b1 : 1'b0);

assign icmp_ln65_3_fu_533_p2 = ((trunc_ln65_reg_797 == 3'd3) ? 1'b1 : 1'b0);

assign icmp_ln65_4_fu_538_p2 = ((trunc_ln65_reg_797 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln65_5_fu_543_p2 = ((trunc_ln65_reg_797 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln65_6_fu_548_p2 = ((trunc_ln65_reg_797 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_518_p2 = ((trunc_ln65_reg_797 == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_483_p2 = ((trunc_ln65_fu_479_p1 == 3'd7) ? 1'b1 : 1'b0);

assign or_ln65_1_fu_571_p2 = (or_ln65_fu_553_p2 | icmp_ln65_fu_518_p2);

assign or_ln65_2_fu_559_p2 = (icmp_ln65_4_fu_538_p2 | icmp_ln65_3_fu_533_p2);

assign or_ln65_3_fu_565_p2 = (or_ln65_2_fu_559_p2 | icmp_ln65_5_fu_543_p2);

assign or_ln65_4_fu_577_p2 = (or_ln65_1_fu_571_p2 | icmp_ln65_6_fu_548_p2);

assign or_ln65_5_fu_583_p2 = (or_ln65_4_fu_577_p2 | or_ln65_3_fu_565_p2);

assign or_ln65_fu_553_p2 = (icmp_ln65_2_fu_528_p2 | icmp_ln65_1_fu_523_p2);

assign tmp_s_fu_685_p16 = {{{{{{{{{{{{{{{e_bits_V_9_fu_589_p3}, {7'd0}}, {e_bits_V_10_fu_596_p3}}, {7'd0}}, {e_bits_V_11_fu_603_p3}}, {7'd0}}, {e_bits_V_12_fu_610_p3}}, {7'd0}}, {e_bits_V_13_fu_617_p3}}, {7'd0}}, {e_bits_V_14_fu_624_p3}}, {7'd0}}, {e_bits_V_15_fu_631_p3}}, {7'd0}}, {e_bits_V_16_fu_638_p3}};

assign trunc_ln65_fu_479_p1 = ap_sig_allocacmp_i_1[2:0];

endmodule //crc24a_crc24a_Pipeline_VITIS_LOOP_63_6
