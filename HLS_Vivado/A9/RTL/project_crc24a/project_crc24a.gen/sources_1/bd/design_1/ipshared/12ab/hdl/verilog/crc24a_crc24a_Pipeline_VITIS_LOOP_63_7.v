// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
// Version: 2022.2.2
// Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module crc24a_crc24a_Pipeline_VITIS_LOOP_63_7 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        f_V_reload,
        f_V_1_reload,
        f_V_2_reload,
        f_V_3_reload,
        f_V_4_reload,
        f_V_5_reload,
        f_V_6_reload,
        f_V_7_reload,
        f_V_8_reload,
        f_V_9_reload,
        f_V_10_reload,
        f_V_11_reload,
        f_V_12_reload,
        f_V_13_reload,
        f_V_14_reload,
        f_V_15_reload,
        f_V_16_reload,
        f_V_17_reload,
        f_V_18_reload,
        f_V_19_reload,
        f_V_20_reload,
        f_V_21_reload,
        f_V_22_reload,
        f_V_23_reload,
        d_V,
        o_V_2_out,
        o_V_2_out_ap_vld,
        m_V_2_out,
        m_V_2_out_ap_vld,
        h_V_2_out,
        h_V_2_out_ap_vld,
        g_V_2_out,
        g_V_2_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [0:0] f_V_reload;
input  [0:0] f_V_1_reload;
input  [0:0] f_V_2_reload;
input  [0:0] f_V_3_reload;
input  [0:0] f_V_4_reload;
input  [0:0] f_V_5_reload;
input  [0:0] f_V_6_reload;
input  [0:0] f_V_7_reload;
input  [0:0] f_V_8_reload;
input  [0:0] f_V_9_reload;
input  [0:0] f_V_10_reload;
input  [0:0] f_V_11_reload;
input  [0:0] f_V_12_reload;
input  [0:0] f_V_13_reload;
input  [0:0] f_V_14_reload;
input  [0:0] f_V_15_reload;
input  [0:0] f_V_16_reload;
input  [0:0] f_V_17_reload;
input  [0:0] f_V_18_reload;
input  [0:0] f_V_19_reload;
input  [0:0] f_V_20_reload;
input  [0:0] f_V_21_reload;
input  [0:0] f_V_22_reload;
input  [0:0] f_V_23_reload;
input  [7:0] d_V;
output  [7:0] o_V_2_out;
output   o_V_2_out_ap_vld;
output  [7:0] m_V_2_out;
output   m_V_2_out_ap_vld;
output  [7:0] h_V_2_out;
output   h_V_2_out_ap_vld;
output  [7:0] g_V_2_out;
output   g_V_2_out_ap_vld;

reg ap_idle;
reg o_V_2_out_ap_vld;
reg m_V_2_out_ap_vld;
reg h_V_2_out_ap_vld;
reg g_V_2_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln63_fu_308_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [7:0] p_Val2_s_fu_102;
wire   [7:0] g_V_1_fu_470_p3;
reg   [7:0] p_Val2_1_fu_106;
wire   [7:0] h_V_1_fu_484_p3;
reg   [7:0] p_Val2_2_fu_110;
wire   [7:0] m_V_1_fu_492_p3;
reg   [7:0] p_Val2_3_fu_114;
wire   [7:0] o_V_1_fu_500_p3;
reg   [4:0] i_fu_118;
wire   [4:0] add_ln63_fu_314_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_i_1;
wire   [1:0] tmp_fu_332_p4;
wire   [31:0] zext_ln628_fu_402_p1;
wire   [0:0] tmp_1_fu_410_p3;
wire   [0:0] tmp_2_fu_348_p26;
wire   [2:0] trunc_ln628_fu_406_p1;
wire   [31:0] zext_ln368_fu_446_p1;
wire   [0:0] icmp_ln65_fu_342_p2;
reg   [7:0] p_Result_1_fu_428_p4;
wire   [0:0] tmp_5_fu_438_p3;
wire   [0:0] or_ln68_fu_478_p2;
reg   [7:0] p_Result_2_fu_450_p4;
reg   [7:0] p_Result_3_fu_460_p4;
reg   [7:0] p_Result_s_fu_418_p4;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

crc24a_mux_245_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 1 ),
    .din5_WIDTH( 1 ),
    .din6_WIDTH( 1 ),
    .din7_WIDTH( 1 ),
    .din8_WIDTH( 1 ),
    .din9_WIDTH( 1 ),
    .din10_WIDTH( 1 ),
    .din11_WIDTH( 1 ),
    .din12_WIDTH( 1 ),
    .din13_WIDTH( 1 ),
    .din14_WIDTH( 1 ),
    .din15_WIDTH( 1 ),
    .din16_WIDTH( 1 ),
    .din17_WIDTH( 1 ),
    .din18_WIDTH( 1 ),
    .din19_WIDTH( 1 ),
    .din20_WIDTH( 1 ),
    .din21_WIDTH( 1 ),
    .din22_WIDTH( 1 ),
    .din23_WIDTH( 1 ),
    .din24_WIDTH( 5 ),
    .dout_WIDTH( 1 ))
mux_245_1_1_1_U195(
    .din0(f_V_reload),
    .din1(f_V_1_reload),
    .din2(f_V_2_reload),
    .din3(f_V_3_reload),
    .din4(f_V_4_reload),
    .din5(f_V_5_reload),
    .din6(f_V_6_reload),
    .din7(f_V_7_reload),
    .din8(f_V_8_reload),
    .din9(f_V_9_reload),
    .din10(f_V_10_reload),
    .din11(f_V_11_reload),
    .din12(f_V_12_reload),
    .din13(f_V_13_reload),
    .din14(f_V_14_reload),
    .din15(f_V_15_reload),
    .din16(f_V_16_reload),
    .din17(f_V_17_reload),
    .din18(f_V_18_reload),
    .din19(f_V_19_reload),
    .din20(f_V_20_reload),
    .din21(f_V_21_reload),
    .din22(f_V_22_reload),
    .din23(f_V_23_reload),
    .din24(ap_sig_allocacmp_i_1),
    .dout(tmp_2_fu_348_p26)
);

crc24a_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln63_fu_308_p2 == 1'd0)) begin
            i_fu_118 <= add_ln63_fu_314_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_118 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (icmp_ln63_fu_308_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        p_Val2_1_fu_106 <= h_V_1_fu_484_p3;
        p_Val2_2_fu_110 <= m_V_1_fu_492_p3;
        p_Val2_3_fu_114 <= o_V_1_fu_500_p3;
        p_Val2_s_fu_102 <= g_V_1_fu_470_p3;
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln63_fu_308_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i_1 = 5'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_118;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln63_fu_308_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        g_V_2_out_ap_vld = 1'b1;
    end else begin
        g_V_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln63_fu_308_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        h_V_2_out_ap_vld = 1'b1;
    end else begin
        h_V_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln63_fu_308_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        m_V_2_out_ap_vld = 1'b1;
    end else begin
        m_V_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln63_fu_308_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        o_V_2_out_ap_vld = 1'b1;
    end else begin
        o_V_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln63_fu_314_p2 = (ap_sig_allocacmp_i_1 + 5'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign g_V_1_fu_470_p3 = ((icmp_ln65_fu_342_p2[0:0] == 1'b1) ? p_Result_1_fu_428_p4 : p_Val2_s_fu_102);

assign g_V_2_out = p_Val2_s_fu_102;

assign h_V_1_fu_484_p3 = ((or_ln68_fu_478_p2[0:0] == 1'b1) ? p_Val2_1_fu_106 : p_Result_2_fu_450_p4);

assign h_V_2_out = p_Val2_1_fu_106;

assign icmp_ln63_fu_308_p2 = ((ap_sig_allocacmp_i_1 == 5'd24) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_342_p2 = ((tmp_fu_332_p4 == 2'd0) ? 1'b1 : 1'b0);

assign m_V_1_fu_492_p3 = ((tmp_5_fu_438_p3[0:0] == 1'b1) ? p_Result_3_fu_460_p4 : p_Val2_2_fu_110);

assign m_V_2_out = p_Val2_2_fu_110;

assign o_V_1_fu_500_p3 = ((icmp_ln65_fu_342_p2[0:0] == 1'b1) ? p_Result_s_fu_418_p4 : p_Val2_3_fu_114);

assign o_V_2_out = p_Val2_3_fu_114;

assign or_ln68_fu_478_p2 = (tmp_5_fu_438_p3 | icmp_ln65_fu_342_p2);

always @ (*) begin
    p_Result_1_fu_428_p4 = p_Val2_s_fu_102;
    p_Result_1_fu_428_p4[zext_ln628_fu_402_p1] = |(tmp_2_fu_348_p26);
end

always @ (*) begin
    p_Result_2_fu_450_p4 = p_Val2_1_fu_106;
    p_Result_2_fu_450_p4[zext_ln368_fu_446_p1] = |(tmp_2_fu_348_p26);
end

always @ (*) begin
    p_Result_3_fu_460_p4 = p_Val2_2_fu_110;
    p_Result_3_fu_460_p4[zext_ln368_fu_446_p1] = |(tmp_2_fu_348_p26);
end

always @ (*) begin
    p_Result_s_fu_418_p4 = p_Val2_3_fu_114;
    p_Result_s_fu_418_p4[zext_ln628_fu_402_p1] = |(tmp_1_fu_410_p3);
end

assign tmp_1_fu_410_p3 = d_V[zext_ln628_fu_402_p1];

assign tmp_5_fu_438_p3 = ap_sig_allocacmp_i_1[32'd4];

assign tmp_fu_332_p4 = {{ap_sig_allocacmp_i_1[4:3]}};

assign trunc_ln628_fu_406_p1 = ap_sig_allocacmp_i_1[2:0];

assign zext_ln368_fu_446_p1 = trunc_ln628_fu_406_p1;

assign zext_ln628_fu_402_p1 = ap_sig_allocacmp_i_1;

endmodule //crc24a_crc24a_Pipeline_VITIS_LOOP_63_7
