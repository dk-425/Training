// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module crc24a_crc24a_Pipeline_VITIS_LOOP_43_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_reload,
        p_reload93,
        p_reload92,
        p_reload91,
        p_reload90,
        p_reload89,
        p_reload88,
        p_reload87,
        p_reload86,
        p_reload85,
        p_reload84,
        p_reload83,
        p_reload82,
        p_reload81,
        p_reload80,
        p_reload79,
        p_reload78,
        p_reload77,
        p_reload76,
        p_reload75,
        p_reload74,
        p_reload73,
        p_reload72,
        p_reload71,
        p_0_0_01161885_reload,
        p_0_0_01161864_reload,
        p_0_0_01161867_reload,
        p_0_0_01161870_reload,
        p_0_0_01161873_reload,
        p_0_0_01161876_reload,
        p_0_0_01161879_reload,
        p_0_0_01161882_reload,
        mux_case_3142616441815_out,
        mux_case_3142616441815_out_ap_vld,
        lhs_V_13_out,
        lhs_V_13_out_ap_vld,
        lhs_V_12_out,
        lhs_V_12_out_ap_vld,
        mux_case_2814501806_out,
        mux_case_2814501806_out_ap_vld,
        lhs_V_11_out,
        lhs_V_11_out_ap_vld,
        lhs_V_10_out,
        lhs_V_10_out_ap_vld,
        lhs_V_9_out,
        lhs_V_9_out_ap_vld,
        lhs_V_8_out,
        lhs_V_8_out_ap_vld,
        lhs_V_7_out,
        lhs_V_7_out_ap_vld,
        mux_case_2210601788_out,
        mux_case_2210601788_out_ap_vld,
        mux_case_219651785_out,
        mux_case_219651785_out_ap_vld,
        lhs_V_6_out,
        lhs_V_6_out_ap_vld,
        lhs_V_5_out,
        lhs_V_5_out_ap_vld,
        mux_case_188661776_out,
        mux_case_188661776_out_ap_vld,
        mux_case_177711773_out,
        mux_case_177711773_out_ap_vld,
        lhs_V_4_out,
        lhs_V_4_out_ap_vld,
        mux_case_157691767_out,
        mux_case_157691767_out_ap_vld,
        mux_case_146741764_out,
        mux_case_146741764_out_ap_vld,
        lhs_V_3_out,
        lhs_V_3_out_ap_vld,
        lhs_V_2_out,
        lhs_V_2_out_ap_vld,
        mux_case_115751755_out,
        mux_case_115751755_out_ap_vld,
        mux_case_105741752_out,
        mux_case_105741752_out_ap_vld,
        mux_case_95731749_out,
        mux_case_95731749_out_ap_vld,
        mux_case_84801746_out,
        mux_case_84801746_out_ap_vld,
        lhs_V_1_out,
        lhs_V_1_out_ap_vld,
        conv3_i_65811740_out,
        conv3_i_65811740_out_ap_vld,
        conv3_i_15401737_out,
        conv3_i_15401737_out_ap_vld,
        conv3_i_15261734_out,
        conv3_i_15261734_out_ap_vld,
        conv3_i_15121731_out,
        conv3_i_15121731_out_ap_vld,
        conv3_i_14981728_out,
        conv3_i_14981728_out_ap_vld,
        conv3_i_14841725_out,
        conv3_i_14841725_out_ap_vld,
        mux_case_01722_out,
        mux_case_01722_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [0:0] p_reload;
input  [0:0] p_reload93;
input  [0:0] p_reload92;
input  [0:0] p_reload91;
input  [0:0] p_reload90;
input  [0:0] p_reload89;
input  [0:0] p_reload88;
input  [0:0] p_reload87;
input  [0:0] p_reload86;
input  [0:0] p_reload85;
input  [0:0] p_reload84;
input  [0:0] p_reload83;
input  [0:0] p_reload82;
input  [0:0] p_reload81;
input  [0:0] p_reload80;
input  [0:0] p_reload79;
input  [0:0] p_reload78;
input  [0:0] p_reload77;
input  [0:0] p_reload76;
input  [0:0] p_reload75;
input  [0:0] p_reload74;
input  [0:0] p_reload73;
input  [0:0] p_reload72;
input  [0:0] p_reload71;
input  [0:0] p_0_0_01161885_reload;
input  [0:0] p_0_0_01161864_reload;
input  [0:0] p_0_0_01161867_reload;
input  [0:0] p_0_0_01161870_reload;
input  [0:0] p_0_0_01161873_reload;
input  [0:0] p_0_0_01161876_reload;
input  [0:0] p_0_0_01161879_reload;
input  [0:0] p_0_0_01161882_reload;
output  [0:0] mux_case_3142616441815_out;
output   mux_case_3142616441815_out_ap_vld;
output  [0:0] lhs_V_13_out;
output   lhs_V_13_out_ap_vld;
output  [0:0] lhs_V_12_out;
output   lhs_V_12_out_ap_vld;
output  [0:0] mux_case_2814501806_out;
output   mux_case_2814501806_out_ap_vld;
output  [0:0] lhs_V_11_out;
output   lhs_V_11_out_ap_vld;
output  [0:0] lhs_V_10_out;
output   lhs_V_10_out_ap_vld;
output  [0:0] lhs_V_9_out;
output   lhs_V_9_out_ap_vld;
output  [0:0] lhs_V_8_out;
output   lhs_V_8_out_ap_vld;
output  [0:0] lhs_V_7_out;
output   lhs_V_7_out_ap_vld;
output  [0:0] mux_case_2210601788_out;
output   mux_case_2210601788_out_ap_vld;
output  [0:0] mux_case_219651785_out;
output   mux_case_219651785_out_ap_vld;
output  [0:0] lhs_V_6_out;
output   lhs_V_6_out_ap_vld;
output  [0:0] lhs_V_5_out;
output   lhs_V_5_out_ap_vld;
output  [0:0] mux_case_188661776_out;
output   mux_case_188661776_out_ap_vld;
output  [0:0] mux_case_177711773_out;
output   mux_case_177711773_out_ap_vld;
output  [0:0] lhs_V_4_out;
output   lhs_V_4_out_ap_vld;
output  [0:0] mux_case_157691767_out;
output   mux_case_157691767_out_ap_vld;
output  [0:0] mux_case_146741764_out;
output   mux_case_146741764_out_ap_vld;
output  [0:0] lhs_V_3_out;
output   lhs_V_3_out_ap_vld;
output  [0:0] lhs_V_2_out;
output   lhs_V_2_out_ap_vld;
output  [0:0] mux_case_115751755_out;
output   mux_case_115751755_out_ap_vld;
output  [0:0] mux_case_105741752_out;
output   mux_case_105741752_out_ap_vld;
output  [0:0] mux_case_95731749_out;
output   mux_case_95731749_out_ap_vld;
output  [0:0] mux_case_84801746_out;
output   mux_case_84801746_out_ap_vld;
output  [0:0] lhs_V_1_out;
output   lhs_V_1_out_ap_vld;
output  [0:0] conv3_i_65811740_out;
output   conv3_i_65811740_out_ap_vld;
output  [0:0] conv3_i_15401737_out;
output   conv3_i_15401737_out_ap_vld;
output  [0:0] conv3_i_15261734_out;
output   conv3_i_15261734_out_ap_vld;
output  [0:0] conv3_i_15121731_out;
output   conv3_i_15121731_out_ap_vld;
output  [0:0] conv3_i_14981728_out;
output   conv3_i_14981728_out_ap_vld;
output  [0:0] conv3_i_14841725_out;
output   conv3_i_14841725_out_ap_vld;
output  [0:0] mux_case_01722_out;
output   mux_case_01722_out_ap_vld;

reg ap_idle;
reg mux_case_3142616441815_out_ap_vld;
reg lhs_V_13_out_ap_vld;
reg lhs_V_12_out_ap_vld;
reg mux_case_2814501806_out_ap_vld;
reg lhs_V_11_out_ap_vld;
reg lhs_V_10_out_ap_vld;
reg lhs_V_9_out_ap_vld;
reg lhs_V_8_out_ap_vld;
reg lhs_V_7_out_ap_vld;
reg mux_case_2210601788_out_ap_vld;
reg mux_case_219651785_out_ap_vld;
reg lhs_V_6_out_ap_vld;
reg lhs_V_5_out_ap_vld;
reg mux_case_188661776_out_ap_vld;
reg mux_case_177711773_out_ap_vld;
reg lhs_V_4_out_ap_vld;
reg mux_case_157691767_out_ap_vld;
reg mux_case_146741764_out_ap_vld;
reg lhs_V_3_out_ap_vld;
reg lhs_V_2_out_ap_vld;
reg mux_case_115751755_out_ap_vld;
reg mux_case_105741752_out_ap_vld;
reg mux_case_95731749_out_ap_vld;
reg mux_case_84801746_out_ap_vld;
reg lhs_V_1_out_ap_vld;
reg conv3_i_65811740_out_ap_vld;
reg conv3_i_15401737_out_ap_vld;
reg conv3_i_15261734_out_ap_vld;
reg conv3_i_15121731_out_ap_vld;
reg conv3_i_14981728_out_ap_vld;
reg conv3_i_14841725_out_ap_vld;
reg mux_case_01722_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln43_fu_952_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [0:0] mux_case_3142616441815_reg_592;
reg   [0:0] lhs_V_13_reg_603;
reg   [0:0] lhs_V_12_reg_614;
reg   [0:0] mux_case_2814501806_reg_625;
reg   [0:0] lhs_V_11_reg_636;
reg   [0:0] lhs_V_10_reg_647;
reg   [0:0] lhs_V_9_reg_658;
reg   [0:0] lhs_V_8_reg_669;
reg   [0:0] lhs_V_7_reg_680;
reg   [0:0] mux_case_2210601788_reg_691;
reg   [0:0] mux_case_219651785_reg_702;
reg   [0:0] lhs_V_6_reg_713;
reg   [0:0] lhs_V_5_reg_724;
reg   [0:0] mux_case_188661776_reg_735;
reg   [0:0] mux_case_177711773_reg_746;
reg   [0:0] lhs_V_4_reg_757;
reg   [0:0] mux_case_157691767_reg_768;
reg   [0:0] mux_case_146741764_reg_779;
reg   [0:0] lhs_V_3_reg_790;
reg   [0:0] lhs_V_2_reg_801;
reg   [0:0] mux_case_115751755_reg_812;
reg   [0:0] mux_case_105741752_reg_823;
reg   [0:0] mux_case_95731749_reg_834;
reg   [0:0] mux_case_84801746_reg_845;
reg   [0:0] lhs_V_1_reg_856;
reg   [0:0] conv3_i_65811740_reg_867;
reg   [0:0] conv3_i_15401737_reg_878;
reg   [0:0] conv3_i_15261734_reg_889;
reg   [0:0] conv3_i_15121731_reg_900;
reg   [0:0] conv3_i_14981728_reg_911;
reg   [0:0] conv3_i_14841725_reg_922;
reg   [0:0] mux_case_01722_reg_933;
wire   [0:0] crc_fu_1194_p2;
wire   [0:0] ret_V_17_fu_1206_p2;
wire   [0:0] crc_2_fu_1232_p3;
wire   [0:0] crc_3_fu_1270_p2;
wire   [0:0] ret_V_18_fu_1306_p2;
wire   [0:0] crc_5_fu_1342_p2;
wire   [0:0] crc_6_fu_1378_p2;
wire   [0:0] crc_7_fu_1396_p2;
wire   [0:0] crc_8_fu_1440_p3;
wire   [0:0] crc_9_fu_1468_p3;
wire   [0:0] crc_10_fu_1524_p2;
wire   [0:0] ret_V_19_fu_1560_p2;
wire   [0:0] crc_12_fu_1586_p3;
wire   [0:0] crc_13_fu_1606_p3;
wire   [0:0] crc_14_fu_1662_p2;
wire   [0:0] ret_V_20_fu_1682_p3;
wire   [0:0] crc_16_fu_1698_p3;
wire   [0:0] crc_17_fu_1742_p2;
wire   [0:0] ret_V_21_fu_1772_p2;
wire   [0:0] crc_19_fu_1786_p3;
wire   [0:0] crc_20_fu_1808_p3;
wire   [0:0] crc_21_fu_1824_p3;
wire   [0:0] crc_22_fu_1840_p3;
wire   [0:0] crc_23_fu_1878_p2;
wire   [0:0] ret_V_22_fu_1904_p3;
wire   [0:0] crc_25_fu_1932_p3;
wire   [0:0] crc_26_fu_1952_p3;
wire   [0:0] crc_27_fu_1972_p3;
wire   [0:0] crc_28_fu_1992_p3;
wire   [0:0] crc_29_fu_2012_p3;
wire   [0:0] crc_30_fu_2032_p3;
wire   [0:0] crc_31_fu_2046_p2;
reg   [0:0] ap_phi_mux_mux_case_3142616441815_phi_fu_595_p4;
wire    ap_loop_init;
reg   [0:0] ap_phi_mux_lhs_V_13_phi_fu_606_p4;
reg   [0:0] ap_phi_mux_lhs_V_12_phi_fu_617_p4;
reg   [0:0] ap_phi_mux_mux_case_2814501806_phi_fu_628_p4;
reg   [0:0] ap_phi_mux_lhs_V_11_phi_fu_639_p4;
reg   [0:0] ap_phi_mux_lhs_V_10_phi_fu_650_p4;
reg   [0:0] ap_phi_mux_lhs_V_9_phi_fu_661_p4;
reg   [0:0] ap_phi_mux_lhs_V_8_phi_fu_672_p4;
reg   [0:0] ap_phi_mux_lhs_V_7_phi_fu_683_p4;
reg   [0:0] ap_phi_mux_mux_case_2210601788_phi_fu_694_p4;
reg   [0:0] ap_phi_mux_mux_case_219651785_phi_fu_705_p4;
reg   [0:0] ap_phi_mux_lhs_V_6_phi_fu_716_p4;
reg   [0:0] ap_phi_mux_lhs_V_5_phi_fu_727_p4;
reg   [0:0] ap_phi_mux_mux_case_188661776_phi_fu_738_p4;
reg   [0:0] ap_phi_mux_mux_case_177711773_phi_fu_749_p4;
reg   [0:0] ap_phi_mux_lhs_V_4_phi_fu_760_p4;
reg   [0:0] ap_phi_mux_mux_case_157691767_phi_fu_771_p4;
reg   [0:0] ap_phi_mux_mux_case_146741764_phi_fu_782_p4;
reg   [0:0] ap_phi_mux_lhs_V_3_phi_fu_793_p4;
reg   [0:0] ap_phi_mux_lhs_V_2_phi_fu_804_p4;
reg   [0:0] ap_phi_mux_mux_case_115751755_phi_fu_815_p4;
reg   [0:0] ap_phi_mux_mux_case_105741752_phi_fu_826_p4;
reg   [0:0] ap_phi_mux_mux_case_95731749_phi_fu_837_p4;
reg   [0:0] ap_phi_mux_mux_case_84801746_phi_fu_848_p4;
reg   [0:0] ap_phi_mux_lhs_V_1_phi_fu_859_p4;
reg   [0:0] ap_phi_mux_conv3_i_65811740_phi_fu_870_p4;
reg   [0:0] ap_phi_mux_conv3_i_15401737_phi_fu_881_p4;
reg   [0:0] ap_phi_mux_conv3_i_15261734_phi_fu_892_p4;
reg   [0:0] ap_phi_mux_conv3_i_15121731_phi_fu_903_p4;
reg   [0:0] ap_phi_mux_conv3_i_14981728_phi_fu_914_p4;
reg   [0:0] ap_phi_mux_conv3_i_14841725_phi_fu_925_p4;
reg   [0:0] ap_phi_mux_mux_case_01722_phi_fu_936_p4;
reg   [3:0] i_1_fu_172;
wire   [3:0] add_ln43_fu_958_p2;
reg   [3:0] ap_sig_allocacmp_i;
wire   [2:0] trunc_ln1019_fu_964_p1;
wire   [0:0] lhs_V_fu_968_p10;
wire   [0:0] icmp_ln48_fu_1098_p2;
wire   [0:0] xor_ln1019_fu_1140_p2;
wire   [0:0] or_ln48_fu_1146_p2;
wire   [0:0] icmp_ln48_1_fu_1104_p2;
wire   [0:0] or_ln48_1_fu_1152_p2;
wire   [0:0] icmp_ln48_2_fu_1110_p2;
wire   [0:0] or_ln48_2_fu_1158_p2;
wire   [0:0] icmp_ln48_3_fu_1116_p2;
wire   [0:0] icmp_ln48_4_fu_1122_p2;
wire   [0:0] icmp_ln48_5_fu_1128_p2;
wire   [0:0] or_ln48_4_fu_1170_p2;
wire   [0:0] or_ln48_3_fu_1164_p2;
wire   [0:0] or_ln48_5_fu_1176_p2;
wire   [0:0] icmp_ln48_6_fu_1134_p2;
wire   [0:0] or_ln48_6_fu_1182_p2;
wire   [0:0] xor_ln48_fu_1188_p2;
wire   [0:0] xor_ln48_2_fu_1200_p2;
wire   [0:0] and_ln48_fu_1212_p2;
wire   [0:0] ret_V_16_fu_1092_p2;
wire   [0:0] and_ln48_1_fu_1226_p2;
wire   [0:0] select_ln48_fu_1218_p3;
wire   [0:0] or_ln48_7_fu_1240_p2;
wire   [0:0] and_ln48_2_fu_1252_p2;
wire   [0:0] xor_ln48_4_fu_1246_p2;
wire   [0:0] or_ln48_8_fu_1258_p2;
wire   [0:0] or_ln48_9_fu_1264_p2;
wire   [0:0] or_ln48_10_fu_1276_p2;
wire   [0:0] and_ln48_3_fu_1288_p2;
wire   [0:0] xor_ln48_6_fu_1282_p2;
wire   [0:0] or_ln48_11_fu_1294_p2;
wire   [0:0] or_ln48_12_fu_1300_p2;
wire   [0:0] or_ln48_13_fu_1312_p2;
wire   [0:0] and_ln48_4_fu_1324_p2;
wire   [0:0] xor_ln48_8_fu_1318_p2;
wire   [0:0] or_ln48_14_fu_1330_p2;
wire   [0:0] or_ln48_15_fu_1336_p2;
wire   [0:0] or_ln48_16_fu_1348_p2;
wire   [0:0] and_ln48_5_fu_1360_p2;
wire   [0:0] xor_ln48_10_fu_1354_p2;
wire   [0:0] or_ln48_17_fu_1366_p2;
wire   [0:0] or_ln48_18_fu_1372_p2;
wire   [0:0] icmp_ln48_7_fu_1384_p2;
wire   [0:0] and_ln48_6_fu_1390_p2;
wire   [0:0] and_ln48_7_fu_1402_p2;
wire   [0:0] or_ln48_19_fu_1408_p2;
wire   [0:0] or_ln48_20_fu_1414_p2;
wire   [0:0] or_ln48_21_fu_1420_p2;
wire   [0:0] ret_V_15_fu_1026_p2;
wire   [0:0] or_ln48_22_fu_1426_p2;
wire   [0:0] select_ln48_2_fu_1432_p3;
wire   [0:0] xor_ln1499_10_fu_1050_p2;
wire   [0:0] or_ln48_23_fu_1448_p2;
wire   [0:0] or_ln48_24_fu_1462_p2;
wire   [0:0] select_ln48_4_fu_1454_p3;
wire   [0:0] or_ln48_25_fu_1476_p2;
wire   [0:0] or_ln48_26_fu_1482_p2;
wire   [0:0] xor_ln48_13_fu_1488_p2;
wire   [0:0] or_ln48_27_fu_1494_p2;
wire   [0:0] or_ln48_29_fu_1506_p2;
wire   [0:0] or_ln48_30_fu_1512_p2;
wire   [0:0] or_ln48_28_fu_1500_p2;
wire   [0:0] or_ln48_31_fu_1518_p2;
wire   [0:0] or_ln48_32_fu_1530_p2;
wire   [0:0] or_ln48_33_fu_1536_p2;
wire   [0:0] xor_ln48_15_fu_1542_p2;
wire   [0:0] or_ln48_34_fu_1548_p2;
wire   [0:0] or_ln48_35_fu_1554_p2;
wire   [0:0] ret_V_14_fu_1020_p2;
wire   [0:0] or_ln48_36_fu_1566_p2;
wire   [0:0] or_ln48_37_fu_1580_p2;
wire   [0:0] select_ln48_6_fu_1572_p3;
wire   [0:0] or_ln48_38_fu_1594_p2;
wire   [0:0] or_ln48_39_fu_1600_p2;
wire   [0:0] xor_ln1499_4_fu_1014_p2;
wire   [0:0] or_ln48_40_fu_1614_p2;
wire   [0:0] or_ln48_42_fu_1626_p2;
wire   [0:0] or_ln48_41_fu_1620_p2;
wire   [0:0] or_ln48_43_fu_1632_p2;
wire   [0:0] xor_ln48_17_fu_1638_p2;
wire   [0:0] or_ln48_45_fu_1650_p2;
wire   [0:0] or_ln48_44_fu_1644_p2;
wire   [0:0] or_ln48_46_fu_1656_p2;
wire   [0:0] ret_V_13_fu_1074_p2;
wire   [0:0] or_ln48_47_fu_1668_p2;
wire   [0:0] select_ln48_9_fu_1674_p3;
wire   [0:0] xor_ln1499_9_fu_1044_p2;
wire   [0:0] select_ln48_11_fu_1690_p3;
wire   [0:0] or_ln48_48_fu_1706_p2;
wire   [0:0] or_ln48_49_fu_1712_p2;
wire   [0:0] or_ln48_50_fu_1718_p2;
wire   [0:0] xor_ln48_19_fu_1724_p2;
wire   [0:0] or_ln48_51_fu_1730_p2;
wire   [0:0] or_ln48_52_fu_1736_p2;
wire   [0:0] or_ln48_53_fu_1748_p2;
wire   [0:0] xor_ln48_21_fu_1754_p2;
wire   [0:0] or_ln48_54_fu_1760_p2;
wire   [0:0] or_ln48_55_fu_1766_p2;
wire   [0:0] ret_V_12_fu_1068_p2;
wire   [0:0] select_ln48_13_fu_1778_p3;
wire   [0:0] xor_ln1499_8_fu_1038_p2;
wire   [0:0] or_ln48_56_fu_1794_p2;
wire   [0:0] select_ln48_15_fu_1800_p3;
wire   [0:0] xor_ln1499_3_fu_1008_p2;
wire   [0:0] select_ln48_17_fu_1816_p3;
wire   [0:0] xor_ln1499_12_fu_1062_p2;
wire   [0:0] select_ln48_19_fu_1832_p3;
wire   [0:0] or_ln48_57_fu_1848_p2;
wire   [0:0] or_ln48_58_fu_1854_p2;
wire   [0:0] xor_ln48_23_fu_1860_p2;
wire   [0:0] or_ln48_59_fu_1866_p2;
wire   [0:0] or_ln48_60_fu_1872_p2;
wire   [0:0] ret_V_fu_1002_p2;
wire   [0:0] or_ln48_61_fu_1890_p2;
wire   [0:0] ret_V_10_fu_1884_p2;
wire   [0:0] select_ln48_21_fu_1896_p3;
wire   [0:0] xor_ln48_25_fu_1912_p2;
wire   [0:0] xor_ln1499_1_fu_996_p2;
wire   [0:0] and_ln48_9_fu_1918_p2;
wire   [0:0] select_ln48_23_fu_1924_p3;
wire   [0:0] xor_ln48_26_fu_1940_p2;
wire   [0:0] xor_ln1499_16_fu_1086_p2;
wire   [0:0] and_ln48_10_fu_1946_p2;
wire   [0:0] xor_ln48_27_fu_1960_p2;
wire   [0:0] xor_ln1499_15_fu_1080_p2;
wire   [0:0] and_ln48_11_fu_1966_p2;
wire   [0:0] xor_ln48_28_fu_1980_p2;
wire   [0:0] xor_ln1499_11_fu_1056_p2;
wire   [0:0] and_ln48_12_fu_1986_p2;
wire   [0:0] xor_ln48_29_fu_2000_p2;
wire   [0:0] xor_ln1499_7_fu_1032_p2;
wire   [0:0] and_ln48_13_fu_2006_p2;
wire   [0:0] xor_ln48_30_fu_2020_p2;
wire   [0:0] xor_ln1499_fu_990_p2;
wire   [0:0] and_ln48_14_fu_2026_p2;
wire   [0:0] xor_ln48_31_fu_2040_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

crc24a_mux_83_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 1 ),
    .din5_WIDTH( 1 ),
    .din6_WIDTH( 1 ),
    .din7_WIDTH( 1 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 1 ))
mux_83_1_1_1_U34(
    .din0(ap_phi_mux_mux_case_01722_phi_fu_936_p4),
    .din1(ap_phi_mux_conv3_i_14841725_phi_fu_925_p4),
    .din2(ap_phi_mux_conv3_i_14981728_phi_fu_914_p4),
    .din3(ap_phi_mux_conv3_i_15121731_phi_fu_903_p4),
    .din4(ap_phi_mux_conv3_i_15261734_phi_fu_892_p4),
    .din5(ap_phi_mux_conv3_i_15401737_phi_fu_881_p4),
    .din6(ap_phi_mux_conv3_i_65811740_phi_fu_870_p4),
    .din7(ap_phi_mux_lhs_V_1_phi_fu_859_p4),
    .din8(trunc_ln1019_fu_964_p1),
    .dout(lhs_V_fu_968_p10)
);

crc24a_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        if ((icmp_ln43_fu_952_p2 == 1'd0)) begin
            i_1_fu_172 <= add_ln43_fu_958_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_1_fu_172 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln43_fu_952_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        conv3_i_14841725_reg_922 <= crc_30_fu_2032_p3;
        conv3_i_14981728_reg_911 <= crc_29_fu_2012_p3;
        conv3_i_15121731_reg_900 <= crc_28_fu_1992_p3;
        conv3_i_15261734_reg_889 <= crc_27_fu_1972_p3;
        conv3_i_15401737_reg_878 <= crc_26_fu_1952_p3;
        conv3_i_65811740_reg_867 <= crc_25_fu_1932_p3;
        lhs_V_10_reg_647 <= crc_5_fu_1342_p2;
        lhs_V_11_reg_636 <= ret_V_18_fu_1306_p2;
        lhs_V_12_reg_614 <= crc_2_fu_1232_p3;
        lhs_V_13_reg_603 <= ret_V_17_fu_1206_p2;
        lhs_V_1_reg_856 <= ret_V_22_fu_1904_p3;
        lhs_V_2_reg_801 <= crc_19_fu_1786_p3;
        lhs_V_3_reg_790 <= ret_V_21_fu_1772_p2;
        lhs_V_4_reg_757 <= ret_V_20_fu_1682_p3;
        lhs_V_5_reg_724 <= crc_12_fu_1586_p3;
        lhs_V_6_reg_713 <= ret_V_19_fu_1560_p2;
        lhs_V_7_reg_680 <= crc_8_fu_1440_p3;
        lhs_V_8_reg_669 <= crc_7_fu_1396_p2;
        lhs_V_9_reg_658 <= crc_6_fu_1378_p2;
        mux_case_01722_reg_933 <= crc_31_fu_2046_p2;
        mux_case_105741752_reg_823 <= crc_21_fu_1824_p3;
        mux_case_115751755_reg_812 <= crc_20_fu_1808_p3;
        mux_case_146741764_reg_779 <= crc_17_fu_1742_p2;
        mux_case_157691767_reg_768 <= crc_16_fu_1698_p3;
        mux_case_177711773_reg_746 <= crc_14_fu_1662_p2;
        mux_case_188661776_reg_735 <= crc_13_fu_1606_p3;
        mux_case_219651785_reg_702 <= crc_10_fu_1524_p2;
        mux_case_2210601788_reg_691 <= crc_9_fu_1468_p3;
        mux_case_2814501806_reg_625 <= crc_3_fu_1270_p2;
        mux_case_3142616441815_reg_592 <= crc_fu_1194_p2;
        mux_case_84801746_reg_845 <= crc_23_fu_1878_p2;
        mux_case_95731749_reg_834 <= crc_22_fu_1840_p3;
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln43_fu_952_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_conv3_i_14841725_phi_fu_925_p4 = p_0_0_01161879_reload;
    end else begin
        ap_phi_mux_conv3_i_14841725_phi_fu_925_p4 = conv3_i_14841725_reg_922;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_conv3_i_14981728_phi_fu_914_p4 = p_0_0_01161876_reload;
    end else begin
        ap_phi_mux_conv3_i_14981728_phi_fu_914_p4 = conv3_i_14981728_reg_911;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_conv3_i_15121731_phi_fu_903_p4 = p_0_0_01161873_reload;
    end else begin
        ap_phi_mux_conv3_i_15121731_phi_fu_903_p4 = conv3_i_15121731_reg_900;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_conv3_i_15261734_phi_fu_892_p4 = p_0_0_01161870_reload;
    end else begin
        ap_phi_mux_conv3_i_15261734_phi_fu_892_p4 = conv3_i_15261734_reg_889;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_conv3_i_15401737_phi_fu_881_p4 = p_0_0_01161867_reload;
    end else begin
        ap_phi_mux_conv3_i_15401737_phi_fu_881_p4 = conv3_i_15401737_reg_878;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_conv3_i_65811740_phi_fu_870_p4 = p_0_0_01161864_reload;
    end else begin
        ap_phi_mux_conv3_i_65811740_phi_fu_870_p4 = conv3_i_65811740_reg_867;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_lhs_V_10_phi_fu_650_p4 = p_reload89;
    end else begin
        ap_phi_mux_lhs_V_10_phi_fu_650_p4 = lhs_V_10_reg_647;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_lhs_V_11_phi_fu_639_p4 = p_reload90;
    end else begin
        ap_phi_mux_lhs_V_11_phi_fu_639_p4 = lhs_V_11_reg_636;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_lhs_V_12_phi_fu_617_p4 = p_reload92;
    end else begin
        ap_phi_mux_lhs_V_12_phi_fu_617_p4 = lhs_V_12_reg_614;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_lhs_V_13_phi_fu_606_p4 = p_reload93;
    end else begin
        ap_phi_mux_lhs_V_13_phi_fu_606_p4 = lhs_V_13_reg_603;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_lhs_V_1_phi_fu_859_p4 = p_0_0_01161885_reload;
    end else begin
        ap_phi_mux_lhs_V_1_phi_fu_859_p4 = lhs_V_1_reg_856;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_lhs_V_2_phi_fu_804_p4 = p_reload75;
    end else begin
        ap_phi_mux_lhs_V_2_phi_fu_804_p4 = lhs_V_2_reg_801;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_lhs_V_3_phi_fu_793_p4 = p_reload76;
    end else begin
        ap_phi_mux_lhs_V_3_phi_fu_793_p4 = lhs_V_3_reg_790;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_lhs_V_4_phi_fu_760_p4 = p_reload79;
    end else begin
        ap_phi_mux_lhs_V_4_phi_fu_760_p4 = lhs_V_4_reg_757;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_lhs_V_5_phi_fu_727_p4 = p_reload82;
    end else begin
        ap_phi_mux_lhs_V_5_phi_fu_727_p4 = lhs_V_5_reg_724;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_lhs_V_6_phi_fu_716_p4 = p_reload83;
    end else begin
        ap_phi_mux_lhs_V_6_phi_fu_716_p4 = lhs_V_6_reg_713;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_lhs_V_7_phi_fu_683_p4 = p_reload86;
    end else begin
        ap_phi_mux_lhs_V_7_phi_fu_683_p4 = lhs_V_7_reg_680;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_lhs_V_8_phi_fu_672_p4 = p_reload87;
    end else begin
        ap_phi_mux_lhs_V_8_phi_fu_672_p4 = lhs_V_8_reg_669;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_lhs_V_9_phi_fu_661_p4 = p_reload88;
    end else begin
        ap_phi_mux_lhs_V_9_phi_fu_661_p4 = lhs_V_9_reg_658;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_mux_case_01722_phi_fu_936_p4 = p_0_0_01161882_reload;
    end else begin
        ap_phi_mux_mux_case_01722_phi_fu_936_p4 = mux_case_01722_reg_933;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_mux_case_105741752_phi_fu_826_p4 = p_reload73;
    end else begin
        ap_phi_mux_mux_case_105741752_phi_fu_826_p4 = mux_case_105741752_reg_823;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_mux_case_115751755_phi_fu_815_p4 = p_reload74;
    end else begin
        ap_phi_mux_mux_case_115751755_phi_fu_815_p4 = mux_case_115751755_reg_812;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_mux_case_146741764_phi_fu_782_p4 = p_reload77;
    end else begin
        ap_phi_mux_mux_case_146741764_phi_fu_782_p4 = mux_case_146741764_reg_779;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_mux_case_157691767_phi_fu_771_p4 = p_reload78;
    end else begin
        ap_phi_mux_mux_case_157691767_phi_fu_771_p4 = mux_case_157691767_reg_768;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_mux_case_177711773_phi_fu_749_p4 = p_reload80;
    end else begin
        ap_phi_mux_mux_case_177711773_phi_fu_749_p4 = mux_case_177711773_reg_746;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_mux_case_188661776_phi_fu_738_p4 = p_reload81;
    end else begin
        ap_phi_mux_mux_case_188661776_phi_fu_738_p4 = mux_case_188661776_reg_735;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_mux_case_219651785_phi_fu_705_p4 = p_reload84;
    end else begin
        ap_phi_mux_mux_case_219651785_phi_fu_705_p4 = mux_case_219651785_reg_702;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_mux_case_2210601788_phi_fu_694_p4 = p_reload85;
    end else begin
        ap_phi_mux_mux_case_2210601788_phi_fu_694_p4 = mux_case_2210601788_reg_691;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_mux_case_2814501806_phi_fu_628_p4 = p_reload91;
    end else begin
        ap_phi_mux_mux_case_2814501806_phi_fu_628_p4 = mux_case_2814501806_reg_625;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_mux_case_3142616441815_phi_fu_595_p4 = p_reload;
    end else begin
        ap_phi_mux_mux_case_3142616441815_phi_fu_595_p4 = mux_case_3142616441815_reg_592;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_mux_case_84801746_phi_fu_848_p4 = p_reload71;
    end else begin
        ap_phi_mux_mux_case_84801746_phi_fu_848_p4 = mux_case_84801746_reg_845;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_mux_case_95731749_phi_fu_837_p4 = p_reload72;
    end else begin
        ap_phi_mux_mux_case_95731749_phi_fu_837_p4 = mux_case_95731749_reg_834;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i = 4'd0;
    end else begin
        ap_sig_allocacmp_i = i_1_fu_172;
    end
end

always @ (*) begin
    if (((icmp_ln43_fu_952_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        conv3_i_14841725_out_ap_vld = 1'b1;
    end else begin
        conv3_i_14841725_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln43_fu_952_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        conv3_i_14981728_out_ap_vld = 1'b1;
    end else begin
        conv3_i_14981728_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln43_fu_952_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        conv3_i_15121731_out_ap_vld = 1'b1;
    end else begin
        conv3_i_15121731_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln43_fu_952_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        conv3_i_15261734_out_ap_vld = 1'b1;
    end else begin
        conv3_i_15261734_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln43_fu_952_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        conv3_i_15401737_out_ap_vld = 1'b1;
    end else begin
        conv3_i_15401737_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln43_fu_952_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        conv3_i_65811740_out_ap_vld = 1'b1;
    end else begin
        conv3_i_65811740_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln43_fu_952_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        lhs_V_10_out_ap_vld = 1'b1;
    end else begin
        lhs_V_10_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln43_fu_952_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        lhs_V_11_out_ap_vld = 1'b1;
    end else begin
        lhs_V_11_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln43_fu_952_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        lhs_V_12_out_ap_vld = 1'b1;
    end else begin
        lhs_V_12_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln43_fu_952_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        lhs_V_13_out_ap_vld = 1'b1;
    end else begin
        lhs_V_13_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln43_fu_952_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        lhs_V_1_out_ap_vld = 1'b1;
    end else begin
        lhs_V_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln43_fu_952_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        lhs_V_2_out_ap_vld = 1'b1;
    end else begin
        lhs_V_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln43_fu_952_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        lhs_V_3_out_ap_vld = 1'b1;
    end else begin
        lhs_V_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln43_fu_952_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        lhs_V_4_out_ap_vld = 1'b1;
    end else begin
        lhs_V_4_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln43_fu_952_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        lhs_V_5_out_ap_vld = 1'b1;
    end else begin
        lhs_V_5_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln43_fu_952_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        lhs_V_6_out_ap_vld = 1'b1;
    end else begin
        lhs_V_6_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln43_fu_952_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        lhs_V_7_out_ap_vld = 1'b1;
    end else begin
        lhs_V_7_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln43_fu_952_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        lhs_V_8_out_ap_vld = 1'b1;
    end else begin
        lhs_V_8_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln43_fu_952_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        lhs_V_9_out_ap_vld = 1'b1;
    end else begin
        lhs_V_9_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln43_fu_952_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        mux_case_01722_out_ap_vld = 1'b1;
    end else begin
        mux_case_01722_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln43_fu_952_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        mux_case_105741752_out_ap_vld = 1'b1;
    end else begin
        mux_case_105741752_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln43_fu_952_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        mux_case_115751755_out_ap_vld = 1'b1;
    end else begin
        mux_case_115751755_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln43_fu_952_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        mux_case_146741764_out_ap_vld = 1'b1;
    end else begin
        mux_case_146741764_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln43_fu_952_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        mux_case_157691767_out_ap_vld = 1'b1;
    end else begin
        mux_case_157691767_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln43_fu_952_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        mux_case_177711773_out_ap_vld = 1'b1;
    end else begin
        mux_case_177711773_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln43_fu_952_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        mux_case_188661776_out_ap_vld = 1'b1;
    end else begin
        mux_case_188661776_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln43_fu_952_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        mux_case_219651785_out_ap_vld = 1'b1;
    end else begin
        mux_case_219651785_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln43_fu_952_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        mux_case_2210601788_out_ap_vld = 1'b1;
    end else begin
        mux_case_2210601788_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln43_fu_952_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        mux_case_2814501806_out_ap_vld = 1'b1;
    end else begin
        mux_case_2814501806_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln43_fu_952_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        mux_case_3142616441815_out_ap_vld = 1'b1;
    end else begin
        mux_case_3142616441815_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln43_fu_952_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        mux_case_84801746_out_ap_vld = 1'b1;
    end else begin
        mux_case_84801746_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln43_fu_952_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        mux_case_95731749_out_ap_vld = 1'b1;
    end else begin
        mux_case_95731749_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln43_fu_958_p2 = (ap_sig_allocacmp_i + 4'd1);

assign and_ln48_10_fu_1946_p2 = (xor_ln48_26_fu_1940_p2 & ap_phi_mux_conv3_i_15401737_phi_fu_881_p4);

assign and_ln48_11_fu_1966_p2 = (xor_ln48_27_fu_1960_p2 & ap_phi_mux_conv3_i_15261734_phi_fu_892_p4);

assign and_ln48_12_fu_1986_p2 = (xor_ln48_28_fu_1980_p2 & ap_phi_mux_conv3_i_15121731_phi_fu_903_p4);

assign and_ln48_13_fu_2006_p2 = (xor_ln48_29_fu_2000_p2 & ap_phi_mux_conv3_i_14981728_phi_fu_914_p4);

assign and_ln48_14_fu_2026_p2 = (xor_ln48_30_fu_2020_p2 & ap_phi_mux_conv3_i_14841725_phi_fu_925_p4);

assign and_ln48_1_fu_1226_p2 = (lhs_V_fu_968_p10 & icmp_ln48_5_fu_1128_p2);

assign and_ln48_2_fu_1252_p2 = (lhs_V_fu_968_p10 & icmp_ln48_4_fu_1122_p2);

assign and_ln48_3_fu_1288_p2 = (lhs_V_fu_968_p10 & icmp_ln48_3_fu_1116_p2);

assign and_ln48_4_fu_1324_p2 = (lhs_V_fu_968_p10 & icmp_ln48_2_fu_1110_p2);

assign and_ln48_5_fu_1360_p2 = (lhs_V_fu_968_p10 & icmp_ln48_1_fu_1104_p2);

assign and_ln48_6_fu_1390_p2 = (lhs_V_fu_968_p10 & icmp_ln48_7_fu_1384_p2);

assign and_ln48_7_fu_1402_p2 = (lhs_V_fu_968_p10 & icmp_ln48_fu_1098_p2);

assign and_ln48_9_fu_1918_p2 = (xor_ln48_25_fu_1912_p2 & ap_phi_mux_conv3_i_65811740_phi_fu_870_p4);

assign and_ln48_fu_1212_p2 = (lhs_V_fu_968_p10 & icmp_ln48_6_fu_1134_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign conv3_i_14841725_out = ap_phi_mux_conv3_i_14841725_phi_fu_925_p4;

assign conv3_i_14981728_out = ap_phi_mux_conv3_i_14981728_phi_fu_914_p4;

assign conv3_i_15121731_out = ap_phi_mux_conv3_i_15121731_phi_fu_903_p4;

assign conv3_i_15261734_out = ap_phi_mux_conv3_i_15261734_phi_fu_892_p4;

assign conv3_i_15401737_out = ap_phi_mux_conv3_i_15401737_phi_fu_881_p4;

assign conv3_i_65811740_out = ap_phi_mux_conv3_i_65811740_phi_fu_870_p4;

assign crc_10_fu_1524_p2 = (or_ln48_31_fu_1518_p2 ^ ap_phi_mux_mux_case_219651785_phi_fu_705_p4);

assign crc_12_fu_1586_p3 = ((or_ln48_37_fu_1580_p2[0:0] == 1'b1) ? ret_V_14_fu_1020_p2 : select_ln48_6_fu_1572_p3);

assign crc_13_fu_1606_p3 = ((or_ln48_39_fu_1600_p2[0:0] == 1'b1) ? xor_ln1499_4_fu_1014_p2 : ap_phi_mux_mux_case_188661776_phi_fu_738_p4);

assign crc_14_fu_1662_p2 = (or_ln48_46_fu_1656_p2 ^ ap_phi_mux_mux_case_177711773_phi_fu_749_p4);

assign crc_16_fu_1698_p3 = ((or_ln48_23_fu_1448_p2[0:0] == 1'b1) ? xor_ln1499_9_fu_1044_p2 : select_ln48_11_fu_1690_p3);

assign crc_17_fu_1742_p2 = (or_ln48_52_fu_1736_p2 ^ ap_phi_mux_mux_case_146741764_phi_fu_782_p4);

assign crc_19_fu_1786_p3 = ((or_ln48_36_fu_1566_p2[0:0] == 1'b1) ? ret_V_12_fu_1068_p2 : select_ln48_13_fu_1778_p3);

assign crc_20_fu_1808_p3 = ((or_ln48_56_fu_1794_p2[0:0] == 1'b1) ? xor_ln1499_8_fu_1038_p2 : select_ln48_15_fu_1800_p3);

assign crc_21_fu_1824_p3 = ((or_ln48_45_fu_1650_p2[0:0] == 1'b1) ? xor_ln1499_3_fu_1008_p2 : select_ln48_17_fu_1816_p3);

assign crc_22_fu_1840_p3 = ((and_ln48_4_fu_1324_p2[0:0] == 1'b1) ? xor_ln1499_12_fu_1062_p2 : select_ln48_19_fu_1832_p3);

assign crc_23_fu_1878_p2 = (or_ln48_60_fu_1872_p2 ^ ap_phi_mux_mux_case_84801746_phi_fu_848_p4);

assign crc_25_fu_1932_p3 = ((and_ln48_7_fu_1402_p2[0:0] == 1'b1) ? xor_ln1499_1_fu_996_p2 : select_ln48_23_fu_1924_p3);

assign crc_26_fu_1952_p3 = ((and_ln48_2_fu_1252_p2[0:0] == 1'b1) ? xor_ln1499_16_fu_1086_p2 : and_ln48_10_fu_1946_p2);

assign crc_27_fu_1972_p3 = ((and_ln48_3_fu_1288_p2[0:0] == 1'b1) ? xor_ln1499_15_fu_1080_p2 : and_ln48_11_fu_1966_p2);

assign crc_28_fu_1992_p3 = ((and_ln48_4_fu_1324_p2[0:0] == 1'b1) ? xor_ln1499_11_fu_1056_p2 : and_ln48_12_fu_1986_p2);

assign crc_29_fu_2012_p3 = ((and_ln48_5_fu_1360_p2[0:0] == 1'b1) ? xor_ln1499_7_fu_1032_p2 : and_ln48_13_fu_2006_p2);

assign crc_2_fu_1232_p3 = ((and_ln48_1_fu_1226_p2[0:0] == 1'b1) ? ret_V_16_fu_1092_p2 : select_ln48_fu_1218_p3);

assign crc_30_fu_2032_p3 = ((and_ln48_7_fu_1402_p2[0:0] == 1'b1) ? xor_ln1499_fu_990_p2 : and_ln48_14_fu_2026_p2);

assign crc_31_fu_2046_p2 = (xor_ln48_31_fu_2040_p2 & ap_phi_mux_mux_case_01722_phi_fu_936_p4);

assign crc_3_fu_1270_p2 = (or_ln48_9_fu_1264_p2 ^ ap_phi_mux_mux_case_2814501806_phi_fu_628_p4);

assign crc_5_fu_1342_p2 = (or_ln48_15_fu_1336_p2 ^ ap_phi_mux_lhs_V_10_phi_fu_650_p4);

assign crc_6_fu_1378_p2 = (or_ln48_18_fu_1372_p2 ^ ap_phi_mux_lhs_V_9_phi_fu_661_p4);

assign crc_7_fu_1396_p2 = (ap_phi_mux_lhs_V_8_phi_fu_672_p4 ^ and_ln48_6_fu_1390_p2);

assign crc_8_fu_1440_p3 = ((or_ln48_22_fu_1426_p2[0:0] == 1'b1) ? ret_V_15_fu_1026_p2 : select_ln48_2_fu_1432_p3);

assign crc_9_fu_1468_p3 = ((or_ln48_24_fu_1462_p2[0:0] == 1'b1) ? xor_ln1499_10_fu_1050_p2 : select_ln48_4_fu_1454_p3);

assign crc_fu_1194_p2 = (xor_ln48_fu_1188_p2 ^ ap_phi_mux_mux_case_3142616441815_phi_fu_595_p4);

assign icmp_ln43_fu_952_p2 = ((ap_sig_allocacmp_i == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln48_1_fu_1104_p2 = ((trunc_ln1019_fu_964_p1 == 3'd1) ? 1'b1 : 1'b0);

assign icmp_ln48_2_fu_1110_p2 = ((trunc_ln1019_fu_964_p1 == 3'd2) ? 1'b1 : 1'b0);

assign icmp_ln48_3_fu_1116_p2 = ((trunc_ln1019_fu_964_p1 == 3'd3) ? 1'b1 : 1'b0);

assign icmp_ln48_4_fu_1122_p2 = ((trunc_ln1019_fu_964_p1 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln48_5_fu_1128_p2 = ((trunc_ln1019_fu_964_p1 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln48_6_fu_1134_p2 = ((trunc_ln1019_fu_964_p1 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln48_7_fu_1384_p2 = ((trunc_ln1019_fu_964_p1 != 3'd2) ? 1'b1 : 1'b0);

assign icmp_ln48_fu_1098_p2 = ((trunc_ln1019_fu_964_p1 == 3'd0) ? 1'b1 : 1'b0);

assign lhs_V_10_out = ap_phi_mux_lhs_V_10_phi_fu_650_p4;

assign lhs_V_11_out = ap_phi_mux_lhs_V_11_phi_fu_639_p4;

assign lhs_V_12_out = ap_phi_mux_lhs_V_12_phi_fu_617_p4;

assign lhs_V_13_out = ap_phi_mux_lhs_V_13_phi_fu_606_p4;

assign lhs_V_1_out = ap_phi_mux_lhs_V_1_phi_fu_859_p4;

assign lhs_V_2_out = ap_phi_mux_lhs_V_2_phi_fu_804_p4;

assign lhs_V_3_out = ap_phi_mux_lhs_V_3_phi_fu_793_p4;

assign lhs_V_4_out = ap_phi_mux_lhs_V_4_phi_fu_760_p4;

assign lhs_V_5_out = ap_phi_mux_lhs_V_5_phi_fu_727_p4;

assign lhs_V_6_out = ap_phi_mux_lhs_V_6_phi_fu_716_p4;

assign lhs_V_7_out = ap_phi_mux_lhs_V_7_phi_fu_683_p4;

assign lhs_V_8_out = ap_phi_mux_lhs_V_8_phi_fu_672_p4;

assign lhs_V_9_out = ap_phi_mux_lhs_V_9_phi_fu_661_p4;

assign mux_case_01722_out = ap_phi_mux_mux_case_01722_phi_fu_936_p4;

assign mux_case_105741752_out = ap_phi_mux_mux_case_105741752_phi_fu_826_p4;

assign mux_case_115751755_out = ap_phi_mux_mux_case_115751755_phi_fu_815_p4;

assign mux_case_146741764_out = ap_phi_mux_mux_case_146741764_phi_fu_782_p4;

assign mux_case_157691767_out = ap_phi_mux_mux_case_157691767_phi_fu_771_p4;

assign mux_case_177711773_out = ap_phi_mux_mux_case_177711773_phi_fu_749_p4;

assign mux_case_188661776_out = ap_phi_mux_mux_case_188661776_phi_fu_738_p4;

assign mux_case_219651785_out = ap_phi_mux_mux_case_219651785_phi_fu_705_p4;

assign mux_case_2210601788_out = ap_phi_mux_mux_case_2210601788_phi_fu_694_p4;

assign mux_case_2814501806_out = ap_phi_mux_mux_case_2814501806_phi_fu_628_p4;

assign mux_case_3142616441815_out = ap_phi_mux_mux_case_3142616441815_phi_fu_595_p4;

assign mux_case_84801746_out = ap_phi_mux_mux_case_84801746_phi_fu_848_p4;

assign mux_case_95731749_out = ap_phi_mux_mux_case_95731749_phi_fu_837_p4;

assign or_ln48_10_fu_1276_p2 = (or_ln48_2_fu_1158_p2 | icmp_ln48_5_fu_1128_p2);

assign or_ln48_11_fu_1294_p2 = (xor_ln48_6_fu_1282_p2 | and_ln48_3_fu_1288_p2);

assign or_ln48_12_fu_1300_p2 = (or_ln48_11_fu_1294_p2 | and_ln48_2_fu_1252_p2);

assign or_ln48_13_fu_1312_p2 = (or_ln48_1_fu_1152_p2 | icmp_ln48_4_fu_1122_p2);

assign or_ln48_14_fu_1330_p2 = (xor_ln48_8_fu_1318_p2 | and_ln48_4_fu_1324_p2);

assign or_ln48_15_fu_1336_p2 = (or_ln48_14_fu_1330_p2 | and_ln48_3_fu_1288_p2);

assign or_ln48_16_fu_1348_p2 = (or_ln48_fu_1146_p2 | icmp_ln48_3_fu_1116_p2);

assign or_ln48_17_fu_1366_p2 = (xor_ln48_10_fu_1354_p2 | and_ln48_5_fu_1360_p2);

assign or_ln48_18_fu_1372_p2 = (or_ln48_17_fu_1366_p2 | and_ln48_4_fu_1324_p2);

assign or_ln48_19_fu_1408_p2 = (and_ln48_7_fu_1402_p2 | and_ln48_4_fu_1324_p2);

assign or_ln48_1_fu_1152_p2 = (or_ln48_fu_1146_p2 | icmp_ln48_1_fu_1104_p2);

assign or_ln48_20_fu_1414_p2 = (and_ln48_3_fu_1288_p2 | and_ln48_2_fu_1252_p2);

assign or_ln48_21_fu_1420_p2 = (and_ln48_fu_1212_p2 | and_ln48_1_fu_1226_p2);

assign or_ln48_22_fu_1426_p2 = (or_ln48_20_fu_1414_p2 | or_ln48_19_fu_1408_p2);

assign or_ln48_23_fu_1448_p2 = (and_ln48_5_fu_1360_p2 | and_ln48_4_fu_1324_p2);

assign or_ln48_24_fu_1462_p2 = (or_ln48_23_fu_1448_p2 | or_ln48_20_fu_1414_p2);

assign or_ln48_25_fu_1476_p2 = (xor_ln1019_fu_1140_p2 | icmp_ln48_6_fu_1134_p2);

assign or_ln48_26_fu_1482_p2 = (or_ln48_25_fu_1476_p2 | icmp_ln48_5_fu_1128_p2);

assign or_ln48_27_fu_1494_p2 = (xor_ln48_13_fu_1488_p2 | and_ln48_3_fu_1288_p2);

assign or_ln48_28_fu_1500_p2 = (or_ln48_27_fu_1494_p2 | and_ln48_2_fu_1252_p2);

assign or_ln48_29_fu_1506_p2 = (and_ln48_7_fu_1402_p2 | and_ln48_5_fu_1360_p2);

assign or_ln48_2_fu_1158_p2 = (or_ln48_1_fu_1152_p2 | icmp_ln48_2_fu_1110_p2);

assign or_ln48_30_fu_1512_p2 = (or_ln48_29_fu_1506_p2 | and_ln48_4_fu_1324_p2);

assign or_ln48_31_fu_1518_p2 = (or_ln48_30_fu_1512_p2 | or_ln48_28_fu_1500_p2);

assign or_ln48_32_fu_1530_p2 = (xor_ln1019_fu_1140_p2 | icmp_ln48_5_fu_1128_p2);

assign or_ln48_33_fu_1536_p2 = (or_ln48_32_fu_1530_p2 | icmp_ln48_4_fu_1122_p2);

assign or_ln48_34_fu_1548_p2 = (xor_ln48_15_fu_1542_p2 | and_ln48_3_fu_1288_p2);

assign or_ln48_35_fu_1554_p2 = (or_ln48_34_fu_1548_p2 | or_ln48_30_fu_1512_p2);

assign or_ln48_36_fu_1566_p2 = (and_ln48_4_fu_1324_p2 | and_ln48_1_fu_1226_p2);

assign or_ln48_37_fu_1580_p2 = (or_ln48_36_fu_1566_p2 | or_ln48_29_fu_1506_p2);

assign or_ln48_38_fu_1594_p2 = (and_ln48_2_fu_1252_p2 | and_ln48_1_fu_1226_p2);

assign or_ln48_39_fu_1600_p2 = (or_ln48_38_fu_1594_p2 | or_ln48_29_fu_1506_p2);

assign or_ln48_3_fu_1164_p2 = (or_ln48_2_fu_1158_p2 | icmp_ln48_3_fu_1116_p2);

assign or_ln48_40_fu_1614_p2 = (xor_ln1019_fu_1140_p2 | icmp_ln48_2_fu_1110_p2);

assign or_ln48_41_fu_1620_p2 = (or_ln48_40_fu_1614_p2 | icmp_ln48_1_fu_1104_p2);

assign or_ln48_42_fu_1626_p2 = (icmp_ln48_6_fu_1134_p2 | icmp_ln48_5_fu_1128_p2);

assign or_ln48_43_fu_1632_p2 = (or_ln48_42_fu_1626_p2 | or_ln48_41_fu_1620_p2);

assign or_ln48_44_fu_1644_p2 = (xor_ln48_17_fu_1638_p2 | and_ln48_2_fu_1252_p2);

assign or_ln48_45_fu_1650_p2 = (and_ln48_7_fu_1402_p2 | and_ln48_3_fu_1288_p2);

assign or_ln48_46_fu_1656_p2 = (or_ln48_45_fu_1650_p2 | or_ln48_44_fu_1644_p2);

assign or_ln48_47_fu_1668_p2 = (and_ln48_4_fu_1324_p2 | and_ln48_3_fu_1288_p2);

assign or_ln48_48_fu_1706_p2 = (icmp_ln48_3_fu_1116_p2 | icmp_ln48_2_fu_1110_p2);

assign or_ln48_49_fu_1712_p2 = (xor_ln1019_fu_1140_p2 | or_ln48_48_fu_1706_p2);

assign or_ln48_4_fu_1170_p2 = (icmp_ln48_5_fu_1128_p2 | icmp_ln48_4_fu_1122_p2);

assign or_ln48_50_fu_1718_p2 = (or_ln48_49_fu_1712_p2 | or_ln48_42_fu_1626_p2);

assign or_ln48_51_fu_1730_p2 = (xor_ln48_19_fu_1724_p2 | and_ln48_2_fu_1252_p2);

assign or_ln48_52_fu_1736_p2 = (or_ln48_51_fu_1730_p2 | or_ln48_29_fu_1506_p2);

assign or_ln48_53_fu_1748_p2 = (or_ln48_4_fu_1170_p2 | or_ln48_41_fu_1620_p2);

assign or_ln48_54_fu_1760_p2 = (xor_ln48_21_fu_1754_p2 | and_ln48_7_fu_1402_p2);

assign or_ln48_55_fu_1766_p2 = (or_ln48_54_fu_1760_p2 | and_ln48_3_fu_1288_p2);

assign or_ln48_56_fu_1794_p2 = (and_ln48_5_fu_1360_p2 | and_ln48_2_fu_1252_p2);

assign or_ln48_57_fu_1848_p2 = (or_ln48_16_fu_1348_p2 | icmp_ln48_4_fu_1122_p2);

assign or_ln48_58_fu_1854_p2 = (or_ln48_57_fu_1848_p2 | or_ln48_42_fu_1626_p2);

assign or_ln48_59_fu_1866_p2 = (xor_ln48_23_fu_1860_p2 | and_ln48_5_fu_1360_p2);

assign or_ln48_5_fu_1176_p2 = (or_ln48_4_fu_1170_p2 | or_ln48_3_fu_1164_p2);

assign or_ln48_60_fu_1872_p2 = (or_ln48_59_fu_1866_p2 | and_ln48_4_fu_1324_p2);

assign or_ln48_61_fu_1890_p2 = (or_ln48_4_fu_1170_p2 | or_ln48_49_fu_1712_p2);

assign or_ln48_6_fu_1182_p2 = (or_ln48_5_fu_1176_p2 | icmp_ln48_6_fu_1134_p2);

assign or_ln48_7_fu_1240_p2 = (or_ln48_3_fu_1164_p2 | icmp_ln48_6_fu_1134_p2);

assign or_ln48_8_fu_1258_p2 = (xor_ln48_4_fu_1246_p2 | and_ln48_2_fu_1252_p2);

assign or_ln48_9_fu_1264_p2 = (or_ln48_8_fu_1258_p2 | and_ln48_1_fu_1226_p2);

assign or_ln48_fu_1146_p2 = (xor_ln1019_fu_1140_p2 | icmp_ln48_fu_1098_p2);

assign ret_V_10_fu_1884_p2 = (ret_V_fu_1002_p2 & and_ln48_fu_1212_p2);

assign ret_V_12_fu_1068_p2 = (ap_phi_mux_lhs_V_2_phi_fu_804_p4 ^ 1'd1);

assign ret_V_13_fu_1074_p2 = (ap_phi_mux_lhs_V_4_phi_fu_760_p4 ^ 1'd1);

assign ret_V_14_fu_1020_p2 = (ap_phi_mux_lhs_V_5_phi_fu_727_p4 ^ 1'd1);

assign ret_V_15_fu_1026_p2 = (ap_phi_mux_lhs_V_7_phi_fu_683_p4 ^ 1'd1);

assign ret_V_16_fu_1092_p2 = (ap_phi_mux_lhs_V_12_phi_fu_617_p4 ^ 1'd1);

assign ret_V_17_fu_1206_p2 = (xor_ln48_2_fu_1200_p2 ^ ap_phi_mux_lhs_V_13_phi_fu_606_p4);

assign ret_V_18_fu_1306_p2 = (or_ln48_12_fu_1300_p2 ^ ap_phi_mux_lhs_V_11_phi_fu_639_p4);

assign ret_V_19_fu_1560_p2 = (or_ln48_35_fu_1554_p2 ^ ap_phi_mux_lhs_V_6_phi_fu_716_p4);

assign ret_V_20_fu_1682_p3 = ((or_ln48_47_fu_1668_p2[0:0] == 1'b1) ? ret_V_13_fu_1074_p2 : select_ln48_9_fu_1674_p3);

assign ret_V_21_fu_1772_p2 = (or_ln48_55_fu_1766_p2 ^ ap_phi_mux_lhs_V_3_phi_fu_793_p4);

assign ret_V_22_fu_1904_p3 = ((or_ln48_29_fu_1506_p2[0:0] == 1'b1) ? ret_V_fu_1002_p2 : select_ln48_21_fu_1896_p3);

assign ret_V_fu_1002_p2 = (ap_phi_mux_lhs_V_1_phi_fu_859_p4 ^ 1'd1);

assign select_ln48_11_fu_1690_p3 = ((and_ln48_1_fu_1226_p2[0:0] == 1'b1) ? xor_ln1499_9_fu_1044_p2 : ap_phi_mux_mux_case_157691767_phi_fu_771_p4);

assign select_ln48_13_fu_1778_p3 = ((and_ln48_fu_1212_p2[0:0] == 1'b1) ? ret_V_12_fu_1068_p2 : ap_phi_mux_lhs_V_2_phi_fu_804_p4);

assign select_ln48_15_fu_1800_p3 = ((and_ln48_1_fu_1226_p2[0:0] == 1'b1) ? xor_ln1499_8_fu_1038_p2 : ap_phi_mux_mux_case_115751755_phi_fu_815_p4);

assign select_ln48_17_fu_1816_p3 = ((and_ln48_2_fu_1252_p2[0:0] == 1'b1) ? xor_ln1499_3_fu_1008_p2 : ap_phi_mux_mux_case_105741752_phi_fu_826_p4);

assign select_ln48_19_fu_1832_p3 = ((and_ln48_3_fu_1288_p2[0:0] == 1'b1) ? xor_ln1499_12_fu_1062_p2 : ap_phi_mux_mux_case_95731749_phi_fu_837_p4);

assign select_ln48_21_fu_1896_p3 = ((or_ln48_61_fu_1890_p2[0:0] == 1'b1) ? ap_phi_mux_lhs_V_1_phi_fu_859_p4 : ret_V_10_fu_1884_p2);

assign select_ln48_23_fu_1924_p3 = ((and_ln48_1_fu_1226_p2[0:0] == 1'b1) ? xor_ln1499_1_fu_996_p2 : and_ln48_9_fu_1918_p2);

assign select_ln48_2_fu_1432_p3 = ((or_ln48_21_fu_1420_p2[0:0] == 1'b1) ? ret_V_15_fu_1026_p2 : ap_phi_mux_lhs_V_7_phi_fu_683_p4);

assign select_ln48_4_fu_1454_p3 = ((and_ln48_1_fu_1226_p2[0:0] == 1'b1) ? xor_ln1499_10_fu_1050_p2 : ap_phi_mux_mux_case_2210601788_phi_fu_694_p4);

assign select_ln48_6_fu_1572_p3 = ((and_ln48_fu_1212_p2[0:0] == 1'b1) ? ret_V_14_fu_1020_p2 : ap_phi_mux_lhs_V_5_phi_fu_727_p4);

assign select_ln48_9_fu_1674_p3 = ((and_ln48_fu_1212_p2[0:0] == 1'b1) ? ret_V_13_fu_1074_p2 : ap_phi_mux_lhs_V_4_phi_fu_760_p4);

assign select_ln48_fu_1218_p3 = ((and_ln48_fu_1212_p2[0:0] == 1'b1) ? ret_V_16_fu_1092_p2 : ap_phi_mux_lhs_V_12_phi_fu_617_p4);

assign trunc_ln1019_fu_964_p1 = ap_sig_allocacmp_i[2:0];

assign xor_ln1019_fu_1140_p2 = (lhs_V_fu_968_p10 ^ 1'd1);

assign xor_ln1499_10_fu_1050_p2 = (ap_phi_mux_mux_case_2210601788_phi_fu_694_p4 ^ 1'd1);

assign xor_ln1499_11_fu_1056_p2 = (ap_phi_mux_conv3_i_15121731_phi_fu_903_p4 ^ 1'd1);

assign xor_ln1499_12_fu_1062_p2 = (ap_phi_mux_mux_case_95731749_phi_fu_837_p4 ^ 1'd1);

assign xor_ln1499_15_fu_1080_p2 = (ap_phi_mux_conv3_i_15261734_phi_fu_892_p4 ^ 1'd1);

assign xor_ln1499_16_fu_1086_p2 = (ap_phi_mux_conv3_i_15401737_phi_fu_881_p4 ^ 1'd1);

assign xor_ln1499_1_fu_996_p2 = (ap_phi_mux_conv3_i_65811740_phi_fu_870_p4 ^ 1'd1);

assign xor_ln1499_3_fu_1008_p2 = (ap_phi_mux_mux_case_105741752_phi_fu_826_p4 ^ 1'd1);

assign xor_ln1499_4_fu_1014_p2 = (ap_phi_mux_mux_case_188661776_phi_fu_738_p4 ^ 1'd1);

assign xor_ln1499_7_fu_1032_p2 = (ap_phi_mux_conv3_i_14981728_phi_fu_914_p4 ^ 1'd1);

assign xor_ln1499_8_fu_1038_p2 = (ap_phi_mux_mux_case_115751755_phi_fu_815_p4 ^ 1'd1);

assign xor_ln1499_9_fu_1044_p2 = (ap_phi_mux_mux_case_157691767_phi_fu_771_p4 ^ 1'd1);

assign xor_ln1499_fu_990_p2 = (ap_phi_mux_conv3_i_14841725_phi_fu_925_p4 ^ 1'd1);

assign xor_ln48_10_fu_1354_p2 = (or_ln48_16_fu_1348_p2 ^ 1'd1);

assign xor_ln48_13_fu_1488_p2 = (or_ln48_26_fu_1482_p2 ^ 1'd1);

assign xor_ln48_15_fu_1542_p2 = (or_ln48_33_fu_1536_p2 ^ 1'd1);

assign xor_ln48_17_fu_1638_p2 = (or_ln48_43_fu_1632_p2 ^ 1'd1);

assign xor_ln48_19_fu_1724_p2 = (or_ln48_50_fu_1718_p2 ^ 1'd1);

assign xor_ln48_21_fu_1754_p2 = (or_ln48_53_fu_1748_p2 ^ 1'd1);

assign xor_ln48_23_fu_1860_p2 = (or_ln48_58_fu_1854_p2 ^ 1'd1);

assign xor_ln48_25_fu_1912_p2 = (1'd1 ^ and_ln48_fu_1212_p2);

assign xor_ln48_26_fu_1940_p2 = (1'd1 ^ and_ln48_1_fu_1226_p2);

assign xor_ln48_27_fu_1960_p2 = (1'd1 ^ and_ln48_2_fu_1252_p2);

assign xor_ln48_28_fu_1980_p2 = (1'd1 ^ and_ln48_3_fu_1288_p2);

assign xor_ln48_29_fu_2000_p2 = (1'd1 ^ and_ln48_4_fu_1324_p2);

assign xor_ln48_2_fu_1200_p2 = (or_ln48_5_fu_1176_p2 ^ 1'd1);

assign xor_ln48_30_fu_2020_p2 = (1'd1 ^ and_ln48_5_fu_1360_p2);

assign xor_ln48_31_fu_2040_p2 = (1'd1 ^ and_ln48_7_fu_1402_p2);

assign xor_ln48_4_fu_1246_p2 = (or_ln48_7_fu_1240_p2 ^ 1'd1);

assign xor_ln48_6_fu_1282_p2 = (or_ln48_10_fu_1276_p2 ^ 1'd1);

assign xor_ln48_8_fu_1318_p2 = (or_ln48_13_fu_1312_p2 ^ 1'd1);

assign xor_ln48_fu_1188_p2 = (or_ln48_6_fu_1182_p2 ^ 1'd1);

endmodule //crc24a_crc24a_Pipeline_VITIS_LOOP_43_3
