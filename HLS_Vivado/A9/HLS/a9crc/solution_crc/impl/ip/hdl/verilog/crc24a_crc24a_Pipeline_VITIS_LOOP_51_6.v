// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
// Version: 2022.2.2
// Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module crc24a_crc24a_Pipeline_VITIS_LOOP_51_6 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        trunc_ln3,
        icmp_ln43_lcssa,
        f_V_address0,
        f_V_ce0,
        f_V_we0,
        f_V_d0,
        crc_V_65_reload,
        crc_V_66_reload,
        crc_V_67_reload,
        crc_V_68_reload,
        crc_V_69_reload,
        crc_V_70_reload,
        crc_V_71_reload,
        crc_V_135_reload,
        crc_V_73_reload,
        crc_V_74_reload,
        crc_V_75_reload,
        crc_V_76_reload,
        crc_V_136_reload,
        crc_V_137_reload,
        crc_V_79_reload,
        crc_V_80_reload,
        crc_V_138_reload,
        crc_V_82_reload,
        crc_V_83_reload,
        crc_V_139_reload,
        crc_V_140_reload,
        crc_V_86_reload,
        crc_V_87_reload,
        crc_V_141_reload,
        crc_V_142_reload,
        crc_V_143_reload,
        crc_V_144_reload,
        crc_V_145_reload,
        crc_V_93_reload,
        crc_V_146_reload,
        crc_V_147_reload,
        crc_V_96_reload
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [4:0] trunc_ln3;
input  [0:0] icmp_ln43_lcssa;
output  [4:0] f_V_address0;
output   f_V_ce0;
output   f_V_we0;
output  [0:0] f_V_d0;
input  [0:0] crc_V_65_reload;
input  [0:0] crc_V_66_reload;
input  [0:0] crc_V_67_reload;
input  [0:0] crc_V_68_reload;
input  [0:0] crc_V_69_reload;
input  [0:0] crc_V_70_reload;
input  [0:0] crc_V_71_reload;
input  [0:0] crc_V_135_reload;
input  [0:0] crc_V_73_reload;
input  [0:0] crc_V_74_reload;
input  [0:0] crc_V_75_reload;
input  [0:0] crc_V_76_reload;
input  [0:0] crc_V_136_reload;
input  [0:0] crc_V_137_reload;
input  [0:0] crc_V_79_reload;
input  [0:0] crc_V_80_reload;
input  [0:0] crc_V_138_reload;
input  [0:0] crc_V_82_reload;
input  [0:0] crc_V_83_reload;
input  [0:0] crc_V_139_reload;
input  [0:0] crc_V_140_reload;
input  [0:0] crc_V_86_reload;
input  [0:0] crc_V_87_reload;
input  [0:0] crc_V_141_reload;
input  [0:0] crc_V_142_reload;
input  [0:0] crc_V_143_reload;
input  [0:0] crc_V_144_reload;
input  [0:0] crc_V_145_reload;
input  [0:0] crc_V_93_reload;
input  [0:0] crc_V_146_reload;
input  [0:0] crc_V_147_reload;
input  [0:0] crc_V_96_reload;

reg ap_idle;
reg f_V_ce0;
reg f_V_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln51_fu_329_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] zext_ln51_fu_341_p1;
reg   [4:0] i_fu_100;
wire   [4:0] add_ln51_fu_335_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_i_2;
wire   [0:0] tmp_1_fu_360_p34;
wire   [4:0] add_ln53_fu_346_p2;
wire   [4:0] tmp_1_fu_360_p33;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

crc24a_mux_325_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 1 ),
    .din5_WIDTH( 1 ),
    .din6_WIDTH( 1 ),
    .din7_WIDTH( 1 ),
    .din8_WIDTH( 1 ),
    .din9_WIDTH( 1 ),
    .din10_WIDTH( 1 ),
    .din11_WIDTH( 1 ),
    .din12_WIDTH( 1 ),
    .din13_WIDTH( 1 ),
    .din14_WIDTH( 1 ),
    .din15_WIDTH( 1 ),
    .din16_WIDTH( 1 ),
    .din17_WIDTH( 1 ),
    .din18_WIDTH( 1 ),
    .din19_WIDTH( 1 ),
    .din20_WIDTH( 1 ),
    .din21_WIDTH( 1 ),
    .din22_WIDTH( 1 ),
    .din23_WIDTH( 1 ),
    .din24_WIDTH( 1 ),
    .din25_WIDTH( 1 ),
    .din26_WIDTH( 1 ),
    .din27_WIDTH( 1 ),
    .din28_WIDTH( 1 ),
    .din29_WIDTH( 1 ),
    .din30_WIDTH( 1 ),
    .din31_WIDTH( 1 ),
    .din32_WIDTH( 5 ),
    .dout_WIDTH( 1 ))
mux_325_1_1_1_U137(
    .din0(crc_V_65_reload),
    .din1(crc_V_66_reload),
    .din2(crc_V_67_reload),
    .din3(crc_V_68_reload),
    .din4(crc_V_69_reload),
    .din5(crc_V_70_reload),
    .din6(crc_V_71_reload),
    .din7(crc_V_135_reload),
    .din8(crc_V_73_reload),
    .din9(crc_V_74_reload),
    .din10(crc_V_75_reload),
    .din11(crc_V_76_reload),
    .din12(crc_V_136_reload),
    .din13(crc_V_137_reload),
    .din14(crc_V_79_reload),
    .din15(crc_V_80_reload),
    .din16(crc_V_138_reload),
    .din17(crc_V_82_reload),
    .din18(crc_V_83_reload),
    .din19(crc_V_139_reload),
    .din20(crc_V_140_reload),
    .din21(crc_V_86_reload),
    .din22(crc_V_87_reload),
    .din23(crc_V_141_reload),
    .din24(crc_V_142_reload),
    .din25(crc_V_143_reload),
    .din26(crc_V_144_reload),
    .din27(crc_V_145_reload),
    .din28(crc_V_93_reload),
    .din29(crc_V_146_reload),
    .din30(crc_V_147_reload),
    .din31(crc_V_96_reload),
    .din32(tmp_1_fu_360_p33),
    .dout(tmp_1_fu_360_p34)
);

crc24a_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        if ((icmp_ln51_fu_329_p2 == 1'd0)) begin
            i_fu_100 <= add_ln51_fu_335_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_100 <= 5'd0;
        end
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln51_fu_329_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i_2 = 5'd0;
    end else begin
        ap_sig_allocacmp_i_2 = i_fu_100;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        f_V_ce0 = 1'b1;
    end else begin
        f_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln51_fu_329_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        f_V_we0 = 1'b1;
    end else begin
        f_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln51_fu_335_p2 = (ap_sig_allocacmp_i_2 + 5'd1);

assign add_ln53_fu_346_p2 = (ap_sig_allocacmp_i_2 + trunc_ln3);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign f_V_address0 = zext_ln51_fu_341_p1;

assign f_V_d0 = tmp_1_fu_360_p34;

assign icmp_ln51_fu_329_p2 = ((ap_sig_allocacmp_i_2 == 5'd24) ? 1'b1 : 1'b0);

assign tmp_1_fu_360_p33 = ((icmp_ln43_lcssa[0:0] == 1'b1) ? ap_sig_allocacmp_i_2 : add_ln53_fu_346_p2);

assign zext_ln51_fu_341_p1 = ap_sig_allocacmp_i_2;

endmodule //crc24a_crc24a_Pipeline_VITIS_LOOP_51_6
