// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
// Version: 2022.2.2
// Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module crc24a_crc24a_Pipeline_loop2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        crc_V_85,
        crc_V_84,
        crc_V_83,
        crc_V_82,
        crc_V_81,
        crc_V_80,
        crc_V_79,
        crc_V_78,
        last,
        crc_V_31_out,
        crc_V_31_out_ap_vld,
        crc_V_98_out,
        crc_V_98_out_ap_vld,
        crc_V_97_out,
        crc_V_97_out_ap_vld,
        crc_V_28_out,
        crc_V_28_out_ap_vld,
        crc_V_96_out,
        crc_V_96_out_ap_vld,
        crc_V_95_out,
        crc_V_95_out_ap_vld,
        crc_V_94_out,
        crc_V_94_out_ap_vld,
        crc_V_93_out,
        crc_V_93_out_ap_vld,
        crc_V_92_out,
        crc_V_92_out_ap_vld,
        crc_V_22_out,
        crc_V_22_out_ap_vld,
        crc_V_21_out,
        crc_V_21_out_ap_vld,
        crc_V_91_out,
        crc_V_91_out_ap_vld,
        crc_V_90_out,
        crc_V_90_out_ap_vld,
        crc_V_18_out,
        crc_V_18_out_ap_vld,
        crc_V_17_out,
        crc_V_17_out_ap_vld,
        crc_V_89_out,
        crc_V_89_out_ap_vld,
        crc_V_15_out,
        crc_V_15_out_ap_vld,
        crc_V_14_out,
        crc_V_14_out_ap_vld,
        crc_V_88_out,
        crc_V_88_out_ap_vld,
        crc_V_87_out,
        crc_V_87_out_ap_vld,
        crc_V_11_out,
        crc_V_11_out_ap_vld,
        crc_V_10_out,
        crc_V_10_out_ap_vld,
        crc_V_9_out,
        crc_V_9_out_ap_vld,
        crc_V_8_out,
        crc_V_8_out_ap_vld,
        crc_V_86_out,
        crc_V_86_out_ap_vld,
        crc_V_6_out,
        crc_V_6_out_ap_vld,
        crc_V_5_out,
        crc_V_5_out_ap_vld,
        crc_V_4_out,
        crc_V_4_out_ap_vld,
        crc_V_3_out,
        crc_V_3_out_ap_vld,
        crc_V_2_out,
        crc_V_2_out_ap_vld,
        crc_V_1_out,
        crc_V_1_out_ap_vld,
        crc_V_out,
        crc_V_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [0:0] crc_V_85;
input  [0:0] crc_V_84;
input  [0:0] crc_V_83;
input  [0:0] crc_V_82;
input  [0:0] crc_V_81;
input  [0:0] crc_V_80;
input  [0:0] crc_V_79;
input  [0:0] crc_V_78;
input  [0:0] last;
output  [0:0] crc_V_31_out;
output   crc_V_31_out_ap_vld;
output  [0:0] crc_V_98_out;
output   crc_V_98_out_ap_vld;
output  [0:0] crc_V_97_out;
output   crc_V_97_out_ap_vld;
output  [0:0] crc_V_28_out;
output   crc_V_28_out_ap_vld;
output  [0:0] crc_V_96_out;
output   crc_V_96_out_ap_vld;
output  [0:0] crc_V_95_out;
output   crc_V_95_out_ap_vld;
output  [0:0] crc_V_94_out;
output   crc_V_94_out_ap_vld;
output  [0:0] crc_V_93_out;
output   crc_V_93_out_ap_vld;
output  [0:0] crc_V_92_out;
output   crc_V_92_out_ap_vld;
output  [0:0] crc_V_22_out;
output   crc_V_22_out_ap_vld;
output  [0:0] crc_V_21_out;
output   crc_V_21_out_ap_vld;
output  [0:0] crc_V_91_out;
output   crc_V_91_out_ap_vld;
output  [0:0] crc_V_90_out;
output   crc_V_90_out_ap_vld;
output  [0:0] crc_V_18_out;
output   crc_V_18_out_ap_vld;
output  [0:0] crc_V_17_out;
output   crc_V_17_out_ap_vld;
output  [0:0] crc_V_89_out;
output   crc_V_89_out_ap_vld;
output  [0:0] crc_V_15_out;
output   crc_V_15_out_ap_vld;
output  [0:0] crc_V_14_out;
output   crc_V_14_out_ap_vld;
output  [0:0] crc_V_88_out;
output   crc_V_88_out_ap_vld;
output  [0:0] crc_V_87_out;
output   crc_V_87_out_ap_vld;
output  [0:0] crc_V_11_out;
output   crc_V_11_out_ap_vld;
output  [0:0] crc_V_10_out;
output   crc_V_10_out_ap_vld;
output  [0:0] crc_V_9_out;
output   crc_V_9_out_ap_vld;
output  [0:0] crc_V_8_out;
output   crc_V_8_out_ap_vld;
output  [0:0] crc_V_86_out;
output   crc_V_86_out_ap_vld;
output  [0:0] crc_V_6_out;
output   crc_V_6_out_ap_vld;
output  [0:0] crc_V_5_out;
output   crc_V_5_out_ap_vld;
output  [0:0] crc_V_4_out;
output   crc_V_4_out_ap_vld;
output  [0:0] crc_V_3_out;
output   crc_V_3_out_ap_vld;
output  [0:0] crc_V_2_out;
output   crc_V_2_out_ap_vld;
output  [0:0] crc_V_1_out;
output   crc_V_1_out_ap_vld;
output  [0:0] crc_V_out;
output   crc_V_out_ap_vld;

reg ap_idle;
reg crc_V_31_out_ap_vld;
reg crc_V_98_out_ap_vld;
reg crc_V_97_out_ap_vld;
reg crc_V_28_out_ap_vld;
reg crc_V_96_out_ap_vld;
reg crc_V_95_out_ap_vld;
reg crc_V_94_out_ap_vld;
reg crc_V_93_out_ap_vld;
reg crc_V_92_out_ap_vld;
reg crc_V_22_out_ap_vld;
reg crc_V_21_out_ap_vld;
reg crc_V_91_out_ap_vld;
reg crc_V_90_out_ap_vld;
reg crc_V_18_out_ap_vld;
reg crc_V_17_out_ap_vld;
reg crc_V_89_out_ap_vld;
reg crc_V_15_out_ap_vld;
reg crc_V_14_out_ap_vld;
reg crc_V_88_out_ap_vld;
reg crc_V_87_out_ap_vld;
reg crc_V_11_out_ap_vld;
reg crc_V_10_out_ap_vld;
reg crc_V_9_out_ap_vld;
reg crc_V_8_out_ap_vld;
reg crc_V_86_out_ap_vld;
reg crc_V_6_out_ap_vld;
reg crc_V_5_out_ap_vld;
reg crc_V_4_out_ap_vld;
reg crc_V_3_out_ap_vld;
reg crc_V_2_out_ap_vld;
reg crc_V_1_out_ap_vld;
reg crc_V_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln22_fu_770_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [0:0] crc_V_31_reg_410;
reg   [0:0] crc_V_90_reg_421;
reg   [0:0] crc_V_89_reg_432;
reg   [0:0] crc_V_28_reg_443;
reg   [0:0] crc_V_88_reg_454;
reg   [0:0] crc_V_87_reg_465;
reg   [0:0] crc_V_86_reg_476;
reg   [0:0] crc_V_77_reg_487;
reg   [0:0] crc_V_76_reg_498;
reg   [0:0] crc_V_22_reg_509;
reg   [0:0] crc_V_21_reg_520;
reg   [0:0] crc_V_75_reg_531;
reg   [0:0] crc_V_74_reg_542;
reg   [0:0] crc_V_18_reg_553;
reg   [0:0] crc_V_17_reg_564;
reg   [0:0] crc_V_73_reg_575;
reg   [0:0] crc_V_15_reg_586;
reg   [0:0] crc_V_14_reg_597;
reg   [0:0] crc_V_72_reg_608;
reg   [0:0] crc_V_71_reg_619;
reg   [0:0] crc_V_11_reg_630;
reg   [0:0] crc_V_10_reg_641;
reg   [0:0] crc_V_9_reg_652;
reg   [0:0] crc_V_8_reg_663;
reg   [0:0] crc_V_70_reg_674;
reg   [0:0] crc_V_6_reg_685;
reg   [0:0] crc_V_5_reg_696;
reg   [0:0] crc_V_4_reg_707;
reg   [0:0] crc_V_3_reg_718;
reg   [0:0] crc_V_2_reg_729;
reg   [0:0] crc_V_1_reg_740;
reg   [0:0] crc_V_reg_751;
wire   [0:0] crc_V_69_fu_1018_p2;
wire   [0:0] crc_V_38_fu_1042_p2;
wire   [0:0] crc_V_68_fu_1062_p3;
wire   [0:0] crc_V_67_fu_1082_p2;
wire   [0:0] crc_V_66_fu_1130_p2;
wire   [0:0] crc_V_65_fu_1172_p2;
wire   [0:0] crc_V_64_fu_1214_p2;
wire   [0:0] crc_V_63_fu_1232_p2;
wire   [0:0] crc_V_62_fu_1276_p3;
wire   [0:0] crc_V_61_fu_1310_p3;
wire   [0:0] crc_V_60_fu_1366_p2;
wire   [0:0] crc_V_59_fu_1414_p2;
wire   [0:0] crc_V_58_fu_1434_p3;
wire   [0:0] crc_V_57_fu_1448_p3;
wire   [0:0] crc_V_56_fu_1504_p2;
wire   [0:0] crc_V_55_fu_1518_p3;
wire   [0:0] crc_V_54_fu_1534_p3;
wire   [0:0] crc_V_53_fu_1578_p2;
wire   [0:0] crc_V_52_fu_1608_p2;
wire   [0:0] crc_V_51_fu_1622_p3;
wire   [0:0] crc_V_50_fu_1644_p3;
wire   [0:0] crc_V_49_fu_1660_p3;
wire   [0:0] crc_V_48_fu_1676_p3;
wire   [0:0] crc_V_47_fu_1714_p2;
wire   [0:0] crc_V_46_fu_1740_p3;
wire   [0:0] crc_V_45_fu_1770_p2;
wire   [0:0] crc_V_44_fu_1788_p3;
wire   [0:0] crc_V_43_fu_1808_p3;
wire   [0:0] crc_V_42_fu_1828_p3;
wire   [0:0] crc_V_41_fu_1848_p3;
wire   [0:0] crc_V_40_fu_1868_p3;
wire   [0:0] crc_V_39_fu_1882_p2;
reg   [0:0] ap_phi_mux_crc_V_31_phi_fu_413_p4;
wire    ap_loop_init;
reg   [0:0] ap_phi_mux_crc_V_90_phi_fu_424_p4;
reg   [0:0] ap_phi_mux_crc_V_89_phi_fu_435_p4;
reg   [0:0] ap_phi_mux_crc_V_28_phi_fu_446_p4;
reg   [0:0] ap_phi_mux_crc_V_88_phi_fu_457_p4;
reg   [0:0] ap_phi_mux_crc_V_87_phi_fu_468_p4;
reg   [0:0] ap_phi_mux_crc_V_86_phi_fu_479_p4;
reg   [0:0] ap_phi_mux_crc_V_77_phi_fu_490_p4;
reg   [0:0] ap_phi_mux_crc_V_76_phi_fu_501_p4;
reg   [0:0] ap_phi_mux_crc_V_22_phi_fu_512_p4;
reg   [0:0] ap_phi_mux_crc_V_21_phi_fu_523_p4;
reg   [0:0] ap_phi_mux_crc_V_75_phi_fu_534_p4;
reg   [0:0] ap_phi_mux_crc_V_74_phi_fu_545_p4;
reg   [0:0] ap_phi_mux_crc_V_18_phi_fu_556_p4;
reg   [0:0] ap_phi_mux_crc_V_17_phi_fu_567_p4;
reg   [0:0] ap_phi_mux_crc_V_73_phi_fu_578_p4;
reg   [0:0] ap_phi_mux_crc_V_15_phi_fu_589_p4;
reg   [0:0] ap_phi_mux_crc_V_14_phi_fu_600_p4;
reg   [0:0] ap_phi_mux_crc_V_72_phi_fu_611_p4;
reg   [0:0] ap_phi_mux_crc_V_71_phi_fu_622_p4;
reg   [0:0] ap_phi_mux_crc_V_11_phi_fu_633_p4;
reg   [0:0] ap_phi_mux_crc_V_10_phi_fu_644_p4;
reg   [0:0] ap_phi_mux_crc_V_9_phi_fu_655_p4;
reg   [0:0] ap_phi_mux_crc_V_8_phi_fu_666_p4;
reg   [0:0] ap_phi_mux_crc_V_70_phi_fu_677_p4;
reg   [0:0] ap_phi_mux_crc_V_6_phi_fu_688_p4;
reg   [0:0] ap_phi_mux_crc_V_5_phi_fu_699_p4;
reg   [0:0] ap_phi_mux_crc_V_4_phi_fu_710_p4;
reg   [0:0] ap_phi_mux_crc_V_3_phi_fu_721_p4;
reg   [0:0] ap_phi_mux_crc_V_2_phi_fu_732_p4;
reg   [0:0] ap_phi_mux_crc_V_1_phi_fu_743_p4;
reg   [0:0] ap_phi_mux_crc_V_phi_fu_754_p4;
reg   [3:0] k_fu_128;
wire   [3:0] add_ln22_fu_776_p2;
reg   [3:0] ap_sig_allocacmp_i;
wire   [2:0] trunc_ln1019_fu_782_p1;
wire   [0:0] lhs_V_fu_786_p10;
wire   [0:0] and_ln24_fu_808_p2;
wire   [0:0] icmp_ln28_fu_922_p2;
wire   [0:0] xor_ln24_fu_964_p2;
wire   [0:0] or_ln28_fu_970_p2;
wire   [0:0] icmp_ln28_1_fu_928_p2;
wire   [0:0] or_ln28_1_fu_976_p2;
wire   [0:0] icmp_ln28_2_fu_934_p2;
wire   [0:0] or_ln28_2_fu_982_p2;
wire   [0:0] icmp_ln28_3_fu_940_p2;
wire   [0:0] icmp_ln28_4_fu_946_p2;
wire   [0:0] icmp_ln28_5_fu_952_p2;
wire   [0:0] or_ln28_4_fu_994_p2;
wire   [0:0] or_ln28_3_fu_988_p2;
wire   [0:0] or_ln28_5_fu_1000_p2;
wire   [0:0] icmp_ln28_6_fu_958_p2;
wire   [0:0] or_ln28_6_fu_1006_p2;
wire   [0:0] xor_ln28_fu_1012_p2;
wire   [0:0] and_ln28_fu_1030_p2;
wire   [0:0] xor_ln28_2_fu_1024_p2;
wire   [0:0] or_ln28_7_fu_1036_p2;
wire   [0:0] and_ln28_1_fu_1048_p2;
wire   [0:0] ret_V_5_fu_916_p2;
wire   [0:0] select_ln28_fu_1054_p3;
wire   [0:0] or_ln28_8_fu_1070_p2;
wire   [0:0] xor_ln28_4_fu_1076_p2;
wire   [0:0] or_ln28_9_fu_1088_p2;
wire   [0:0] and_ln28_2_fu_1100_p2;
wire   [0:0] xor_ln28_6_fu_1094_p2;
wire   [0:0] and_ln28_3_fu_1106_p2;
wire   [0:0] or_ln28_11_fu_1118_p2;
wire   [0:0] or_ln28_10_fu_1112_p2;
wire   [0:0] or_ln28_12_fu_1124_p2;
wire   [0:0] or_ln28_13_fu_1136_p2;
wire   [0:0] xor_ln28_8_fu_1142_p2;
wire   [0:0] and_ln28_4_fu_1148_p2;
wire   [0:0] or_ln28_15_fu_1160_p2;
wire   [0:0] or_ln28_14_fu_1154_p2;
wire   [0:0] or_ln28_16_fu_1166_p2;
wire   [0:0] or_ln28_17_fu_1178_p2;
wire   [0:0] xor_ln28_10_fu_1184_p2;
wire   [0:0] and_ln28_5_fu_1190_p2;
wire   [0:0] or_ln28_19_fu_1202_p2;
wire   [0:0] or_ln28_18_fu_1196_p2;
wire   [0:0] or_ln28_20_fu_1208_p2;
wire   [0:0] icmp_ln28_7_fu_1220_p2;
wire   [0:0] and_ln28_6_fu_1226_p2;
wire   [0:0] and_ln28_7_fu_1238_p2;
wire   [0:0] or_ln28_21_fu_1244_p2;
wire   [0:0] or_ln28_22_fu_1250_p2;
wire   [0:0] or_ln28_23_fu_1256_p2;
wire   [0:0] ret_V_4_fu_850_p2;
wire   [0:0] or_ln28_24_fu_1262_p2;
wire   [0:0] select_ln28_2_fu_1268_p3;
wire   [0:0] xor_ln1499_10_fu_874_p2;
wire   [0:0] or_ln28_25_fu_1284_p2;
wire   [0:0] or_ln28_26_fu_1290_p2;
wire   [0:0] or_ln28_27_fu_1304_p2;
wire   [0:0] select_ln28_4_fu_1296_p3;
wire   [0:0] or_ln28_28_fu_1318_p2;
wire   [0:0] or_ln28_29_fu_1324_p2;
wire   [0:0] xor_ln28_13_fu_1330_p2;
wire   [0:0] or_ln28_30_fu_1336_p2;
wire   [0:0] or_ln28_32_fu_1348_p2;
wire   [0:0] or_ln28_33_fu_1354_p2;
wire   [0:0] or_ln28_31_fu_1342_p2;
wire   [0:0] or_ln28_34_fu_1360_p2;
wire   [0:0] or_ln28_35_fu_1372_p2;
wire   [0:0] or_ln28_36_fu_1378_p2;
wire   [0:0] xor_ln28_15_fu_1384_p2;
wire   [0:0] or_ln28_37_fu_1390_p2;
wire   [0:0] or_ln28_39_fu_1402_p2;
wire   [0:0] or_ln28_38_fu_1396_p2;
wire   [0:0] or_ln28_40_fu_1408_p2;
wire   [0:0] ret_V_3_fu_844_p2;
wire   [0:0] or_ln28_41_fu_1428_p2;
wire   [0:0] select_ln28_6_fu_1420_p3;
wire   [0:0] or_ln28_42_fu_1442_p2;
wire   [0:0] xor_ln1499_4_fu_838_p2;
wire   [0:0] or_ln28_43_fu_1456_p2;
wire   [0:0] or_ln28_45_fu_1468_p2;
wire   [0:0] or_ln28_44_fu_1462_p2;
wire   [0:0] or_ln28_46_fu_1474_p2;
wire   [0:0] xor_ln28_17_fu_1480_p2;
wire   [0:0] or_ln28_48_fu_1492_p2;
wire   [0:0] or_ln28_47_fu_1486_p2;
wire   [0:0] or_ln28_49_fu_1498_p2;
wire   [0:0] ret_V_2_fu_898_p2;
wire   [0:0] select_ln28_9_fu_1510_p3;
wire   [0:0] xor_ln1499_9_fu_868_p2;
wire   [0:0] select_ln28_11_fu_1526_p3;
wire   [0:0] or_ln28_50_fu_1542_p2;
wire   [0:0] or_ln28_51_fu_1548_p2;
wire   [0:0] or_ln28_52_fu_1554_p2;
wire   [0:0] xor_ln28_19_fu_1560_p2;
wire   [0:0] or_ln28_53_fu_1566_p2;
wire   [0:0] or_ln28_54_fu_1572_p2;
wire   [0:0] or_ln28_55_fu_1584_p2;
wire   [0:0] xor_ln28_21_fu_1590_p2;
wire   [0:0] or_ln28_56_fu_1596_p2;
wire   [0:0] or_ln28_57_fu_1602_p2;
wire   [0:0] ret_V_1_fu_892_p2;
wire   [0:0] select_ln28_13_fu_1614_p3;
wire   [0:0] xor_ln1499_8_fu_862_p2;
wire   [0:0] or_ln28_58_fu_1630_p2;
wire   [0:0] select_ln28_15_fu_1636_p3;
wire   [0:0] xor_ln1499_3_fu_832_p2;
wire   [0:0] select_ln28_17_fu_1652_p3;
wire   [0:0] xor_ln1499_12_fu_886_p2;
wire   [0:0] select_ln28_19_fu_1668_p3;
wire   [0:0] or_ln28_59_fu_1684_p2;
wire   [0:0] or_ln28_60_fu_1690_p2;
wire   [0:0] xor_ln28_23_fu_1696_p2;
wire   [0:0] or_ln28_61_fu_1702_p2;
wire   [0:0] or_ln28_62_fu_1708_p2;
wire   [0:0] or_ln28_63_fu_1720_p2;
wire   [0:0] ret_V_fu_826_p2;
wire   [0:0] and_ln28_8_fu_1726_p2;
wire   [0:0] select_ln28_21_fu_1732_p3;
wire   [0:0] xor_ln1499_1_fu_820_p2;
wire   [0:0] select_ln28_23_fu_1748_p3;
wire   [0:0] select_ln28_24_fu_1756_p3;
wire   [0:0] xor_ln28_25_fu_1764_p2;
wire   [0:0] xor_ln28_26_fu_1776_p2;
wire   [0:0] xor_ln1499_16_fu_910_p2;
wire   [0:0] and_ln28_10_fu_1782_p2;
wire   [0:0] xor_ln28_27_fu_1796_p2;
wire   [0:0] xor_ln1499_15_fu_904_p2;
wire   [0:0] and_ln28_11_fu_1802_p2;
wire   [0:0] xor_ln28_28_fu_1816_p2;
wire   [0:0] xor_ln1499_11_fu_880_p2;
wire   [0:0] and_ln28_12_fu_1822_p2;
wire   [0:0] xor_ln28_29_fu_1836_p2;
wire   [0:0] xor_ln1499_7_fu_856_p2;
wire   [0:0] and_ln28_13_fu_1842_p2;
wire   [0:0] xor_ln28_30_fu_1856_p2;
wire   [0:0] xor_ln1499_fu_814_p2;
wire   [0:0] and_ln28_14_fu_1862_p2;
wire   [0:0] xor_ln28_31_fu_1876_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

crc24a_mux_83_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 1 ),
    .din5_WIDTH( 1 ),
    .din6_WIDTH( 1 ),
    .din7_WIDTH( 1 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 1 ))
mux_83_1_1_1_U1(
    .din0(ap_phi_mux_crc_V_phi_fu_754_p4),
    .din1(ap_phi_mux_crc_V_1_phi_fu_743_p4),
    .din2(ap_phi_mux_crc_V_2_phi_fu_732_p4),
    .din3(ap_phi_mux_crc_V_3_phi_fu_721_p4),
    .din4(ap_phi_mux_crc_V_4_phi_fu_710_p4),
    .din5(ap_phi_mux_crc_V_5_phi_fu_699_p4),
    .din6(ap_phi_mux_crc_V_6_phi_fu_688_p4),
    .din7(ap_phi_mux_crc_V_70_phi_fu_677_p4),
    .din8(trunc_ln1019_fu_782_p1),
    .dout(lhs_V_fu_786_p10)
);

crc24a_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        if ((icmp_ln22_fu_770_p2 == 1'd0)) begin
            k_fu_128 <= add_ln22_fu_776_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            k_fu_128 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_fu_770_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        crc_V_10_reg_641 <= crc_V_49_fu_1660_p3;
        crc_V_11_reg_630 <= crc_V_50_fu_1644_p3;
        crc_V_14_reg_597 <= crc_V_53_fu_1578_p2;
        crc_V_15_reg_586 <= crc_V_54_fu_1534_p3;
        crc_V_17_reg_564 <= crc_V_56_fu_1504_p2;
        crc_V_18_reg_553 <= crc_V_57_fu_1448_p3;
        crc_V_1_reg_740 <= crc_V_40_fu_1868_p3;
        crc_V_21_reg_520 <= crc_V_60_fu_1366_p2;
        crc_V_22_reg_509 <= crc_V_61_fu_1310_p3;
        crc_V_28_reg_443 <= crc_V_67_fu_1082_p2;
        crc_V_2_reg_729 <= crc_V_41_fu_1848_p3;
        crc_V_31_reg_410 <= crc_V_69_fu_1018_p2;
        crc_V_3_reg_718 <= crc_V_42_fu_1828_p3;
        crc_V_4_reg_707 <= crc_V_43_fu_1808_p3;
        crc_V_5_reg_696 <= crc_V_44_fu_1788_p3;
        crc_V_6_reg_685 <= crc_V_45_fu_1770_p2;
        crc_V_70_reg_674 <= crc_V_46_fu_1740_p3;
        crc_V_71_reg_619 <= crc_V_51_fu_1622_p3;
        crc_V_72_reg_608 <= crc_V_52_fu_1608_p2;
        crc_V_73_reg_575 <= crc_V_55_fu_1518_p3;
        crc_V_74_reg_542 <= crc_V_58_fu_1434_p3;
        crc_V_75_reg_531 <= crc_V_59_fu_1414_p2;
        crc_V_76_reg_498 <= crc_V_62_fu_1276_p3;
        crc_V_77_reg_487 <= crc_V_63_fu_1232_p2;
        crc_V_86_reg_476 <= crc_V_64_fu_1214_p2;
        crc_V_87_reg_465 <= crc_V_65_fu_1172_p2;
        crc_V_88_reg_454 <= crc_V_66_fu_1130_p2;
        crc_V_89_reg_432 <= crc_V_68_fu_1062_p3;
        crc_V_8_reg_663 <= crc_V_47_fu_1714_p2;
        crc_V_90_reg_421 <= crc_V_38_fu_1042_p2;
        crc_V_9_reg_652 <= crc_V_48_fu_1676_p3;
        crc_V_reg_751 <= crc_V_39_fu_1882_p2;
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln22_fu_770_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_crc_V_10_phi_fu_644_p4 = 1'd0;
    end else begin
        ap_phi_mux_crc_V_10_phi_fu_644_p4 = crc_V_10_reg_641;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_crc_V_11_phi_fu_633_p4 = 1'd0;
    end else begin
        ap_phi_mux_crc_V_11_phi_fu_633_p4 = crc_V_11_reg_630;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_crc_V_14_phi_fu_600_p4 = 1'd0;
    end else begin
        ap_phi_mux_crc_V_14_phi_fu_600_p4 = crc_V_14_reg_597;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_crc_V_15_phi_fu_589_p4 = 1'd0;
    end else begin
        ap_phi_mux_crc_V_15_phi_fu_589_p4 = crc_V_15_reg_586;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_crc_V_17_phi_fu_567_p4 = 1'd0;
    end else begin
        ap_phi_mux_crc_V_17_phi_fu_567_p4 = crc_V_17_reg_564;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_crc_V_18_phi_fu_556_p4 = 1'd0;
    end else begin
        ap_phi_mux_crc_V_18_phi_fu_556_p4 = crc_V_18_reg_553;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_crc_V_1_phi_fu_743_p4 = crc_V_79;
    end else begin
        ap_phi_mux_crc_V_1_phi_fu_743_p4 = crc_V_1_reg_740;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_crc_V_21_phi_fu_523_p4 = 1'd0;
    end else begin
        ap_phi_mux_crc_V_21_phi_fu_523_p4 = crc_V_21_reg_520;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_crc_V_22_phi_fu_512_p4 = 1'd0;
    end else begin
        ap_phi_mux_crc_V_22_phi_fu_512_p4 = crc_V_22_reg_509;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_crc_V_28_phi_fu_446_p4 = 1'd0;
    end else begin
        ap_phi_mux_crc_V_28_phi_fu_446_p4 = crc_V_28_reg_443;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_crc_V_2_phi_fu_732_p4 = crc_V_80;
    end else begin
        ap_phi_mux_crc_V_2_phi_fu_732_p4 = crc_V_2_reg_729;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_crc_V_31_phi_fu_413_p4 = 1'd0;
    end else begin
        ap_phi_mux_crc_V_31_phi_fu_413_p4 = crc_V_31_reg_410;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_crc_V_3_phi_fu_721_p4 = crc_V_81;
    end else begin
        ap_phi_mux_crc_V_3_phi_fu_721_p4 = crc_V_3_reg_718;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_crc_V_4_phi_fu_710_p4 = crc_V_82;
    end else begin
        ap_phi_mux_crc_V_4_phi_fu_710_p4 = crc_V_4_reg_707;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_crc_V_5_phi_fu_699_p4 = crc_V_83;
    end else begin
        ap_phi_mux_crc_V_5_phi_fu_699_p4 = crc_V_5_reg_696;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_crc_V_6_phi_fu_688_p4 = crc_V_84;
    end else begin
        ap_phi_mux_crc_V_6_phi_fu_688_p4 = crc_V_6_reg_685;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_crc_V_70_phi_fu_677_p4 = crc_V_85;
    end else begin
        ap_phi_mux_crc_V_70_phi_fu_677_p4 = crc_V_70_reg_674;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_crc_V_71_phi_fu_622_p4 = 1'd0;
    end else begin
        ap_phi_mux_crc_V_71_phi_fu_622_p4 = crc_V_71_reg_619;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_crc_V_72_phi_fu_611_p4 = 1'd0;
    end else begin
        ap_phi_mux_crc_V_72_phi_fu_611_p4 = crc_V_72_reg_608;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_crc_V_73_phi_fu_578_p4 = 1'd0;
    end else begin
        ap_phi_mux_crc_V_73_phi_fu_578_p4 = crc_V_73_reg_575;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_crc_V_74_phi_fu_545_p4 = 1'd0;
    end else begin
        ap_phi_mux_crc_V_74_phi_fu_545_p4 = crc_V_74_reg_542;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_crc_V_75_phi_fu_534_p4 = 1'd0;
    end else begin
        ap_phi_mux_crc_V_75_phi_fu_534_p4 = crc_V_75_reg_531;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_crc_V_76_phi_fu_501_p4 = 1'd0;
    end else begin
        ap_phi_mux_crc_V_76_phi_fu_501_p4 = crc_V_76_reg_498;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_crc_V_77_phi_fu_490_p4 = 1'd0;
    end else begin
        ap_phi_mux_crc_V_77_phi_fu_490_p4 = crc_V_77_reg_487;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_crc_V_86_phi_fu_479_p4 = 1'd0;
    end else begin
        ap_phi_mux_crc_V_86_phi_fu_479_p4 = crc_V_86_reg_476;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_crc_V_87_phi_fu_468_p4 = 1'd0;
    end else begin
        ap_phi_mux_crc_V_87_phi_fu_468_p4 = crc_V_87_reg_465;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_crc_V_88_phi_fu_457_p4 = 1'd0;
    end else begin
        ap_phi_mux_crc_V_88_phi_fu_457_p4 = crc_V_88_reg_454;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_crc_V_89_phi_fu_435_p4 = 1'd0;
    end else begin
        ap_phi_mux_crc_V_89_phi_fu_435_p4 = crc_V_89_reg_432;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_crc_V_8_phi_fu_666_p4 = 1'd0;
    end else begin
        ap_phi_mux_crc_V_8_phi_fu_666_p4 = crc_V_8_reg_663;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_crc_V_90_phi_fu_424_p4 = 1'd0;
    end else begin
        ap_phi_mux_crc_V_90_phi_fu_424_p4 = crc_V_90_reg_421;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_crc_V_9_phi_fu_655_p4 = 1'd0;
    end else begin
        ap_phi_mux_crc_V_9_phi_fu_655_p4 = crc_V_9_reg_652;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_crc_V_phi_fu_754_p4 = crc_V_78;
    end else begin
        ap_phi_mux_crc_V_phi_fu_754_p4 = crc_V_reg_751;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i = 4'd0;
    end else begin
        ap_sig_allocacmp_i = k_fu_128;
    end
end

always @ (*) begin
    if (((icmp_ln22_fu_770_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        crc_V_10_out_ap_vld = 1'b1;
    end else begin
        crc_V_10_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln22_fu_770_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        crc_V_11_out_ap_vld = 1'b1;
    end else begin
        crc_V_11_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln22_fu_770_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        crc_V_14_out_ap_vld = 1'b1;
    end else begin
        crc_V_14_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln22_fu_770_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        crc_V_15_out_ap_vld = 1'b1;
    end else begin
        crc_V_15_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln22_fu_770_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        crc_V_17_out_ap_vld = 1'b1;
    end else begin
        crc_V_17_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln22_fu_770_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        crc_V_18_out_ap_vld = 1'b1;
    end else begin
        crc_V_18_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln22_fu_770_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        crc_V_1_out_ap_vld = 1'b1;
    end else begin
        crc_V_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln22_fu_770_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        crc_V_21_out_ap_vld = 1'b1;
    end else begin
        crc_V_21_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln22_fu_770_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        crc_V_22_out_ap_vld = 1'b1;
    end else begin
        crc_V_22_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln22_fu_770_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        crc_V_28_out_ap_vld = 1'b1;
    end else begin
        crc_V_28_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln22_fu_770_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        crc_V_2_out_ap_vld = 1'b1;
    end else begin
        crc_V_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln22_fu_770_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        crc_V_31_out_ap_vld = 1'b1;
    end else begin
        crc_V_31_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln22_fu_770_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        crc_V_3_out_ap_vld = 1'b1;
    end else begin
        crc_V_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln22_fu_770_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        crc_V_4_out_ap_vld = 1'b1;
    end else begin
        crc_V_4_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln22_fu_770_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        crc_V_5_out_ap_vld = 1'b1;
    end else begin
        crc_V_5_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln22_fu_770_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        crc_V_6_out_ap_vld = 1'b1;
    end else begin
        crc_V_6_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln22_fu_770_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        crc_V_86_out_ap_vld = 1'b1;
    end else begin
        crc_V_86_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln22_fu_770_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        crc_V_87_out_ap_vld = 1'b1;
    end else begin
        crc_V_87_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln22_fu_770_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        crc_V_88_out_ap_vld = 1'b1;
    end else begin
        crc_V_88_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln22_fu_770_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        crc_V_89_out_ap_vld = 1'b1;
    end else begin
        crc_V_89_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln22_fu_770_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        crc_V_8_out_ap_vld = 1'b1;
    end else begin
        crc_V_8_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln22_fu_770_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        crc_V_90_out_ap_vld = 1'b1;
    end else begin
        crc_V_90_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln22_fu_770_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        crc_V_91_out_ap_vld = 1'b1;
    end else begin
        crc_V_91_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln22_fu_770_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        crc_V_92_out_ap_vld = 1'b1;
    end else begin
        crc_V_92_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln22_fu_770_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        crc_V_93_out_ap_vld = 1'b1;
    end else begin
        crc_V_93_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln22_fu_770_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        crc_V_94_out_ap_vld = 1'b1;
    end else begin
        crc_V_94_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln22_fu_770_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        crc_V_95_out_ap_vld = 1'b1;
    end else begin
        crc_V_95_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln22_fu_770_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        crc_V_96_out_ap_vld = 1'b1;
    end else begin
        crc_V_96_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln22_fu_770_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        crc_V_97_out_ap_vld = 1'b1;
    end else begin
        crc_V_97_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln22_fu_770_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        crc_V_98_out_ap_vld = 1'b1;
    end else begin
        crc_V_98_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln22_fu_770_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        crc_V_9_out_ap_vld = 1'b1;
    end else begin
        crc_V_9_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln22_fu_770_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        crc_V_out_ap_vld = 1'b1;
    end else begin
        crc_V_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln22_fu_776_p2 = (ap_sig_allocacmp_i + 4'd1);

assign and_ln24_fu_808_p2 = (lhs_V_fu_786_p10 & last);

assign and_ln28_10_fu_1782_p2 = (xor_ln28_26_fu_1776_p2 & ap_phi_mux_crc_V_5_phi_fu_699_p4);

assign and_ln28_11_fu_1802_p2 = (xor_ln28_27_fu_1796_p2 & ap_phi_mux_crc_V_4_phi_fu_710_p4);

assign and_ln28_12_fu_1822_p2 = (xor_ln28_28_fu_1816_p2 & ap_phi_mux_crc_V_3_phi_fu_721_p4);

assign and_ln28_13_fu_1842_p2 = (xor_ln28_29_fu_1836_p2 & ap_phi_mux_crc_V_2_phi_fu_732_p4);

assign and_ln28_14_fu_1862_p2 = (xor_ln28_30_fu_1856_p2 & ap_phi_mux_crc_V_1_phi_fu_743_p4);

assign and_ln28_1_fu_1048_p2 = (icmp_ln28_5_fu_952_p2 & and_ln24_fu_808_p2);

assign and_ln28_2_fu_1100_p2 = (icmp_ln28_4_fu_946_p2 & and_ln24_fu_808_p2);

assign and_ln28_3_fu_1106_p2 = (icmp_ln28_3_fu_940_p2 & and_ln24_fu_808_p2);

assign and_ln28_4_fu_1148_p2 = (icmp_ln28_2_fu_934_p2 & and_ln24_fu_808_p2);

assign and_ln28_5_fu_1190_p2 = (icmp_ln28_1_fu_928_p2 & and_ln24_fu_808_p2);

assign and_ln28_6_fu_1226_p2 = (icmp_ln28_7_fu_1220_p2 & and_ln24_fu_808_p2);

assign and_ln28_7_fu_1238_p2 = (icmp_ln28_fu_922_p2 & and_ln24_fu_808_p2);

assign and_ln28_8_fu_1726_p2 = (or_ln28_63_fu_1720_p2 & ap_phi_mux_crc_V_70_phi_fu_677_p4);

assign and_ln28_fu_1030_p2 = (icmp_ln28_6_fu_958_p2 & and_ln24_fu_808_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign crc_V_10_out = ap_phi_mux_crc_V_10_phi_fu_644_p4;

assign crc_V_11_out = ap_phi_mux_crc_V_11_phi_fu_633_p4;

assign crc_V_14_out = ap_phi_mux_crc_V_14_phi_fu_600_p4;

assign crc_V_15_out = ap_phi_mux_crc_V_15_phi_fu_589_p4;

assign crc_V_17_out = ap_phi_mux_crc_V_17_phi_fu_567_p4;

assign crc_V_18_out = ap_phi_mux_crc_V_18_phi_fu_556_p4;

assign crc_V_1_out = ap_phi_mux_crc_V_1_phi_fu_743_p4;

assign crc_V_21_out = ap_phi_mux_crc_V_21_phi_fu_523_p4;

assign crc_V_22_out = ap_phi_mux_crc_V_22_phi_fu_512_p4;

assign crc_V_28_out = ap_phi_mux_crc_V_28_phi_fu_446_p4;

assign crc_V_2_out = ap_phi_mux_crc_V_2_phi_fu_732_p4;

assign crc_V_31_out = ap_phi_mux_crc_V_31_phi_fu_413_p4;

assign crc_V_38_fu_1042_p2 = (or_ln28_7_fu_1036_p2 ^ ap_phi_mux_crc_V_90_phi_fu_424_p4);

assign crc_V_39_fu_1882_p2 = (xor_ln28_31_fu_1876_p2 & ap_phi_mux_crc_V_phi_fu_754_p4);

assign crc_V_3_out = ap_phi_mux_crc_V_3_phi_fu_721_p4;

assign crc_V_40_fu_1868_p3 = ((and_ln28_7_fu_1238_p2[0:0] == 1'b1) ? xor_ln1499_fu_814_p2 : and_ln28_14_fu_1862_p2);

assign crc_V_41_fu_1848_p3 = ((and_ln28_5_fu_1190_p2[0:0] == 1'b1) ? xor_ln1499_7_fu_856_p2 : and_ln28_13_fu_1842_p2);

assign crc_V_42_fu_1828_p3 = ((and_ln28_4_fu_1148_p2[0:0] == 1'b1) ? xor_ln1499_11_fu_880_p2 : and_ln28_12_fu_1822_p2);

assign crc_V_43_fu_1808_p3 = ((and_ln28_3_fu_1106_p2[0:0] == 1'b1) ? xor_ln1499_15_fu_904_p2 : and_ln28_11_fu_1802_p2);

assign crc_V_44_fu_1788_p3 = ((and_ln28_2_fu_1100_p2[0:0] == 1'b1) ? xor_ln1499_16_fu_910_p2 : and_ln28_10_fu_1782_p2);

assign crc_V_45_fu_1770_p2 = (xor_ln28_25_fu_1764_p2 & select_ln28_24_fu_1756_p3);

assign crc_V_46_fu_1740_p3 = ((or_ln28_21_fu_1244_p2[0:0] == 1'b1) ? ret_V_fu_826_p2 : select_ln28_21_fu_1732_p3);

assign crc_V_47_fu_1714_p2 = (or_ln28_62_fu_1708_p2 ^ ap_phi_mux_crc_V_8_phi_fu_666_p4);

assign crc_V_48_fu_1676_p3 = ((and_ln28_4_fu_1148_p2[0:0] == 1'b1) ? xor_ln1499_12_fu_886_p2 : select_ln28_19_fu_1668_p3);

assign crc_V_49_fu_1660_p3 = ((or_ln28_48_fu_1492_p2[0:0] == 1'b1) ? xor_ln1499_3_fu_832_p2 : select_ln28_17_fu_1652_p3);

assign crc_V_4_out = ap_phi_mux_crc_V_4_phi_fu_710_p4;

assign crc_V_50_fu_1644_p3 = ((or_ln28_58_fu_1630_p2[0:0] == 1'b1) ? xor_ln1499_8_fu_862_p2 : select_ln28_15_fu_1636_p3);

assign crc_V_51_fu_1622_p3 = ((or_ln28_15_fu_1160_p2[0:0] == 1'b1) ? ret_V_1_fu_892_p2 : select_ln28_13_fu_1614_p3);

assign crc_V_52_fu_1608_p2 = (or_ln28_57_fu_1602_p2 ^ ap_phi_mux_crc_V_72_phi_fu_611_p4);

assign crc_V_53_fu_1578_p2 = (or_ln28_54_fu_1572_p2 ^ ap_phi_mux_crc_V_14_phi_fu_600_p4);

assign crc_V_54_fu_1534_p3 = ((or_ln28_25_fu_1284_p2[0:0] == 1'b1) ? xor_ln1499_9_fu_868_p2 : select_ln28_11_fu_1526_p3);

assign crc_V_55_fu_1518_p3 = ((or_ln28_15_fu_1160_p2[0:0] == 1'b1) ? ret_V_2_fu_898_p2 : select_ln28_9_fu_1510_p3);

assign crc_V_56_fu_1504_p2 = (or_ln28_49_fu_1498_p2 ^ ap_phi_mux_crc_V_17_phi_fu_567_p4);

assign crc_V_57_fu_1448_p3 = ((or_ln28_42_fu_1442_p2[0:0] == 1'b1) ? xor_ln1499_4_fu_838_p2 : ap_phi_mux_crc_V_18_phi_fu_556_p4);

assign crc_V_58_fu_1434_p3 = ((or_ln28_41_fu_1428_p2[0:0] == 1'b1) ? ret_V_3_fu_844_p2 : select_ln28_6_fu_1420_p3);

assign crc_V_59_fu_1414_p2 = (or_ln28_40_fu_1408_p2 ^ ap_phi_mux_crc_V_75_phi_fu_534_p4);

assign crc_V_5_out = ap_phi_mux_crc_V_5_phi_fu_699_p4;

assign crc_V_60_fu_1366_p2 = (or_ln28_34_fu_1360_p2 ^ ap_phi_mux_crc_V_21_phi_fu_523_p4);

assign crc_V_61_fu_1310_p3 = ((or_ln28_27_fu_1304_p2[0:0] == 1'b1) ? xor_ln1499_10_fu_874_p2 : select_ln28_4_fu_1296_p3);

assign crc_V_62_fu_1276_p3 = ((or_ln28_24_fu_1262_p2[0:0] == 1'b1) ? ret_V_4_fu_850_p2 : select_ln28_2_fu_1268_p3);

assign crc_V_63_fu_1232_p2 = (ap_phi_mux_crc_V_77_phi_fu_490_p4 ^ and_ln28_6_fu_1226_p2);

assign crc_V_64_fu_1214_p2 = (or_ln28_20_fu_1208_p2 ^ ap_phi_mux_crc_V_86_phi_fu_479_p4);

assign crc_V_65_fu_1172_p2 = (or_ln28_16_fu_1166_p2 ^ ap_phi_mux_crc_V_87_phi_fu_468_p4);

assign crc_V_66_fu_1130_p2 = (or_ln28_12_fu_1124_p2 ^ ap_phi_mux_crc_V_88_phi_fu_457_p4);

assign crc_V_67_fu_1082_p2 = (xor_ln28_4_fu_1076_p2 ^ ap_phi_mux_crc_V_28_phi_fu_446_p4);

assign crc_V_68_fu_1062_p3 = ((and_ln28_fu_1030_p2[0:0] == 1'b1) ? ret_V_5_fu_916_p2 : select_ln28_fu_1054_p3);

assign crc_V_69_fu_1018_p2 = (xor_ln28_fu_1012_p2 ^ ap_phi_mux_crc_V_31_phi_fu_413_p4);

assign crc_V_6_out = ap_phi_mux_crc_V_6_phi_fu_688_p4;

assign crc_V_86_out = ap_phi_mux_crc_V_70_phi_fu_677_p4;

assign crc_V_87_out = ap_phi_mux_crc_V_71_phi_fu_622_p4;

assign crc_V_88_out = ap_phi_mux_crc_V_72_phi_fu_611_p4;

assign crc_V_89_out = ap_phi_mux_crc_V_73_phi_fu_578_p4;

assign crc_V_8_out = ap_phi_mux_crc_V_8_phi_fu_666_p4;

assign crc_V_90_out = ap_phi_mux_crc_V_74_phi_fu_545_p4;

assign crc_V_91_out = ap_phi_mux_crc_V_75_phi_fu_534_p4;

assign crc_V_92_out = ap_phi_mux_crc_V_76_phi_fu_501_p4;

assign crc_V_93_out = ap_phi_mux_crc_V_77_phi_fu_490_p4;

assign crc_V_94_out = ap_phi_mux_crc_V_86_phi_fu_479_p4;

assign crc_V_95_out = ap_phi_mux_crc_V_87_phi_fu_468_p4;

assign crc_V_96_out = ap_phi_mux_crc_V_88_phi_fu_457_p4;

assign crc_V_97_out = ap_phi_mux_crc_V_89_phi_fu_435_p4;

assign crc_V_98_out = ap_phi_mux_crc_V_90_phi_fu_424_p4;

assign crc_V_9_out = ap_phi_mux_crc_V_9_phi_fu_655_p4;

assign crc_V_out = ap_phi_mux_crc_V_phi_fu_754_p4;

assign icmp_ln22_fu_770_p2 = ((ap_sig_allocacmp_i == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln28_1_fu_928_p2 = ((trunc_ln1019_fu_782_p1 == 3'd1) ? 1'b1 : 1'b0);

assign icmp_ln28_2_fu_934_p2 = ((trunc_ln1019_fu_782_p1 == 3'd2) ? 1'b1 : 1'b0);

assign icmp_ln28_3_fu_940_p2 = ((trunc_ln1019_fu_782_p1 == 3'd3) ? 1'b1 : 1'b0);

assign icmp_ln28_4_fu_946_p2 = ((trunc_ln1019_fu_782_p1 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln28_5_fu_952_p2 = ((trunc_ln1019_fu_782_p1 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln28_6_fu_958_p2 = ((trunc_ln1019_fu_782_p1 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln28_7_fu_1220_p2 = ((trunc_ln1019_fu_782_p1 != 3'd2) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_922_p2 = ((trunc_ln1019_fu_782_p1 == 3'd0) ? 1'b1 : 1'b0);

assign or_ln28_10_fu_1112_p2 = (xor_ln28_6_fu_1094_p2 | and_ln28_2_fu_1100_p2);

assign or_ln28_11_fu_1118_p2 = (and_ln28_fu_1030_p2 | and_ln28_3_fu_1106_p2);

assign or_ln28_12_fu_1124_p2 = (or_ln28_11_fu_1118_p2 | or_ln28_10_fu_1112_p2);

assign or_ln28_13_fu_1136_p2 = (or_ln28_1_fu_976_p2 | icmp_ln28_4_fu_946_p2);

assign or_ln28_14_fu_1154_p2 = (xor_ln28_8_fu_1142_p2 | and_ln28_3_fu_1106_p2);

assign or_ln28_15_fu_1160_p2 = (and_ln28_fu_1030_p2 | and_ln28_4_fu_1148_p2);

assign or_ln28_16_fu_1166_p2 = (or_ln28_15_fu_1160_p2 | or_ln28_14_fu_1154_p2);

assign or_ln28_17_fu_1178_p2 = (or_ln28_fu_970_p2 | icmp_ln28_3_fu_940_p2);

assign or_ln28_18_fu_1196_p2 = (xor_ln28_10_fu_1184_p2 | and_ln28_4_fu_1148_p2);

assign or_ln28_19_fu_1202_p2 = (and_ln28_fu_1030_p2 | and_ln28_5_fu_1190_p2);

assign or_ln28_1_fu_976_p2 = (or_ln28_fu_970_p2 | icmp_ln28_1_fu_928_p2);

assign or_ln28_20_fu_1208_p2 = (or_ln28_19_fu_1202_p2 | or_ln28_18_fu_1196_p2);

assign or_ln28_21_fu_1244_p2 = (and_ln28_fu_1030_p2 | and_ln28_7_fu_1238_p2);

assign or_ln28_22_fu_1250_p2 = (and_ln28_4_fu_1148_p2 | and_ln28_3_fu_1106_p2);

assign or_ln28_23_fu_1256_p2 = (and_ln28_2_fu_1100_p2 | and_ln28_1_fu_1048_p2);

assign or_ln28_24_fu_1262_p2 = (or_ln28_22_fu_1250_p2 | or_ln28_21_fu_1244_p2);

assign or_ln28_25_fu_1284_p2 = (and_ln28_5_fu_1190_p2 | and_ln28_4_fu_1148_p2);

assign or_ln28_26_fu_1290_p2 = (and_ln28_3_fu_1106_p2 | and_ln28_2_fu_1100_p2);

assign or_ln28_27_fu_1304_p2 = (or_ln28_26_fu_1290_p2 | or_ln28_25_fu_1284_p2);

assign or_ln28_28_fu_1318_p2 = (xor_ln24_fu_964_p2 | icmp_ln28_6_fu_958_p2);

assign or_ln28_29_fu_1324_p2 = (or_ln28_28_fu_1318_p2 | icmp_ln28_5_fu_952_p2);

assign or_ln28_2_fu_982_p2 = (or_ln28_1_fu_976_p2 | icmp_ln28_2_fu_934_p2);

assign or_ln28_30_fu_1336_p2 = (xor_ln28_13_fu_1330_p2 | and_ln28_3_fu_1106_p2);

assign or_ln28_31_fu_1342_p2 = (or_ln28_30_fu_1336_p2 | and_ln28_2_fu_1100_p2);

assign or_ln28_32_fu_1348_p2 = (and_ln28_7_fu_1238_p2 | and_ln28_5_fu_1190_p2);

assign or_ln28_33_fu_1354_p2 = (or_ln28_32_fu_1348_p2 | and_ln28_4_fu_1148_p2);

assign or_ln28_34_fu_1360_p2 = (or_ln28_33_fu_1354_p2 | or_ln28_31_fu_1342_p2);

assign or_ln28_35_fu_1372_p2 = (xor_ln24_fu_964_p2 | icmp_ln28_5_fu_952_p2);

assign or_ln28_36_fu_1378_p2 = (or_ln28_35_fu_1372_p2 | icmp_ln28_4_fu_946_p2);

assign or_ln28_37_fu_1390_p2 = (xor_ln28_15_fu_1384_p2 | and_ln28_4_fu_1148_p2);

assign or_ln28_38_fu_1396_p2 = (or_ln28_37_fu_1390_p2 | and_ln28_3_fu_1106_p2);

assign or_ln28_39_fu_1402_p2 = (or_ln28_21_fu_1244_p2 | and_ln28_5_fu_1190_p2);

assign or_ln28_3_fu_988_p2 = (or_ln28_2_fu_982_p2 | icmp_ln28_3_fu_940_p2);

assign or_ln28_40_fu_1408_p2 = (or_ln28_39_fu_1402_p2 | or_ln28_38_fu_1396_p2);

assign or_ln28_41_fu_1428_p2 = (or_ln28_25_fu_1284_p2 | or_ln28_21_fu_1244_p2);

assign or_ln28_42_fu_1442_p2 = (or_ln28_32_fu_1348_p2 | or_ln28_23_fu_1256_p2);

assign or_ln28_43_fu_1456_p2 = (xor_ln24_fu_964_p2 | icmp_ln28_2_fu_934_p2);

assign or_ln28_44_fu_1462_p2 = (or_ln28_43_fu_1456_p2 | icmp_ln28_1_fu_928_p2);

assign or_ln28_45_fu_1468_p2 = (icmp_ln28_6_fu_958_p2 | icmp_ln28_5_fu_952_p2);

assign or_ln28_46_fu_1474_p2 = (or_ln28_45_fu_1468_p2 | or_ln28_44_fu_1462_p2);

assign or_ln28_47_fu_1486_p2 = (xor_ln28_17_fu_1480_p2 | and_ln28_2_fu_1100_p2);

assign or_ln28_48_fu_1492_p2 = (and_ln28_7_fu_1238_p2 | and_ln28_3_fu_1106_p2);

assign or_ln28_49_fu_1498_p2 = (or_ln28_48_fu_1492_p2 | or_ln28_47_fu_1486_p2);

assign or_ln28_4_fu_994_p2 = (icmp_ln28_5_fu_952_p2 | icmp_ln28_4_fu_946_p2);

assign or_ln28_50_fu_1542_p2 = (icmp_ln28_3_fu_940_p2 | icmp_ln28_2_fu_934_p2);

assign or_ln28_51_fu_1548_p2 = (xor_ln24_fu_964_p2 | or_ln28_50_fu_1542_p2);

assign or_ln28_52_fu_1554_p2 = (or_ln28_51_fu_1548_p2 | or_ln28_45_fu_1468_p2);

assign or_ln28_53_fu_1566_p2 = (xor_ln28_19_fu_1560_p2 | and_ln28_2_fu_1100_p2);

assign or_ln28_54_fu_1572_p2 = (or_ln28_53_fu_1566_p2 | or_ln28_32_fu_1348_p2);

assign or_ln28_55_fu_1584_p2 = (or_ln28_4_fu_994_p2 | or_ln28_44_fu_1462_p2);

assign or_ln28_56_fu_1596_p2 = (xor_ln28_21_fu_1590_p2 | and_ln28_3_fu_1106_p2);

assign or_ln28_57_fu_1602_p2 = (or_ln28_56_fu_1596_p2 | or_ln28_21_fu_1244_p2);

assign or_ln28_58_fu_1630_p2 = (and_ln28_5_fu_1190_p2 | and_ln28_2_fu_1100_p2);

assign or_ln28_59_fu_1684_p2 = (or_ln28_17_fu_1178_p2 | icmp_ln28_4_fu_946_p2);

assign or_ln28_5_fu_1000_p2 = (or_ln28_4_fu_994_p2 | or_ln28_3_fu_988_p2);

assign or_ln28_60_fu_1690_p2 = (or_ln28_59_fu_1684_p2 | or_ln28_45_fu_1468_p2);

assign or_ln28_61_fu_1702_p2 = (xor_ln28_23_fu_1696_p2 | and_ln28_5_fu_1190_p2);

assign or_ln28_62_fu_1708_p2 = (or_ln28_61_fu_1702_p2 | and_ln28_4_fu_1148_p2);

assign or_ln28_63_fu_1720_p2 = (or_ln28_51_fu_1548_p2 | or_ln28_4_fu_994_p2);

assign or_ln28_6_fu_1006_p2 = (or_ln28_5_fu_1000_p2 | icmp_ln28_6_fu_958_p2);

assign or_ln28_7_fu_1036_p2 = (xor_ln28_2_fu_1024_p2 | and_ln28_fu_1030_p2);

assign or_ln28_8_fu_1070_p2 = (or_ln28_3_fu_988_p2 | icmp_ln28_6_fu_958_p2);

assign or_ln28_9_fu_1088_p2 = (or_ln28_2_fu_982_p2 | icmp_ln28_5_fu_952_p2);

assign or_ln28_fu_970_p2 = (xor_ln24_fu_964_p2 | icmp_ln28_fu_922_p2);

assign ret_V_1_fu_892_p2 = (ap_phi_mux_crc_V_71_phi_fu_622_p4 ^ 1'd1);

assign ret_V_2_fu_898_p2 = (ap_phi_mux_crc_V_73_phi_fu_578_p4 ^ 1'd1);

assign ret_V_3_fu_844_p2 = (ap_phi_mux_crc_V_74_phi_fu_545_p4 ^ 1'd1);

assign ret_V_4_fu_850_p2 = (ap_phi_mux_crc_V_76_phi_fu_501_p4 ^ 1'd1);

assign ret_V_5_fu_916_p2 = (ap_phi_mux_crc_V_89_phi_fu_435_p4 ^ 1'd1);

assign ret_V_fu_826_p2 = (ap_phi_mux_crc_V_70_phi_fu_677_p4 ^ 1'd1);

assign select_ln28_11_fu_1526_p3 = ((and_ln28_1_fu_1048_p2[0:0] == 1'b1) ? xor_ln1499_9_fu_868_p2 : ap_phi_mux_crc_V_15_phi_fu_589_p4);

assign select_ln28_13_fu_1614_p3 = ((and_ln28_1_fu_1048_p2[0:0] == 1'b1) ? ret_V_1_fu_892_p2 : ap_phi_mux_crc_V_71_phi_fu_622_p4);

assign select_ln28_15_fu_1636_p3 = ((and_ln28_1_fu_1048_p2[0:0] == 1'b1) ? xor_ln1499_8_fu_862_p2 : ap_phi_mux_crc_V_11_phi_fu_633_p4);

assign select_ln28_17_fu_1652_p3 = ((and_ln28_2_fu_1100_p2[0:0] == 1'b1) ? xor_ln1499_3_fu_832_p2 : ap_phi_mux_crc_V_10_phi_fu_644_p4);

assign select_ln28_19_fu_1668_p3 = ((and_ln28_3_fu_1106_p2[0:0] == 1'b1) ? xor_ln1499_12_fu_886_p2 : ap_phi_mux_crc_V_9_phi_fu_655_p4);

assign select_ln28_21_fu_1732_p3 = ((and_ln28_5_fu_1190_p2[0:0] == 1'b1) ? ret_V_fu_826_p2 : and_ln28_8_fu_1726_p2);

assign select_ln28_23_fu_1748_p3 = ((and_ln28_1_fu_1048_p2[0:0] == 1'b1) ? xor_ln1499_1_fu_820_p2 : ap_phi_mux_crc_V_6_phi_fu_688_p4);

assign select_ln28_24_fu_1756_p3 = ((and_ln28_7_fu_1238_p2[0:0] == 1'b1) ? xor_ln1499_1_fu_820_p2 : select_ln28_23_fu_1748_p3);

assign select_ln28_2_fu_1268_p3 = ((or_ln28_23_fu_1256_p2[0:0] == 1'b1) ? ret_V_4_fu_850_p2 : ap_phi_mux_crc_V_76_phi_fu_501_p4);

assign select_ln28_4_fu_1296_p3 = ((and_ln28_1_fu_1048_p2[0:0] == 1'b1) ? xor_ln1499_10_fu_874_p2 : ap_phi_mux_crc_V_22_phi_fu_512_p4);

assign select_ln28_6_fu_1420_p3 = ((and_ln28_1_fu_1048_p2[0:0] == 1'b1) ? ret_V_3_fu_844_p2 : ap_phi_mux_crc_V_74_phi_fu_545_p4);

assign select_ln28_9_fu_1510_p3 = ((and_ln28_3_fu_1106_p2[0:0] == 1'b1) ? ret_V_2_fu_898_p2 : ap_phi_mux_crc_V_73_phi_fu_578_p4);

assign select_ln28_fu_1054_p3 = ((and_ln28_1_fu_1048_p2[0:0] == 1'b1) ? ret_V_5_fu_916_p2 : ap_phi_mux_crc_V_89_phi_fu_435_p4);

assign trunc_ln1019_fu_782_p1 = ap_sig_allocacmp_i[2:0];

assign xor_ln1499_10_fu_874_p2 = (ap_phi_mux_crc_V_22_phi_fu_512_p4 ^ 1'd1);

assign xor_ln1499_11_fu_880_p2 = (ap_phi_mux_crc_V_3_phi_fu_721_p4 ^ 1'd1);

assign xor_ln1499_12_fu_886_p2 = (ap_phi_mux_crc_V_9_phi_fu_655_p4 ^ 1'd1);

assign xor_ln1499_15_fu_904_p2 = (ap_phi_mux_crc_V_4_phi_fu_710_p4 ^ 1'd1);

assign xor_ln1499_16_fu_910_p2 = (ap_phi_mux_crc_V_5_phi_fu_699_p4 ^ 1'd1);

assign xor_ln1499_1_fu_820_p2 = (ap_phi_mux_crc_V_6_phi_fu_688_p4 ^ 1'd1);

assign xor_ln1499_3_fu_832_p2 = (ap_phi_mux_crc_V_10_phi_fu_644_p4 ^ 1'd1);

assign xor_ln1499_4_fu_838_p2 = (ap_phi_mux_crc_V_18_phi_fu_556_p4 ^ 1'd1);

assign xor_ln1499_7_fu_856_p2 = (ap_phi_mux_crc_V_2_phi_fu_732_p4 ^ 1'd1);

assign xor_ln1499_8_fu_862_p2 = (ap_phi_mux_crc_V_11_phi_fu_633_p4 ^ 1'd1);

assign xor_ln1499_9_fu_868_p2 = (ap_phi_mux_crc_V_15_phi_fu_589_p4 ^ 1'd1);

assign xor_ln1499_fu_814_p2 = (ap_phi_mux_crc_V_1_phi_fu_743_p4 ^ 1'd1);

assign xor_ln24_fu_964_p2 = (1'd1 ^ and_ln24_fu_808_p2);

assign xor_ln28_10_fu_1184_p2 = (or_ln28_17_fu_1178_p2 ^ 1'd1);

assign xor_ln28_13_fu_1330_p2 = (or_ln28_29_fu_1324_p2 ^ 1'd1);

assign xor_ln28_15_fu_1384_p2 = (or_ln28_36_fu_1378_p2 ^ 1'd1);

assign xor_ln28_17_fu_1480_p2 = (or_ln28_46_fu_1474_p2 ^ 1'd1);

assign xor_ln28_19_fu_1560_p2 = (or_ln28_52_fu_1554_p2 ^ 1'd1);

assign xor_ln28_21_fu_1590_p2 = (or_ln28_55_fu_1584_p2 ^ 1'd1);

assign xor_ln28_23_fu_1696_p2 = (or_ln28_60_fu_1690_p2 ^ 1'd1);

assign xor_ln28_25_fu_1764_p2 = (1'd1 ^ and_ln28_fu_1030_p2);

assign xor_ln28_26_fu_1776_p2 = (1'd1 ^ and_ln28_1_fu_1048_p2);

assign xor_ln28_27_fu_1796_p2 = (1'd1 ^ and_ln28_2_fu_1100_p2);

assign xor_ln28_28_fu_1816_p2 = (1'd1 ^ and_ln28_3_fu_1106_p2);

assign xor_ln28_29_fu_1836_p2 = (1'd1 ^ and_ln28_4_fu_1148_p2);

assign xor_ln28_2_fu_1024_p2 = (or_ln28_5_fu_1000_p2 ^ 1'd1);

assign xor_ln28_30_fu_1856_p2 = (1'd1 ^ and_ln28_5_fu_1190_p2);

assign xor_ln28_31_fu_1876_p2 = (1'd1 ^ and_ln28_7_fu_1238_p2);

assign xor_ln28_4_fu_1076_p2 = (or_ln28_8_fu_1070_p2 ^ 1'd1);

assign xor_ln28_6_fu_1094_p2 = (or_ln28_9_fu_1088_p2 ^ 1'd1);

assign xor_ln28_8_fu_1142_p2 = (or_ln28_13_fu_1136_p2 ^ 1'd1);

assign xor_ln28_fu_1012_p2 = (or_ln28_6_fu_1006_p2 ^ 1'd1);

endmodule //crc24a_crc24a_Pipeline_loop2
