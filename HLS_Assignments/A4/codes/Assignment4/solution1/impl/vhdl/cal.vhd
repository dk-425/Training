-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cal is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    d_V_TREADY : IN STD_LOGIC;
    a_V_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    a_V_TVALID : IN STD_LOGIC;
    a_V_TREADY : OUT STD_LOGIC;
    b_V_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    b_V_TVALID : IN STD_LOGIC;
    b_V_TREADY : OUT STD_LOGIC;
    c_V_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    c_V_TVALID : IN STD_LOGIC;
    c_V_TREADY : OUT STD_LOGIC;
    d_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    d_V_TVALID : OUT STD_LOGIC );
end;


architecture behav of cal is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "cal,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=4.170000,HLS_SYN_LAT=13,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=560,HLS_SYN_LUT=584,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal c_V_0_vld_out : STD_LOGIC;
    signal b_V_0_vld_out : STD_LOGIC;
    signal a_V_0_vld_out : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal d_V_1_ack_in : STD_LOGIC;
    signal tmp_reg_190 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_reg_190_pp0_iter11_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_state13_io : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal tmp_reg_190_pp0_iter12_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_state14_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal a_V_0_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal a_V_0_vld_in : STD_LOGIC;
    signal a_V_0_ack_in : STD_LOGIC;
    signal a_V_0_ack_out : STD_LOGIC;
    signal a_V_0_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal a_V_0_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal a_V_0_sel_rd : STD_LOGIC := '0';
    signal a_V_0_sel_wr : STD_LOGIC := '0';
    signal a_V_0_sel : STD_LOGIC;
    signal a_V_0_load_A : STD_LOGIC;
    signal a_V_0_load_B : STD_LOGIC;
    signal a_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal a_V_0_state_cmp_full : STD_LOGIC;
    signal b_V_0_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal b_V_0_vld_in : STD_LOGIC;
    signal b_V_0_ack_in : STD_LOGIC;
    signal b_V_0_ack_out : STD_LOGIC;
    signal b_V_0_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal b_V_0_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal b_V_0_sel_rd : STD_LOGIC := '0';
    signal b_V_0_sel_wr : STD_LOGIC := '0';
    signal b_V_0_sel : STD_LOGIC;
    signal b_V_0_load_A : STD_LOGIC;
    signal b_V_0_load_B : STD_LOGIC;
    signal b_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal b_V_0_state_cmp_full : STD_LOGIC;
    signal c_V_0_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal c_V_0_vld_in : STD_LOGIC;
    signal c_V_0_ack_in : STD_LOGIC;
    signal c_V_0_ack_out : STD_LOGIC;
    signal c_V_0_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal c_V_0_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal c_V_0_sel_rd : STD_LOGIC := '0';
    signal c_V_0_sel_wr : STD_LOGIC := '0';
    signal c_V_0_sel : STD_LOGIC;
    signal c_V_0_load_A : STD_LOGIC;
    signal c_V_0_load_B : STD_LOGIC;
    signal c_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal c_V_0_state_cmp_full : STD_LOGIC;
    signal d_V_1_data_in : STD_LOGIC_VECTOR (15 downto 0);
    signal d_V_1_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal d_V_1_vld_in : STD_LOGIC;
    signal d_V_1_vld_out : STD_LOGIC;
    signal d_V_1_ack_out : STD_LOGIC;
    signal d_V_1_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal d_V_1_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal d_V_1_sel_rd : STD_LOGIC := '0';
    signal d_V_1_sel_wr : STD_LOGIC := '0';
    signal d_V_1_sel : STD_LOGIC;
    signal d_V_1_load_A : STD_LOGIC;
    signal d_V_1_load_B : STD_LOGIC;
    signal d_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal d_V_1_state_cmp_full : STD_LOGIC;
    signal a_V_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal b_V_TDATA_blk_n : STD_LOGIC;
    signal c_V_TDATA_blk_n : STD_LOGIC;
    signal d_V_TDATA_blk_n : STD_LOGIC;
    signal b_V_read_reg_170 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_V_read_reg_170_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal b_V_read_reg_170_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal b_V_read_reg_170_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal b_V_read_reg_170_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal b_V_read_reg_170_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal b_V_read_reg_170_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal b_V_read_reg_170_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal b_V_read_reg_170_pp0_iter8_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal b_V_read_reg_170_pp0_iter9_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal b_V_read_reg_170_pp0_iter10_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal b_V_read_reg_170_pp0_iter11_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal a_V_read_reg_180 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_V_read_reg_180_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal a_V_read_reg_180_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal a_V_read_reg_180_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal a_V_read_reg_180_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal a_V_read_reg_180_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal a_V_read_reg_180_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal a_V_read_reg_180_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal a_V_read_reg_180_pp0_iter8_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal a_V_read_reg_180_pp0_iter9_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal a_V_read_reg_180_pp0_iter10_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal a_V_read_reg_180_pp0_iter11_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_73_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_reg_190_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_reg_190_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_reg_190_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_reg_190_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_reg_190_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_reg_190_pp0_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_reg_190_pp0_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_reg_190_pp0_iter8_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_reg_190_pp0_iter9_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_reg_190_pp0_iter10_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal p_5_fu_95_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_4_fu_104_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_3_fu_113_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_2_fu_118_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_2_fu_129_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_1_fu_148_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_s_fu_165_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_7_tr_fu_77_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_85_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_6_fu_91_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_5_fu_100_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_4_fu_109_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_85_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_2_fu_129_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_2_fu_129_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_1_fu_136_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal rhs_V_1_fu_139_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_1_fu_142_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal rhs_V_fu_156_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal lhs_V_fu_153_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_fu_159_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_85_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to12 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component cal_sdiv_9s_8s_9_13_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;



begin
    cal_sdiv_9s_8s_9_13_1_U1 : component cal_sdiv_9s_8s_9_13_1
    generic map (
        ID => 1,
        NUM_STAGE => 13,
        din0_WIDTH => 9,
        din1_WIDTH => 8,
        dout_WIDTH => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_85_p0,
        din1 => b_V_0_data_out,
        ce => grp_fu_85_ce,
        dout => grp_fu_85_p2);





    a_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                a_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = a_V_0_vld_out) and (ap_const_logic_1 = a_V_0_ack_out))) then 
                                        a_V_0_sel_rd <= not(a_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    a_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                a_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = a_V_0_ack_in) and (ap_const_logic_1 = a_V_0_vld_in))) then 
                                        a_V_0_sel_wr <= not(a_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    a_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                a_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = a_V_0_vld_in) and (ap_const_lv2_2 = a_V_0_state)) or ((ap_const_logic_0 = a_V_0_vld_in) and (ap_const_logic_1 = a_V_0_ack_out) and (ap_const_lv2_3 = a_V_0_state)))) then 
                    a_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_0 = a_V_0_ack_out) and (ap_const_lv2_1 = a_V_0_state)) or ((ap_const_logic_0 = a_V_0_ack_out) and (ap_const_logic_1 = a_V_0_vld_in) and (ap_const_lv2_3 = a_V_0_state)))) then 
                    a_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = a_V_0_vld_in) and (ap_const_logic_1 = a_V_0_ack_out))) and not(((ap_const_logic_0 = a_V_0_ack_out) and (ap_const_logic_1 = a_V_0_vld_in))) and (ap_const_lv2_3 = a_V_0_state)) or ((ap_const_logic_1 = a_V_0_ack_out) and (ap_const_lv2_1 = a_V_0_state)) or ((ap_const_logic_1 = a_V_0_vld_in) and (ap_const_lv2_2 = a_V_0_state)))) then 
                    a_V_0_state <= ap_const_lv2_3;
                else 
                    a_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    b_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                b_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((b_V_0_vld_out = ap_const_logic_1) and (b_V_0_ack_out = ap_const_logic_1))) then 
                                        b_V_0_sel_rd <= not(b_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    b_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                b_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((b_V_0_ack_in = ap_const_logic_1) and (b_V_0_vld_in = ap_const_logic_1))) then 
                                        b_V_0_sel_wr <= not(b_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    b_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                b_V_0_state <= ap_const_lv2_0;
            else
                if ((((b_V_0_vld_in = ap_const_logic_0) and (b_V_0_state = ap_const_lv2_2)) or ((b_V_0_vld_in = ap_const_logic_0) and (b_V_0_ack_out = ap_const_logic_1) and (b_V_0_state = ap_const_lv2_3)))) then 
                    b_V_0_state <= ap_const_lv2_2;
                elsif ((((b_V_0_ack_out = ap_const_logic_0) and (b_V_0_state = ap_const_lv2_1)) or ((b_V_0_ack_out = ap_const_logic_0) and (b_V_0_vld_in = ap_const_logic_1) and (b_V_0_state = ap_const_lv2_3)))) then 
                    b_V_0_state <= ap_const_lv2_1;
                elsif (((not(((b_V_0_vld_in = ap_const_logic_0) and (b_V_0_ack_out = ap_const_logic_1))) and not(((b_V_0_ack_out = ap_const_logic_0) and (b_V_0_vld_in = ap_const_logic_1))) and (b_V_0_state = ap_const_lv2_3)) or ((b_V_0_ack_out = ap_const_logic_1) and (b_V_0_state = ap_const_lv2_1)) or ((b_V_0_vld_in = ap_const_logic_1) and (b_V_0_state = ap_const_lv2_2)))) then 
                    b_V_0_state <= ap_const_lv2_3;
                else 
                    b_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    c_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                c_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((c_V_0_vld_out = ap_const_logic_1) and (c_V_0_ack_out = ap_const_logic_1))) then 
                                        c_V_0_sel_rd <= not(c_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    c_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                c_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((c_V_0_ack_in = ap_const_logic_1) and (c_V_0_vld_in = ap_const_logic_1))) then 
                                        c_V_0_sel_wr <= not(c_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    c_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                c_V_0_state <= ap_const_lv2_0;
            else
                if ((((c_V_0_vld_in = ap_const_logic_0) and (c_V_0_state = ap_const_lv2_2)) or ((c_V_0_vld_in = ap_const_logic_0) and (c_V_0_ack_out = ap_const_logic_1) and (c_V_0_state = ap_const_lv2_3)))) then 
                    c_V_0_state <= ap_const_lv2_2;
                elsif ((((c_V_0_ack_out = ap_const_logic_0) and (c_V_0_state = ap_const_lv2_1)) or ((c_V_0_ack_out = ap_const_logic_0) and (c_V_0_vld_in = ap_const_logic_1) and (c_V_0_state = ap_const_lv2_3)))) then 
                    c_V_0_state <= ap_const_lv2_1;
                elsif (((not(((c_V_0_vld_in = ap_const_logic_0) and (c_V_0_ack_out = ap_const_logic_1))) and not(((c_V_0_ack_out = ap_const_logic_0) and (c_V_0_vld_in = ap_const_logic_1))) and (c_V_0_state = ap_const_lv2_3)) or ((c_V_0_ack_out = ap_const_logic_1) and (c_V_0_state = ap_const_lv2_1)) or ((c_V_0_vld_in = ap_const_logic_1) and (c_V_0_state = ap_const_lv2_2)))) then 
                    c_V_0_state <= ap_const_lv2_3;
                else 
                    c_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    d_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                d_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((d_V_1_ack_out = ap_const_logic_1) and (d_V_1_vld_out = ap_const_logic_1))) then 
                                        d_V_1_sel_rd <= not(d_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    d_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                d_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((d_V_1_ack_in = ap_const_logic_1) and (d_V_1_vld_in = ap_const_logic_1))) then 
                                        d_V_1_sel_wr <= not(d_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    d_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                d_V_1_state <= ap_const_lv2_0;
            else
                if ((((d_V_1_vld_in = ap_const_logic_0) and (d_V_1_state = ap_const_lv2_2)) or ((d_V_1_vld_in = ap_const_logic_0) and (d_V_1_ack_out = ap_const_logic_1) and (d_V_1_state = ap_const_lv2_3)))) then 
                    d_V_1_state <= ap_const_lv2_2;
                elsif ((((d_V_1_ack_out = ap_const_logic_0) and (d_V_1_state = ap_const_lv2_1)) or ((d_V_1_ack_out = ap_const_logic_0) and (d_V_1_vld_in = ap_const_logic_1) and (d_V_1_state = ap_const_lv2_3)))) then 
                    d_V_1_state <= ap_const_lv2_1;
                elsif (((not(((d_V_1_vld_in = ap_const_logic_0) and (d_V_1_ack_out = ap_const_logic_1))) and not(((d_V_1_ack_out = ap_const_logic_0) and (d_V_1_vld_in = ap_const_logic_1))) and (d_V_1_state = ap_const_lv2_3)) or ((d_V_1_ack_out = ap_const_logic_1) and (d_V_1_state = ap_const_lv2_1)) or ((d_V_1_vld_in = ap_const_logic_1) and (d_V_1_state = ap_const_lv2_2)))) then 
                    d_V_1_state <= ap_const_lv2_3;
                else 
                    d_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = a_V_0_load_A)) then
                a_V_0_payload_A <= a_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = a_V_0_load_B)) then
                a_V_0_payload_B <= a_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                a_V_read_reg_180 <= a_V_0_data_out;
                a_V_read_reg_180_pp0_iter1_reg <= a_V_read_reg_180;
                b_V_read_reg_170 <= b_V_0_data_out;
                b_V_read_reg_170_pp0_iter1_reg <= b_V_read_reg_170;
                tmp_reg_190 <= tmp_fu_73_p1;
                tmp_reg_190_pp0_iter1_reg <= tmp_reg_190;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                a_V_read_reg_180_pp0_iter10_reg <= a_V_read_reg_180_pp0_iter9_reg;
                a_V_read_reg_180_pp0_iter11_reg <= a_V_read_reg_180_pp0_iter10_reg;
                a_V_read_reg_180_pp0_iter2_reg <= a_V_read_reg_180_pp0_iter1_reg;
                a_V_read_reg_180_pp0_iter3_reg <= a_V_read_reg_180_pp0_iter2_reg;
                a_V_read_reg_180_pp0_iter4_reg <= a_V_read_reg_180_pp0_iter3_reg;
                a_V_read_reg_180_pp0_iter5_reg <= a_V_read_reg_180_pp0_iter4_reg;
                a_V_read_reg_180_pp0_iter6_reg <= a_V_read_reg_180_pp0_iter5_reg;
                a_V_read_reg_180_pp0_iter7_reg <= a_V_read_reg_180_pp0_iter6_reg;
                a_V_read_reg_180_pp0_iter8_reg <= a_V_read_reg_180_pp0_iter7_reg;
                a_V_read_reg_180_pp0_iter9_reg <= a_V_read_reg_180_pp0_iter8_reg;
                b_V_read_reg_170_pp0_iter10_reg <= b_V_read_reg_170_pp0_iter9_reg;
                b_V_read_reg_170_pp0_iter11_reg <= b_V_read_reg_170_pp0_iter10_reg;
                b_V_read_reg_170_pp0_iter2_reg <= b_V_read_reg_170_pp0_iter1_reg;
                b_V_read_reg_170_pp0_iter3_reg <= b_V_read_reg_170_pp0_iter2_reg;
                b_V_read_reg_170_pp0_iter4_reg <= b_V_read_reg_170_pp0_iter3_reg;
                b_V_read_reg_170_pp0_iter5_reg <= b_V_read_reg_170_pp0_iter4_reg;
                b_V_read_reg_170_pp0_iter6_reg <= b_V_read_reg_170_pp0_iter5_reg;
                b_V_read_reg_170_pp0_iter7_reg <= b_V_read_reg_170_pp0_iter6_reg;
                b_V_read_reg_170_pp0_iter8_reg <= b_V_read_reg_170_pp0_iter7_reg;
                b_V_read_reg_170_pp0_iter9_reg <= b_V_read_reg_170_pp0_iter8_reg;
                tmp_reg_190_pp0_iter10_reg <= tmp_reg_190_pp0_iter9_reg;
                tmp_reg_190_pp0_iter11_reg <= tmp_reg_190_pp0_iter10_reg;
                tmp_reg_190_pp0_iter12_reg <= tmp_reg_190_pp0_iter11_reg;
                tmp_reg_190_pp0_iter2_reg <= tmp_reg_190_pp0_iter1_reg;
                tmp_reg_190_pp0_iter3_reg <= tmp_reg_190_pp0_iter2_reg;
                tmp_reg_190_pp0_iter4_reg <= tmp_reg_190_pp0_iter3_reg;
                tmp_reg_190_pp0_iter5_reg <= tmp_reg_190_pp0_iter4_reg;
                tmp_reg_190_pp0_iter6_reg <= tmp_reg_190_pp0_iter5_reg;
                tmp_reg_190_pp0_iter7_reg <= tmp_reg_190_pp0_iter6_reg;
                tmp_reg_190_pp0_iter8_reg <= tmp_reg_190_pp0_iter7_reg;
                tmp_reg_190_pp0_iter9_reg <= tmp_reg_190_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((b_V_0_load_A = ap_const_logic_1)) then
                b_V_0_payload_A <= b_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((b_V_0_load_B = ap_const_logic_1)) then
                b_V_0_payload_B <= b_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((c_V_0_load_A = ap_const_logic_1)) then
                c_V_0_payload_A <= c_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((c_V_0_load_B = ap_const_logic_1)) then
                c_V_0_payload_B <= c_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((d_V_1_load_A = ap_const_logic_1)) then
                d_V_1_payload_A <= d_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((d_V_1_load_B = ap_const_logic_1)) then
                d_V_1_payload_B <= d_V_1_data_in;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    a_V_0_ack_in <= a_V_0_state(1);

    a_V_0_ack_out_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            a_V_0_ack_out <= ap_const_logic_1;
        else 
            a_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    a_V_0_data_out_assign_proc : process(a_V_0_payload_A, a_V_0_payload_B, a_V_0_sel)
    begin
        if ((ap_const_logic_1 = a_V_0_sel)) then 
            a_V_0_data_out <= a_V_0_payload_B;
        else 
            a_V_0_data_out <= a_V_0_payload_A;
        end if; 
    end process;

    a_V_0_load_A <= (not(a_V_0_sel_wr) and a_V_0_state_cmp_full);
    a_V_0_load_B <= (a_V_0_state_cmp_full and a_V_0_sel_wr);
    a_V_0_sel <= a_V_0_sel_rd;
    a_V_0_state_cmp_full <= '0' when (a_V_0_state = ap_const_lv2_1) else '1';
    a_V_0_vld_in <= a_V_TVALID;
    a_V_0_vld_out <= a_V_0_state(0);

    a_V_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, a_V_0_state, ap_block_pp0_stage0)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            a_V_TDATA_blk_n <= a_V_0_state(0);
        else 
            a_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    a_V_TREADY <= a_V_0_state(1);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter13, c_V_0_vld_out, b_V_0_vld_out, a_V_0_vld_out, d_V_1_ack_in)
    begin
                ap_block_pp0_stage0_01001 <= (((d_V_1_ack_in = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1)) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0) or (c_V_0_vld_out = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, c_V_0_vld_out, b_V_0_vld_out, a_V_0_vld_out, d_V_1_ack_in, ap_block_state13_io, ap_block_state14_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0) or (c_V_0_vld_out = ap_const_logic_0))) or ((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and ((d_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state14_io))) or ((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state13_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, c_V_0_vld_out, b_V_0_vld_out, a_V_0_vld_out, d_V_1_ack_in, ap_block_state13_io, ap_block_state14_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0) or (c_V_0_vld_out = ap_const_logic_0))) or ((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and ((d_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state14_io))) or ((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state13_io)));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state13_io_assign_proc : process(d_V_1_ack_in, tmp_reg_190_pp0_iter11_reg)
    begin
                ap_block_state13_io <= (((d_V_1_ack_in = ap_const_logic_0) and (tmp_reg_190_pp0_iter11_reg = ap_const_lv3_0)) or ((d_V_1_ack_in = ap_const_logic_0) and (tmp_reg_190_pp0_iter11_reg = ap_const_lv3_1)) or ((d_V_1_ack_in = ap_const_logic_0) and (tmp_reg_190_pp0_iter11_reg = ap_const_lv3_2)) or ((d_V_1_ack_in = ap_const_logic_0) and (tmp_reg_190_pp0_iter11_reg = ap_const_lv3_3)) or ((d_V_1_ack_in = ap_const_logic_0) and (tmp_reg_190_pp0_iter11_reg = ap_const_lv3_4)) or ((d_V_1_ack_in = ap_const_logic_0) and (tmp_reg_190_pp0_iter11_reg = ap_const_lv3_5)) or ((d_V_1_ack_in = ap_const_logic_0) and (tmp_reg_190_pp0_iter11_reg = ap_const_lv3_6)));
    end process;

        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state14_io_assign_proc : process(d_V_1_ack_in, tmp_reg_190_pp0_iter12_reg)
    begin
                ap_block_state14_io <= (((d_V_1_ack_in = ap_const_logic_0) and (tmp_reg_190_pp0_iter12_reg = ap_const_lv3_0)) or ((d_V_1_ack_in = ap_const_logic_0) and (tmp_reg_190_pp0_iter12_reg = ap_const_lv3_1)) or ((d_V_1_ack_in = ap_const_logic_0) and (tmp_reg_190_pp0_iter12_reg = ap_const_lv3_2)) or ((d_V_1_ack_in = ap_const_logic_0) and (tmp_reg_190_pp0_iter12_reg = ap_const_lv3_3)) or ((d_V_1_ack_in = ap_const_logic_0) and (tmp_reg_190_pp0_iter12_reg = ap_const_lv3_4)) or ((d_V_1_ack_in = ap_const_logic_0) and (tmp_reg_190_pp0_iter12_reg = ap_const_lv3_5)) or ((d_V_1_ack_in = ap_const_logic_0) and (tmp_reg_190_pp0_iter12_reg = ap_const_lv3_6)));
    end process;


    ap_block_state14_pp0_stage0_iter13_assign_proc : process(d_V_1_ack_in)
    begin
                ap_block_state14_pp0_stage0_iter13 <= (d_V_1_ack_in = ap_const_logic_0);
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, c_V_0_vld_out, b_V_0_vld_out, a_V_0_vld_out)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_start = ap_const_logic_0) or (ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0) or (c_V_0_vld_out = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to12_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to12 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to12)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to12 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    b_V_0_ack_in <= b_V_0_state(1);

    b_V_0_ack_out_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            b_V_0_ack_out <= ap_const_logic_1;
        else 
            b_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    b_V_0_data_out_assign_proc : process(b_V_0_payload_A, b_V_0_payload_B, b_V_0_sel)
    begin
        if ((b_V_0_sel = ap_const_logic_1)) then 
            b_V_0_data_out <= b_V_0_payload_B;
        else 
            b_V_0_data_out <= b_V_0_payload_A;
        end if; 
    end process;

    b_V_0_load_A <= (not(b_V_0_sel_wr) and b_V_0_state_cmp_full);
    b_V_0_load_B <= (b_V_0_state_cmp_full and b_V_0_sel_wr);
    b_V_0_sel <= b_V_0_sel_rd;
    b_V_0_state_cmp_full <= '0' when (b_V_0_state = ap_const_lv2_1) else '1';
    b_V_0_vld_in <= b_V_TVALID;
    b_V_0_vld_out <= b_V_0_state(0);

    b_V_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, b_V_0_state, ap_block_pp0_stage0)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_V_TDATA_blk_n <= b_V_0_state(0);
        else 
            b_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    b_V_TREADY <= b_V_0_state(1);
    c_V_0_ack_in <= c_V_0_state(1);

    c_V_0_ack_out_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            c_V_0_ack_out <= ap_const_logic_1;
        else 
            c_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    c_V_0_data_out_assign_proc : process(c_V_0_payload_A, c_V_0_payload_B, c_V_0_sel)
    begin
        if ((c_V_0_sel = ap_const_logic_1)) then 
            c_V_0_data_out <= c_V_0_payload_B;
        else 
            c_V_0_data_out <= c_V_0_payload_A;
        end if; 
    end process;

    c_V_0_load_A <= (not(c_V_0_sel_wr) and c_V_0_state_cmp_full);
    c_V_0_load_B <= (c_V_0_state_cmp_full and c_V_0_sel_wr);
    c_V_0_sel <= c_V_0_sel_rd;
    c_V_0_state_cmp_full <= '0' when (c_V_0_state = ap_const_lv2_1) else '1';
    c_V_0_vld_in <= c_V_TVALID;
    c_V_0_vld_out <= c_V_0_state(0);

    c_V_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, c_V_0_state, ap_block_pp0_stage0)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            c_V_TDATA_blk_n <= c_V_0_state(0);
        else 
            c_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    c_V_TREADY <= c_V_0_state(1);
    d_V_1_ack_in <= d_V_1_state(1);
    d_V_1_ack_out <= d_V_TREADY;

    d_V_1_data_in_assign_proc : process(ap_enable_reg_pp0_iter12, tmp_reg_190_pp0_iter11_reg, p_5_fu_95_p1, p_4_fu_104_p1, p_3_fu_113_p1, p_2_fu_118_p1, ret_V_2_fu_129_p2, p_1_fu_148_p1, p_s_fu_165_p1, ap_block_pp0_stage0_01001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then
            if ((tmp_reg_190_pp0_iter11_reg = ap_const_lv3_0)) then 
                d_V_1_data_in <= p_s_fu_165_p1;
            elsif ((tmp_reg_190_pp0_iter11_reg = ap_const_lv3_1)) then 
                d_V_1_data_in <= p_1_fu_148_p1;
            elsif ((tmp_reg_190_pp0_iter11_reg = ap_const_lv3_2)) then 
                d_V_1_data_in <= ret_V_2_fu_129_p2;
            elsif ((tmp_reg_190_pp0_iter11_reg = ap_const_lv3_3)) then 
                d_V_1_data_in <= p_2_fu_118_p1;
            elsif ((tmp_reg_190_pp0_iter11_reg = ap_const_lv3_4)) then 
                d_V_1_data_in <= p_3_fu_113_p1;
            elsif ((tmp_reg_190_pp0_iter11_reg = ap_const_lv3_5)) then 
                d_V_1_data_in <= p_4_fu_104_p1;
            elsif ((tmp_reg_190_pp0_iter11_reg = ap_const_lv3_6)) then 
                d_V_1_data_in <= p_5_fu_95_p1;
            else 
                d_V_1_data_in <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            d_V_1_data_in <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    d_V_1_data_out_assign_proc : process(d_V_1_payload_A, d_V_1_payload_B, d_V_1_sel)
    begin
        if ((d_V_1_sel = ap_const_logic_1)) then 
            d_V_1_data_out <= d_V_1_payload_B;
        else 
            d_V_1_data_out <= d_V_1_payload_A;
        end if; 
    end process;

    d_V_1_load_A <= (not(d_V_1_sel_wr) and d_V_1_state_cmp_full);
    d_V_1_load_B <= (d_V_1_state_cmp_full and d_V_1_sel_wr);
    d_V_1_sel <= d_V_1_sel_rd;
    d_V_1_state_cmp_full <= '0' when (d_V_1_state = ap_const_lv2_1) else '1';

    d_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter12, tmp_reg_190_pp0_iter11_reg, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_reg_190_pp0_iter11_reg = ap_const_lv3_0)) or ((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_reg_190_pp0_iter11_reg = ap_const_lv3_1)) or ((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_reg_190_pp0_iter11_reg = ap_const_lv3_2)) or ((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_reg_190_pp0_iter11_reg = ap_const_lv3_3)) or ((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_reg_190_pp0_iter11_reg = ap_const_lv3_4)) or ((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_reg_190_pp0_iter11_reg = ap_const_lv3_5)) or ((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_reg_190_pp0_iter11_reg = ap_const_lv3_6)))) then 
            d_V_1_vld_in <= ap_const_logic_1;
        else 
            d_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    d_V_1_vld_out <= d_V_1_state(0);
    d_V_TDATA <= d_V_1_data_out;

    d_V_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, tmp_reg_190_pp0_iter11_reg, tmp_reg_190_pp0_iter12_reg, d_V_1_state, ap_block_pp0_stage0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (tmp_reg_190_pp0_iter12_reg = ap_const_lv3_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (tmp_reg_190_pp0_iter12_reg = ap_const_lv3_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (tmp_reg_190_pp0_iter12_reg = ap_const_lv3_2)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (tmp_reg_190_pp0_iter12_reg = ap_const_lv3_3)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (tmp_reg_190_pp0_iter12_reg = ap_const_lv3_4)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (tmp_reg_190_pp0_iter12_reg = ap_const_lv3_5)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (tmp_reg_190_pp0_iter12_reg = ap_const_lv3_6)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (tmp_reg_190_pp0_iter11_reg = ap_const_lv3_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (tmp_reg_190_pp0_iter11_reg = ap_const_lv3_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (tmp_reg_190_pp0_iter11_reg = ap_const_lv3_2)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (tmp_reg_190_pp0_iter11_reg = ap_const_lv3_3)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (tmp_reg_190_pp0_iter11_reg = ap_const_lv3_4)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (tmp_reg_190_pp0_iter11_reg = ap_const_lv3_5)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (tmp_reg_190_pp0_iter11_reg = ap_const_lv3_6)))) then 
            d_V_TDATA_blk_n <= d_V_1_state(1);
        else 
            d_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    d_V_TVALID <= d_V_1_state(0);

    grp_fu_85_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_85_ce <= ap_const_logic_1;
        else 
            grp_fu_85_ce <= ap_const_logic_0;
        end if; 
    end process;

        grp_fu_85_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_7_tr_fu_77_p0),9));

        lhs_V_1_fu_136_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_V_read_reg_180_pp0_iter11_reg),9));

        lhs_V_fu_153_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_V_read_reg_180_pp0_iter11_reg),9));

        p_1_fu_148_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_1_fu_142_p2),16));

        p_2_fu_118_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_85_p2),16));

        p_3_fu_113_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_4_fu_109_p2),16));

        p_4_fu_104_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_5_fu_100_p2),16));

        p_5_fu_95_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_6_fu_91_p2),16));

        p_s_fu_165_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_fu_159_p2),16));

    ret_V_1_fu_142_p2 <= std_logic_vector(signed(lhs_V_1_fu_136_p1) - signed(rhs_V_1_fu_139_p1));
    ret_V_2_fu_129_p0 <= b_V_read_reg_170_pp0_iter11_reg;
    ret_V_2_fu_129_p1 <= a_V_read_reg_180_pp0_iter11_reg;
    ret_V_2_fu_129_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(ret_V_2_fu_129_p0) * signed(ret_V_2_fu_129_p1))), 16));
    ret_V_4_fu_109_p2 <= (b_V_read_reg_170_pp0_iter11_reg and a_V_read_reg_180_pp0_iter11_reg);
    ret_V_5_fu_100_p2 <= (b_V_read_reg_170_pp0_iter11_reg or a_V_read_reg_180_pp0_iter11_reg);
    ret_V_6_fu_91_p2 <= (b_V_read_reg_170_pp0_iter11_reg xor a_V_read_reg_180_pp0_iter11_reg);
    ret_V_fu_159_p2 <= std_logic_vector(signed(rhs_V_fu_156_p1) + signed(lhs_V_fu_153_p1));
        rhs_V_1_fu_139_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(b_V_read_reg_170_pp0_iter11_reg),9));

        rhs_V_fu_156_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(b_V_read_reg_170_pp0_iter11_reg),9));

    tmp_7_tr_fu_77_p0 <= a_V_0_data_out;
    tmp_fu_73_p1 <= c_V_0_data_out(3 - 1 downto 0);
end behav;
