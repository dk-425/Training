-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
-- Version: 2022.2.2
-- Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity crc24a_crc24a_Pipeline_VITIS_LOOP_58_7 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    f_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    f_V_ce0 : OUT STD_LOGIC;
    f_V_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    d_V : IN STD_LOGIC_VECTOR (7 downto 0);
    o_V_2_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    o_V_2_out_ap_vld : OUT STD_LOGIC;
    m_V_2_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_V_2_out_ap_vld : OUT STD_LOGIC;
    h_V_2_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    h_V_2_out_ap_vld : OUT STD_LOGIC;
    g_V_2_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    g_V_2_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of crc24a_crc24a_Pipeline_VITIS_LOOP_58_7 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln58_fu_129_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_1_reg_356 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln58_fu_141_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal p_Val2_s_fu_54 : STD_LOGIC_VECTOR (7 downto 0);
    signal g_V_1_fu_242_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_1_fu_58 : STD_LOGIC_VECTOR (7 downto 0);
    signal h_V_1_fu_256_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_2_fu_62 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_V_1_fu_264_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_3_fu_66 : STD_LOGIC_VECTOR (7 downto 0);
    signal o_V_1_fu_272_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_fu_70 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln58_fu_135_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_fu_163_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln628_fu_178_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_184_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln628_fu_181_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln368_fu_218_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln60_fu_172_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_1_fu_201_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_211_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln63_fu_250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_2_fu_222_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_3_fu_232_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_s_fu_191_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component crc24a_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component crc24a_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    i_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln58_fu_129_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_70 <= add_ln58_fu_135_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_70 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_1_reg_356 <= ap_sig_allocacmp_i_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                p_Val2_1_fu_58 <= h_V_1_fu_256_p3;
                p_Val2_2_fu_62 <= m_V_1_fu_264_p3;
                p_Val2_3_fu_66 <= o_V_1_fu_272_p3;
                p_Val2_s_fu_54 <= g_V_1_fu_242_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln58_fu_135_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv5_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln58_fu_129_p2)
    begin
        if (((icmp_ln58_fu_129_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_70, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_70;
        end if; 
    end process;

    f_V_address0 <= zext_ln58_fu_141_p1(5 - 1 downto 0);

    f_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            f_V_ce0 <= ap_const_logic_1;
        else 
            f_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    g_V_1_fu_242_p3 <= 
        p_Result_1_fu_201_p4 when (icmp_ln60_fu_172_p2(0) = '1') else 
        p_Val2_s_fu_54;
    g_V_2_out <= p_Val2_s_fu_54;

    g_V_2_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln58_fu_129_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln58_fu_129_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            g_V_2_out_ap_vld <= ap_const_logic_1;
        else 
            g_V_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    h_V_1_fu_256_p3 <= 
        p_Val2_1_fu_58 when (or_ln63_fu_250_p2(0) = '1') else 
        p_Result_2_fu_222_p4;
    h_V_2_out <= p_Val2_1_fu_58;

    h_V_2_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln58_fu_129_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln58_fu_129_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            h_V_2_out_ap_vld <= ap_const_logic_1;
        else 
            h_V_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln58_fu_129_p2 <= "1" when (ap_sig_allocacmp_i_1 = ap_const_lv5_18) else "0";
    icmp_ln60_fu_172_p2 <= "1" when (tmp_fu_163_p4 = ap_const_lv2_0) else "0";
    m_V_1_fu_264_p3 <= 
        p_Result_3_fu_232_p4 when (tmp_4_fu_211_p3(0) = '1') else 
        p_Val2_2_fu_62;
    m_V_2_out <= p_Val2_2_fu_62;

    m_V_2_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln58_fu_129_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln58_fu_129_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_V_2_out_ap_vld <= ap_const_logic_1;
        else 
            m_V_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    o_V_1_fu_272_p3 <= 
        p_Result_s_fu_191_p4 when (icmp_ln60_fu_172_p2(0) = '1') else 
        p_Val2_3_fu_66;
    o_V_2_out <= p_Val2_3_fu_66;

    o_V_2_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln58_fu_129_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln58_fu_129_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            o_V_2_out_ap_vld <= ap_const_logic_1;
        else 
            o_V_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    or_ln63_fu_250_p2 <= (tmp_4_fu_211_p3 or icmp_ln60_fu_172_p2);
    
    p_Result_1_fu_201_p4_proc : process(p_Val2_s_fu_54, zext_ln628_fu_178_p1, f_V_q0)
    begin
        p_Result_1_fu_201_p4 <= p_Val2_s_fu_54;
        if to_integer(unsigned(zext_ln628_fu_178_p1)) >= p_Val2_s_fu_54'low and to_integer(unsigned(zext_ln628_fu_178_p1)) <= p_Val2_s_fu_54'high then
            p_Result_1_fu_201_p4(to_integer(unsigned(zext_ln628_fu_178_p1))) <= f_V_q0(0);
        end if;
    end process;

    
    p_Result_2_fu_222_p4_proc : process(p_Val2_1_fu_58, zext_ln368_fu_218_p1, f_V_q0)
    begin
        p_Result_2_fu_222_p4 <= p_Val2_1_fu_58;
        if to_integer(unsigned(zext_ln368_fu_218_p1)) >= p_Val2_1_fu_58'low and to_integer(unsigned(zext_ln368_fu_218_p1)) <= p_Val2_1_fu_58'high then
            p_Result_2_fu_222_p4(to_integer(unsigned(zext_ln368_fu_218_p1))) <= f_V_q0(0);
        end if;
    end process;

    
    p_Result_3_fu_232_p4_proc : process(p_Val2_2_fu_62, zext_ln368_fu_218_p1, f_V_q0)
    begin
        p_Result_3_fu_232_p4 <= p_Val2_2_fu_62;
        if to_integer(unsigned(zext_ln368_fu_218_p1)) >= p_Val2_2_fu_62'low and to_integer(unsigned(zext_ln368_fu_218_p1)) <= p_Val2_2_fu_62'high then
            p_Result_3_fu_232_p4(to_integer(unsigned(zext_ln368_fu_218_p1))) <= f_V_q0(0);
        end if;
    end process;

    
    p_Result_s_fu_191_p4_proc : process(p_Val2_3_fu_66, zext_ln628_fu_178_p1, tmp_1_fu_184_p3)
    begin
        p_Result_s_fu_191_p4 <= p_Val2_3_fu_66;
        if to_integer(unsigned(zext_ln628_fu_178_p1)) >= p_Val2_3_fu_66'low and to_integer(unsigned(zext_ln628_fu_178_p1)) <= p_Val2_3_fu_66'high then
            p_Result_s_fu_191_p4(to_integer(unsigned(zext_ln628_fu_178_p1))) <= tmp_1_fu_184_p3(0);
        end if;
    end process;

    tmp_1_fu_184_p3 <= d_V(to_integer(unsigned(zext_ln628_fu_178_p1)) downto to_integer(unsigned(zext_ln628_fu_178_p1))) when (to_integer(unsigned(zext_ln628_fu_178_p1)) >= 0 and to_integer(unsigned(zext_ln628_fu_178_p1)) <=7) else "-";
    tmp_4_fu_211_p3 <= i_1_reg_356(4 downto 4);
    tmp_fu_163_p4 <= i_1_reg_356(4 downto 3);
    trunc_ln628_fu_181_p1 <= i_1_reg_356(3 - 1 downto 0);
    zext_ln368_fu_218_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln628_fu_181_p1),32));
    zext_ln58_fu_141_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_1),64));
    zext_ln628_fu_178_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_356),32));
end behav;
