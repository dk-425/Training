// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _fir_HH_
#define _fir_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct fir : public sc_module {
    // Port declarations 11
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<48> > y_V;
    sc_out< sc_lv<2> > c_V_address0;
    sc_out< sc_logic > c_V_ce0;
    sc_in< sc_lv<24> > c_V_q0;
    sc_in< sc_lv<24> > x_V;


    // Module declarations
    fir(sc_module_name name);
    SC_HAS_PROCESS(fir);

    ~fir();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<24> > shift_reg_V_0;
    sc_signal< sc_lv<24> > shift_reg_V_2;
    sc_signal< sc_lv<24> > shift_reg_V_1;
    sc_signal< sc_lv<48> > p_Val2_s_reg_90;
    sc_signal< sc_lv<3> > i_reg_103;
    sc_signal< sc_lv<1> > tmp_1_fu_123_p3;
    sc_signal< sc_lv<1> > tmp_1_reg_231;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter3;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > tmp_1_reg_231_pp0_iter1_reg;
    sc_signal< sc_lv<1> > tmp_1_reg_231_pp0_iter2_reg;
    sc_signal< sc_lv<1> > tmp_2_fu_131_p2;
    sc_signal< sc_lv<1> > tmp_2_reg_235;
    sc_signal< sc_lv<2> > tmp_3_fu_137_p1;
    sc_signal< sc_lv<2> > tmp_3_reg_239;
    sc_signal< sc_lv<3> > i_1_fu_151_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<24> > current_data_V_fu_187_p3;
    sc_signal< sc_lv<24> > c_V_load_reg_260;
    sc_signal< sc_lv<48> > r_V_2_fu_214_p2;
    sc_signal< sc_lv<48> > r_V_2_reg_265;
    sc_signal< sc_lv<48> > acc_V_fu_220_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<24> > ap_phi_reg_pp0_iter0_p_s_reg_114;
    sc_signal< sc_lv<24> > ap_phi_reg_pp0_iter1_p_s_reg_114;
    sc_signal< sc_lv<24> > ap_phi_reg_pp0_iter2_p_s_reg_114;
    sc_signal< sc_lv<64> > tmp_6_fu_146_p1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<1> > sel_tmp_fu_169_p2;
    sc_signal< sc_lv<1> > sel_tmp2_fu_182_p2;
    sc_signal< sc_lv<24> > sel_tmp1_fu_174_p3;
    sc_signal< sc_lv<24> > r_V_2_fu_214_p0;
    sc_signal< sc_lv<24> > r_V_2_fu_214_p1;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< bool > ap_condition_131;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<48> ap_const_lv48_0;
    static const sc_lv<3> ap_const_lv3_3;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<3> ap_const_lv3_7;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_acc_V_fu_220_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state6();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_block_state5_pp0_stage0_iter3();
    void thread_ap_condition_131();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_reg_pp0_iter0_p_s_reg_114();
    void thread_ap_ready();
    void thread_c_V_address0();
    void thread_c_V_ce0();
    void thread_current_data_V_fu_187_p3();
    void thread_i_1_fu_151_p2();
    void thread_r_V_2_fu_214_p0();
    void thread_r_V_2_fu_214_p1();
    void thread_r_V_2_fu_214_p2();
    void thread_sel_tmp1_fu_174_p3();
    void thread_sel_tmp2_fu_182_p2();
    void thread_sel_tmp_fu_169_p2();
    void thread_tmp_1_fu_123_p3();
    void thread_tmp_2_fu_131_p2();
    void thread_tmp_3_fu_137_p1();
    void thread_tmp_6_fu_146_p1();
    void thread_y_V();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
